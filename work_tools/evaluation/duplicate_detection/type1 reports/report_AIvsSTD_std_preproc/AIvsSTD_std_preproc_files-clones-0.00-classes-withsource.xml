<clones>
<systeminfo processor="nicad6" system="AIvsSTD_std_preproc" granularity="files" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="4173" npairs="4797"/>
<runinfo ncompares="113982" cputime="113447"/>
<classinfo nclasses="63"/>

<class classid="1" nclones="40" nlines="49" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student1/exercise3/DiskP.java" startline="1" endline="59" pcid="7">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student3/exercise3/DiskP.java" startline="1" endline="59" pcid="300">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student22/exercise3/DiskP.java" startline="1" endline="59" pcid="193">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student36/exercise3/DiskP.java" startline="1" endline="59" pcid="396">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student34/exercise3/DiskP.java" startline="1" endline="59" pcid="370">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student18/exercise3/DiskP.java" startline="1" endline="59" pcid="117">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student37/exercise3/DiskP.java" startline="1" endline="59" pcid="411">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student23/exercise3/DiskP.java" startline="1" endline="59" pcid="204">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student33/exercise3/DiskP.java" startline="1" endline="59" pcid="361">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student10/exercise3/DiskP.java" startline="1" endline="59" pcid="16">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student43/exercise3/DiskP.java" startline="1" endline="59" pcid="529">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student9/exercise3/DiskP.java" startline="1" endline="59" pcid="590">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student38/exercise3/DiskP.java" startline="1" endline="59" pcid="429">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student35/exercise3/DiskP.java" startline="1" endline="59" pcid="384">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student32/exercise3/DiskP.java" startline="1" endline="59" pcid="346">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student2/exercise3/DiskP.java" startline="1" endline="59" pcid="154">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student11/exercise3/DiskP.java" startline="1" endline="59" pcid="26">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student41/exercise3/DiskP.java" startline="1" endline="59" pcid="495">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student17/exercise3/DiskP.java" startline="1" endline="59" pcid="104">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student42/exercise3/DiskP.java" startline="1" endline="59" pcid="509">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student13/exercise3/DiskP.java" startline="1" endline="59" pcid="56">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student8/exercise3/DiskP.java" startline="1" endline="59" pcid="578">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student20/exercise3/DiskP.java" startline="1" endline="59" pcid="166">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student24/exercise3/DiskP.java" startline="1" endline="59" pcid="219">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student39/exercise3/DiskP.java" startline="1" endline="59" pcid="441">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student19/exercise3/DiskP.java" startline="1" endline="59" pcid="137">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student7/exercise3/DiskP.java" startline="1" endline="59" pcid="569">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student27/exercise3/DiskP.java" startline="1" endline="59" pcid="257">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student4/exercise3/DiskP.java" startline="1" endline="59" pcid="454">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student12/exercise3/DiskP.java" startline="1" endline="59" pcid="42">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student16/exercise3/DiskP.java" startline="1" endline="59" pcid="91">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student25/exercise3/DiskP.java" startline="1" endline="59" pcid="233">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student30/exercise3/DiskP.java" startline="1" endline="59" pcid="317">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student21/exercise3/DiskP.java" startline="1" endline="59" pcid="180">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student15/exercise3/DiskP.java" startline="1" endline="59" pcid="81">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student6/exercise3/DiskP.java" startline="1" endline="59" pcid="555">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student31/exercise3/DiskP.java" startline="1" endline="59" pcid="335">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student5/exercise3/DiskP.java" startline="1" endline="59" pcid="542">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student40/exercise3/DiskP.java" startline="1" endline="59" pcid="469">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student26/exercise3/DiskP.java" startline="1" endline="59" pcid="242">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
</class>

<class classid="2" nclones="41" nlines="49" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student1/exercise3/SoftwareP.java" startline="1" endline="61" pcid="10">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student11/exercise3/SoftwareP.java" startline="1" endline="61" pcid="29">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student19/exercise3/SoftwareP.java" startline="1" endline="61" pcid="140">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student31/exercise3/SoftwareP.java" startline="1" endline="61" pcid="339">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student34/exercise3/SoftwareP.java" startline="1" endline="61" pcid="373">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student27/exercise3/SoftwareP.java" startline="1" endline="61" pcid="262">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student2/exercise3/SoftwareP.java" startline="1" endline="61" pcid="158">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student41/exercise3/SoftwareP.java" startline="1" endline="61" pcid="500">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
            case ALREADYINSTALLED:
                System.out.println("Can't install " + name + " to " + disk + ": already installed.");
                break;
            case INSUFFICIENTSPACE:
                System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
                break;
            case SUCCESS:
                System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student22/exercise3/SoftwareP.java" startline="1" endline="61" pcid="197">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student18/exercise3/SoftwareP.java" startline="1" endline="61" pcid="123">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student13/exercise3/SoftwareP.java" startline="1" endline="61" pcid="60">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student43/exercise3/SoftwareP.java" startline="1" endline="61" pcid="535">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student36/exercise3/SoftwareP.java" startline="1" endline="61" pcid="399">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student12/exercise3/SoftwareP.java" startline="1" endline="61" pcid="49">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student3/exercise3/SoftwareP.java" startline="1" endline="61" pcid="304">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student35/exercise3/SoftwareP.java" startline="1" endline="61" pcid="389">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student28/exercise3/SoftwareP.java" startline="1" endline="61" pcid="280">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student26/exercise3/SoftwareP.java" startline="1" endline="61" pcid="245">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student5/exercise3/SoftwareP.java" startline="1" endline="61" pcid="545">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student6/exercise3/SoftwareP.java" startline="1" endline="61" pcid="562">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student42/exercise3/SoftwareP.java" startline="1" endline="61" pcid="515">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student40/exercise3/SoftwareP.java" startline="1" endline="61" pcid="474">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student33/exercise3/SoftwareP.java" startline="1" endline="61" pcid="364">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student9/exercise3/SoftwareP.java" startline="1" endline="61" pcid="595">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student20/exercise3/SoftwareP.java" startline="1" endline="61" pcid="172">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student25/exercise3/SoftwareP.java" startline="1" endline="61" pcid="236">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student37/exercise3/SoftwareP.java" startline="1" endline="61" pcid="418">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student23/exercise3/SoftwareP.java" startline="1" endline="61" pcid="207">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student30/exercise3/SoftwareP.java" startline="1" endline="61" pcid="323">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student15/exercise3/SoftwareP.java" startline="1" endline="61" pcid="84">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student32/exercise3/SoftwareP.java" startline="1" endline="61" pcid="349">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student17/exercise3/SoftwareP.java" startline="1" endline="61" pcid="107">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student24/exercise3/SoftwareP.java" startline="1" endline="61" pcid="225">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student7/exercise3/SoftwareP.java" startline="1" endline="61" pcid="572">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student21/exercise3/SoftwareP.java" startline="1" endline="61" pcid="185">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student4/exercise3/SoftwareP.java" startline="1" endline="61" pcid="457">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student8/exercise3/SoftwareP.java" startline="1" endline="61" pcid="582">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student16/exercise3/SoftwareP.java" startline="1" endline="61" pcid="97">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student38/exercise3/SoftwareP.java" startline="1" endline="61" pcid="432">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student39/exercise3/SoftwareP.java" startline="1" endline="61" pcid="447">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student10/exercise3/SoftwareP.java" startline="1" endline="61" pcid="19">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
</class>

<class classid="3" nclones="41" nlines="43" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student1/exercise3/UserP.java" startline="1" endline="56" pcid="11">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student11/exercise3/UserP.java" startline="1" endline="56" pcid="30">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student40/exercise3/UserP.java" startline="1" endline="56" pcid="476">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student10/exercise3/UserP.java" startline="1" endline="56" pcid="20">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student33/exercise3/UserP.java" startline="1" endline="56" pcid="365">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student9/exercise3/UserP.java" startline="1" endline="56" pcid="598">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student14/exercise3/UserP.java" startline="1" endline="56" pcid="73">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student30/exercise3/UserP.java" startline="1" endline="56" pcid="325">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student3/exercise3/UserP.java" startline="1" endline="56" pcid="306">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student25/exercise3/UserP.java" startline="1" endline="56" pcid="237">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student35/exercise3/UserP.java" startline="1" endline="56" pcid="391">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student27/exercise3/UserP.java" startline="1" endline="56" pcid="264">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student21/exercise3/UserP.java" startline="1" endline="56" pcid="187">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student12/exercise3/UserP.java" startline="1" endline="56" pcid="51">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student15/exercise3/UserP.java" startline="1" endline="56" pcid="85">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student32/exercise3/UserP.java" startline="1" endline="56" pcid="350">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student43/exercise3/UserP.java" startline="1" endline="56" pcid="537">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student26/exercise3/UserP.java" startline="1" endline="56" pcid="246">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student42/exercise3/UserP.java" startline="1" endline="56" pcid="517">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student18/exercise3/UserP.java" startline="1" endline="56" pcid="125">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student19/exercise3/UserP.java" startline="1" endline="56" pcid="141">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student22/exercise3/UserP.java" startline="1" endline="56" pcid="199">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student24/exercise3/UserP.java" startline="1" endline="56" pcid="227">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student39/exercise3/UserP.java" startline="1" endline="56" pcid="449">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student5/exercise3/UserP.java" startline="1" endline="56" pcid="546">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student37/exercise3/UserP.java" startline="1" endline="56" pcid="420">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student38/exercise3/UserP.java" startline="1" endline="56" pcid="433">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student17/exercise3/UserP.java" startline="1" endline="56" pcid="108">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student34/exercise3/UserP.java" startline="1" endline="56" pcid="374">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student6/exercise3/UserP.java" startline="1" endline="56" pcid="564">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student23/exercise3/UserP.java" startline="1" endline="56" pcid="208">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student20/exercise3/UserP.java" startline="1" endline="56" pcid="174">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student41/exercise3/UserP.java" startline="1" endline="56" pcid="502">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student2/exercise3/UserP.java" startline="1" endline="56" pcid="159">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student16/exercise3/UserP.java" startline="1" endline="56" pcid="99">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student36/exercise3/UserP.java" startline="1" endline="56" pcid="400">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student4/exercise3/UserP.java" startline="1" endline="56" pcid="458">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student28/exercise3/UserP.java" startline="1" endline="56" pcid="282">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student13/exercise3/UserP.java" startline="1" endline="56" pcid="62">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student7/exercise3/UserP.java" startline="1" endline="56" pcid="573">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student8/exercise3/UserP.java" startline="1" endline="56" pcid="584">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
</class>

<class classid="4" nclones="23" nlines="37" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student10/exercise1/CharacterP.java" startline="1" endline="48" pcid="12">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student31/exercise1/CharacterP.java" startline="1" endline="48" pcid="326">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student12/exercise1/CharacterP.java" startline="1" endline="48" pcid="32">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student3/exercise1/CharacterP.java" startline="1" endline="48" pcid="296">
public class Character {
	private String name;
	private CharacterRole role;

	public Character(String name, CharacterRole role) {
		this.name = name;
		this.role = role;
	}

	public String getName() {
		return name;
	}

	public CharacterRole getRole() {
		return role;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Character other = (Character) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return name + " (" + role + ")";
	}
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student11/exercise1/CharacterP.java" startline="1" endline="48" pcid="21">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student40/exercise1/CharacterP.java" startline="1" endline="48" pcid="459">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student27/exercise1/CharacterP.java" startline="1" endline="48" pcid="247">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student25/exercise1/CharacterP.java" startline="1" endline="48" pcid="228">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student37/exercise1/CharacterP.java" startline="1" endline="48" pcid="401">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student23/exercise1/CharacterP.java" startline="1" endline="48" pcid="200">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student21/exercise1/CharacterP.java" startline="1" endline="48" pcid="175">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student34/exercise1/CharacterP.java" startline="1" endline="48" pcid="366">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student22/exercise1/CharacterP.java" startline="1" endline="48" pcid="189">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student36/exercise1/CharacterP.java" startline="1" endline="48" pcid="392">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student7/exercise1/CharacterP.java" startline="1" endline="48" pcid="565">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student26/exercise1/CharacterP.java" startline="1" endline="48" pcid="238">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student17/exercise1/CharacterP.java" startline="1" endline="48" pcid="100">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student2/exercise1/CharacterP.java" startline="1" endline="48" pcid="142">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student8/exercise1/CharacterP.java" startline="1" endline="48" pcid="574">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student5/exercise1/CharacterP.java" startline="1" endline="48" pcid="538">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student32/exercise1/CharacterP.java" startline="1" endline="48" pcid="342">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student16/exercise1/CharacterP.java" startline="1" endline="48" pcid="86">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student4/exercise1/CharacterP.java" startline="1" endline="48" pcid="450">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Character other = (Character) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
</class>

<class classid="5" nclones="9" nlines="18" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student10/exercise1/PartyP.java" startline="1" endline="24" pcid="15">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student5/exercise1/PartyP.java" startline="1" endline="24" pcid="541">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student23/exercise1/PartyP.java" startline="1" endline="24" pcid="203">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student34/exercise1/PartyP.java" startline="1" endline="24" pcid="369">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student7/exercise1/PartyP.java" startline="1" endline="24" pcid="568">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student36/exercise1/PartyP.java" startline="1" endline="24" pcid="395">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student26/exercise1/PartyP.java" startline="1" endline="24" pcid="241">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student17/exercise1/PartyP.java" startline="1" endline="24" pcid="103">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab10-submissions/student4/exercise1/PartyP.java" startline="1" endline="24" pcid="453">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        String characterList = "";
        for (Character character : characters) {
            characterList += "- " + character + "\n";
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }

    public void add(Character character) {

    }
}

</source>
</class>

<class classid="6" nclones="2" nlines="22" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab2-submissions/student14/exercise4/DivisibleByThreeP.java" startline="1" endline="26" pcid="662">
import java.util.Scanner;

public class DivisibleByThree {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		System.out.print("Enter a number :");
		int num = scanner.nextInt();
		int sumOfDigits = 0;
		while (num != 0) {
			int currentLastDigit = num % 10;
			sumOfDigits += currentLastDigit;
			num = num - currentLastDigit;
			num = num / 10;
		}
		if (sumOfDigits % 3 == 0) {
			System.out.print("The number is divisible by three");
		} else {
			System.out.print("The number is not divisible by three");
		}

		scanner.close();
	}
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab2-submissions/student49/ex4/DivisibleByThreeP.java" startline="1" endline="26" pcid="1102">
import java.util.Scanner;

public class DivisibleByThree {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		System.out.print("Enter a number :");
		int num = scanner.nextInt();
		int sumOfDigits = 0;
		while (num != 0) {
			int currentLastDigit = num % 10;
			sumOfDigits += currentLastDigit;
			num = num - currentLastDigit;
			num = num / 10;
		}
		if (sumOfDigits % 3 == 0) {
			System.out.print("The number is divisible by three");
		} else {
			System.out.print("The number is not divisible by three");
		}

		scanner.close();
	}
}

</source>
</class>

<class classid="7" nclones="2" nlines="115" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab2-submissions/student14/exercise6/TimeP.java" startline="1" endline="117" pcid="665">
import java.util.Scanner;

public class Time {

	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);

		int morningOrAfternoon = -1;
		int hours = 0;
		int minutes = -1;
		int seconds = -1;
		int twelveOrTwentyfour = -1;
		while (twelveOrTwentyfour != 0 && twelveOrTwentyfour != 1) {
			System.out.print("12 hour clock = 0, 24 hour clock = 1 :");
			twelveOrTwentyfour = scanner.nextInt();
		}
		Boolean correctHourEntered = false;

		while (!correctHourEntered) {
			if (twelveOrTwentyfour == 0) {
				while (morningOrAfternoon != 0 && morningOrAfternoon != 1) {
					System.out.print("Morning = 0 afternoon = 1 :");
					morningOrAfternoon = scanner.nextInt();
				}
			}
			System.out.print("Enter the hour :");
			hours = scanner.nextInt();
			if (twelveOrTwentyfour == 0) {
				if (hours >= 0 && hours <= 11) {
					correctHourEntered = true;
				}
			} else {
				if (hours >= 0 && hours <= 23) {
					correctHourEntered = true;
				}
			}
		}
		while (minutes < 0 || minutes > 59) {
			System.out.print("Enter the minutes :");
			minutes = scanner.nextInt();
		}
		while (seconds < 0 || seconds > 59) {
			System.out.print("Enter the seconds :");
			seconds = scanner.nextInt();
		}
		if (hours < 10) {
			System.out.print("0");
		}
		System.out.print(hours);
		System.out.print(":");
		if (minutes < 10) {
			System.out.print("0");
		}
		System.out.print(minutes);
		System.out.print(":");
		if (seconds < 10) {
			System.out.print("0");
		}
		System.out.print(seconds);
		if (twelveOrTwentyfour == 0) {
			if (morningOrAfternoon == 0) {
				System.out.println(" AM");
			} else {
				System.out.println(" PM");
			}
		}
		seconds = seconds + 5;
		if (seconds >= 60) {
			minutes++;
			seconds = seconds - 60;
		}
		if (minutes >= 60) {
			hours++;
			minutes = minutes - 60;
		}
		if (twelveOrTwentyfour == 0) {
			if (hours == 12) {
				hours = 0;
				if (morningOrAfternoon == 0) {
					morningOrAfternoon = 1;
				} else {
					morningOrAfternoon = 0;
				}
			}
		} else {
			if (hours == 24) {
				hours = 0;
			}
		}
		System.out.print("\nThe new time with 5 seconds added is :");
		if (hours < 10) {
			System.out.print("0");
		}
		System.out.print(hours);
		System.out.print(":");
		if (minutes < 10) {
			System.out.print("0");
		}
		System.out.print(minutes);
		System.out.print(":");
		if (seconds < 10) {
			System.out.print("0");
		}
		System.out.print(seconds);
		if (twelveOrTwentyfour == 0) {
			if (morningOrAfternoon == 0) {
				System.out.println(" AM");
			} else {
				System.out.println(" PM");
			}
		}

		scanner.close();
	}
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab2-submissions/student49/ex6/TimeP.java" startline="1" endline="113" pcid="1105">
import java.util.Scanner;

public class Time {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int morningOrAfternoon = -1;
		int hours = 0;
		int minutes = -1;
		int seconds = -1;
		int twelveOrTwentyfour = -1;
		while (twelveOrTwentyfour != 0 && twelveOrTwentyfour != 1) {
			System.out.print("12 hour clock = 0, 24 hour clock = 1 :");
			twelveOrTwentyfour = scanner.nextInt();
		}
		Boolean correctHourEntered = false;
		while (!correctHourEntered) {
			if (twelveOrTwentyfour == 0) {
				while (morningOrAfternoon != 0 && morningOrAfternoon != 1) {
					System.out.print("Morning = 0 afternoon = 1 :");
					morningOrAfternoon = scanner.nextInt();
				}
			}
			System.out.print("Enter the hour :");
			hours = scanner.nextInt();
			if (twelveOrTwentyfour == 0) {
				if (hours >= 0 && hours <= 11) {
					correctHourEntered = true;
				}
			} else {
				if (hours >= 0 && hours <= 23) {
					correctHourEntered = true;
				}
			}
		}
		while (minutes < 0 || minutes > 59) {
			System.out.print("Enter the minutes :");
			minutes = scanner.nextInt();
		}
		while (seconds < 0 || seconds > 59) {
			System.out.print("Enter the seconds :");
			seconds = scanner.nextInt();
		}
		if (hours < 10) {
			System.out.print("0");
		}
		System.out.print(hours);
		System.out.print(":");
		if (minutes < 10) {
			System.out.print("0");
		}
		System.out.print(minutes);
		System.out.print(":");
		if (seconds < 10) {
			System.out.print("0");
		}
		System.out.print(seconds);
		if (twelveOrTwentyfour == 0) {
			if (morningOrAfternoon == 0) {
				System.out.println(" AM");
			} else {
				System.out.println(" PM");
			}
		}
		seconds = seconds + 5;
		if (seconds >= 60) {
			minutes++;
			seconds = seconds - 60;
		}
		if (minutes >= 60) {
			hours++;
			minutes = minutes - 60;
		}
		if (twelveOrTwentyfour == 0) {
			if (hours == 12) {
				hours = 0;
				if (morningOrAfternoon == 0) {
					morningOrAfternoon = 1;
				} else {
					morningOrAfternoon = 0;
				}
			}
		} else {
			if (hours == 24) {
				hours = 0;
			}
		}
		System.out.print("\nThe new time with 5 seconds added is :");
		if (hours < 10) {
			System.out.print("0");
		}
		System.out.print(hours);
		System.out.print(":");
		if (minutes < 10) {
			System.out.print("0");
		}
		System.out.print(minutes);
		System.out.print(":");
		if (seconds < 10) {
			System.out.print("0");
		}
		System.out.print(seconds);
		if (twelveOrTwentyfour == 0) {
			if (morningOrAfternoon == 0) {
				System.out.println(" AM");
			} else {
				System.out.println(" PM");
			}
		}
		scanner.close();
	}
}

</source>
</class>

<class classid="8" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab3-submissions/student14/Exercise3/StatisticsP.java" startline="1" endline="29" pcid="1348">
import java.util.Scanner;

public class Statistics {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = 1;
        int sum = 0;
        int min = 100000000;
        int max = -100000000;
        double count = 0.0;
        while (num != 0) {
            System.out.print("Enter a number :");
            num = scanner.nextInt();
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
            sum += num;
            count++;
        }
        scanner.close();
        System.out.println(" The minimum is " + min);
        System.out.println("The maximum is " + max);
        System.out.printf("The average is %.2f", (double) sum / count);
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab3-submissions/student46/ex3/StatisticsP.java" startline="1" endline="29" pcid="1647">
import java.util.Scanner;

public class Statistics {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = 1;
        int sum = 0;
        int min = 100000000;
        int max = -100000000;
        double count = 0.0;
        while (num != 0) {
            System.out.print("Enter a number :");
            num = scanner.nextInt();
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
            sum += num;
            count++;
        }
        scanner.close();
        System.out.println(" The minimum is " + min);
        System.out.println("The maximum is " + max);
        System.out.printf("The average is %.2f", (double) sum / count);
    }
}

</source>
</class>

<class classid="9" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab3-submissions/student14/exercise4/lu/uni/programming1/lab3/exercise4/DivThreeMoreDigitsP.java" startline="1" endline="30" pcid="1349">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number :");
        int num = scanner.nextInt();
        int sumOfDigits = 100000;
        while (sumOfDigits > 10) {
            sumOfDigits = 0;
            while (num != 0) {
                int currentLastDigit = num % 10;
                sumOfDigits += currentLastDigit;
                num = num - currentLastDigit;
                num = num / 10;
            }
            num = sumOfDigits;
            System.out.println(num);
        }
        if (sumOfDigits % 3 == 0) {
            System.out.print("The number is divisible by three");
        } else {
            System.out.print("The number is not divisible by three");
        }
        scanner.close();
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab3-submissions/student46/ex4/DivThreeMoreDigitsP.java" startline="1" endline="29" pcid="1648">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number :");
        int num = scanner.nextInt();
        int sumOfDigits = 100000;
        while (sumOfDigits > 10) {
            sumOfDigits = 0;
            while (num != 0) {
                int currentLastDigit = num % 10;
                sumOfDigits += currentLastDigit;
                num = num - currentLastDigit;
                num = num / 10;
            }
            num = sumOfDigits;
            System.out.println(num);
        }
        if (sumOfDigits % 3 == 0) {
            System.out.print("The number is divisible by three");
        } else {
            System.out.print("The number is not divisible by three");
        }
        scanner.close();
    }
}

</source>
</class>

<class classid="10" nclones="46" nlines="52" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student1/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1785">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student17/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1816">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student2/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1828">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student37/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1915">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student29/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1867">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student10/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1793">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student34/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1900">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student36/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1909">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student45/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1949">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student13/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1800">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student14/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1804">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student11/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1794">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student3/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1873">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student16/exercise1/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1813">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student51/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1998">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student7/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2025">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student28/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1862">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student23/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1843">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student50/exercise1/BeveragesP.java" startline="1" endline="54" pcid="1988">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student5/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1984">
import java.util.Scanner;

class Beverages {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		System.out.print("Please enter the selected menu id:");
		int menu = scanner.nextInt();

		System.out.print("Please enter whether the client is an adult: (true/false)");
		boolean adult = scanner.nextBoolean();

		scanner.close();

		if ((menu < 1) || (menu > 5)) {
			System.out.println("The restaurant does not have such a menu!");
		} else {
			System.out.print("The restaurant suggests: ");
		}

		if (menu == 1) {
			if (adult) {
				System.out.println("Red wine");
			} else {
				System.out.println("Cola");
			}
		} else if ((menu <= 2) && (menu >= 2)) {
			if (adult) {
				System.out.println("Red wine");
			} else {
				System.out.println("Cola");
			}
		}

		if (menu == 3) {
			if (adult) {
				System.out.println("White wine");
			} else {
				System.out.println("Lemonade");
			}
		} else if (menu + 1 == 5) {
			if (!adult) {
				System.out.println("Still Water");
			} else {
				System.out.println("Port wine");
			}
		}

		if (5 == menu) {
			System.out.println("The restaurant suggests: Sparkling Water");
		}
	}

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student46/ex1/BeveragesP.java" startline="1" endline="55" pcid="1951">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student20/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1831">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student39/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1924">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student35/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1905">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student12/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1795">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student31/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1881">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student15/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1808">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student40/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1932">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student49/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1980">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student6/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2021">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student33/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1895">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student21/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1833">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student24/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1847">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student52/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2004">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student44/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1945">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student48/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1971">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student54/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2017">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student41/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1935">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student25/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1849">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student46/exercise1/BeveragesP.java" startline="1" endline="50" pcid="1961">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();
        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();
        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }
        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }
        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }
        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student53/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2012">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student47/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1966">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student32/exercise1/Exercise1/Exercise1/Exercise1/BeveragesP.java" startline="1" endline="55" pcid="1891">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student22/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1838">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student8/exercise1/BeveragesP.java" startline="1" endline="55" pcid="2026">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student42/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1937">
import java.util.Scanner;

class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
</class>

<class classid="11" nclones="2" nlines="31" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student14/Exercise3/PalindromeCaseInsensitiveP.java" startline="1" endline="35" pcid="1805">
import java.util.Scanner;

public class PalindromeCaseInsensitive {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = 0;
        String currentLine = "B";
        char[] myArray;
        myArray = new char[50];

        while (currentLine.charAt(0) != '0') {
            System.out.print("Please enter a character :");
            currentLine = scanner.nextLine();
            currentLine = currentLine.toUpperCase();
            myArray[count] = currentLine.charAt(0);
            count++;
        }
        count--;
        scanner.close();
        Boolean isPalindrome = true;
        for (int i = 0; i < count / 2; i++) {
            if (myArray[i] != myArray[count - 1 - i]) {
                isPalindrome = false;
            }
        }
        if (isPalindrome) {
            System.out.println("The word is a palindrome");

        } else {
            System.out.println("The word is not a palindrome");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student46/exercise3/PalindromeCaseInsensitiveP.java" startline="1" endline="35" pcid="1962">
import java.util.Scanner;

public class PalindromeCaseInsensitive {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = 0;
        String currentLine = "B";
        char[] myArray;
        myArray = new char[50];

        while (currentLine.charAt(0) != '0') {
            System.out.print("Please enter a character :");
            currentLine = scanner.nextLine();
            currentLine = currentLine.toUpperCase();
            myArray[count] = currentLine.charAt(0);
            count++;
        }
        count--;
        scanner.close();
        Boolean isPalindrome = true;
        for (int i = 0; i < count / 2; i++) {
            if (myArray[i] != myArray[count - 1 - i]) {
                isPalindrome = false;
            }
        }
        if (isPalindrome) {
            System.out.println("The word is a palindrome");

        } else {
            System.out.println("The word is not a palindrome");
        }
    }

}

</source>
</class>

<class classid="12" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student14/Exercise3/PalindromeP.java" startline="1" endline="32" pcid="1806">
import java.util.Scanner;

public class Palindrome {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = 0;
        String currentChar = "B";
        char[] myArray;
        myArray = new char[50];

        while (currentChar.charAt(0) != '0') {
            System.out.print("Please enter a character :");
            currentChar = scanner.nextLine();
            myArray[count] = currentChar.charAt(0);
            count++;
        }
        count--;
        scanner.close();
        Boolean isPalindrome = true;
        for (int i = 0; i < count / 2; i++) {
            if (myArray[i] != myArray[count - 1 - i]) {
                isPalindrome = false;
            }
        }
        if (isPalindrome) {
            System.out.println("The word is a palindrome");
        } else {
            System.out.println("The word is not a palindrome");
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student46/exercise3/PalindromeP.java" startline="1" endline="32" pcid="1963">
import java.util.Scanner;

public class Palindrome {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = 0;
        String currentChar = "B";
        char[] myArray;
        myArray = new char[50];

        while (currentChar.charAt(0) != '0') {
            System.out.print("Please enter a character :");
            currentChar = scanner.nextLine();
            myArray[count] = currentChar.charAt(0);
            count++;
        }
        count--;
        scanner.close();
        Boolean isPalindrome = true;
        for (int i = 0; i < count / 2; i++) {
            if (myArray[i] != myArray[count - 1 - i]) {
                isPalindrome = false;
            }
        }
        if (isPalindrome) {
            System.out.println("The word is a palindrome");
        } else {
            System.out.println("The word is not a palindrome");
        }
    }
}

</source>
</class>

<class classid="13" nclones="2" nlines="117" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student14/Exersice5/TicTacToe3X3P.java" startline="1" endline="120" pcid="1807">
import java.util.Scanner;

public class TicTacToe3X3 {
    public static void main(String[] args) {
        char[][] board = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = '-';
            }
        }
        Scanner scanner = new Scanner(System.in);

        char currentPlayer = 'o';
        int round;
        for (round = 1; round <= 9; round++) {
            System.out.println(round);
            showBoard(board);
            System.out.println("Current player is : " + currentPlayer);
            Boolean inputIsOk;
            int currentRow, currentColumn;
            do {
                inputIsOk = true;
                System.out.println("Give me a row :");
                currentRow = scanner.nextInt();
                if ((currentRow < 0) || (currentRow > 2)) {
                    inputIsOk = false;
                }
                System.out.println("Give me a column :");
                currentColumn = scanner.nextInt();
                if ((currentColumn < 0) || (currentColumn > 2)) {
                    inputIsOk = false;
                }
                if (inputIsOk) {
                    if (board[currentRow][currentColumn] != '-') {
                        inputIsOk = false;
                    }
                }
                if (!inputIsOk) {
                    System.out.println("Error...!!!\nselect different column!!");
                }
            } while (!inputIsOk);
            board[currentRow][currentColumn] = currentPlayer;
            char boardVerification = verifyBoard(board);
            if (boardVerification != '-') {
                showBoard(board);
                System.out.println("Game over... Player " + boardVerification + " has won!");
                round = 11;
            }
            if (currentPlayer == 'o') {
                currentPlayer = 'x';
            } else {
                currentPlayer = 'o';
            }
        }
        scanner.close();
        if (round == 10) {
            System.out.println("This game is draw!!");
        }
    }

    public static void showBoard(char[][] args) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(args[i][j]);
            }
            System.out.println("\n");
        }
    }

    public static char verifyBoard(char[][] args) {
        for (int i = 0; i < 3; i++) {
            int num_ORow = 0, num_XRow = 0;
            int num_OColumn = 0, num_XColumn = 0;
            for (int j = 0; j < 3; j++) {
                if (args[i][j] == 'o') {
                    num_ORow++;
                }
                if (args[j][i] == 'o') {
                    num_OColumn++;
                }
                if (args[j][i] == 'x') {
                    num_XColumn++;
                }
                if (args[i][j] == 'x') {
                    num_XRow++;
                }
            }
            if ((num_ORow == 3) || (num_OColumn == 3)) {
                return 'o';
            }
            if ((num_XRow == 3) || (num_XColumn == 3)) {
                return 'x';
            }
        }
        int firstDiagonalO = 0, firstDiagonalX = 0;
        int secondDiagonalO = 0, secondDiagonalX = 0;
        for (int i = 0; i < 3; i++) {
            if (args[i][2 - i] == 'o') {
                secondDiagonalO++;
            }
            if (args[i][2 - i] == 'x') {
                secondDiagonalX++;
            }
            if (args[i][i] == 'o') {
                firstDiagonalO++;
            }
            if (args[i][i] == 'x') {
                firstDiagonalX++;
            }
        }
        if ((firstDiagonalO == 3) || (secondDiagonalO == 3)) {
            return 'o';
        }
        if ((firstDiagonalX == 3) || (secondDiagonalX == 3)) {
            return 'x';
        }
        return '-';
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student46/exercise5/TicTacToe3X3P.java" startline="1" endline="120" pcid="1964">
import java.util.Scanner;

public class TicTacToe3X3 {
    public static void main(String[] args) {
        char[][] board = new char[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = '-';
            }
        }
        Scanner scanner = new Scanner(System.in);

        char currentPlayer = 'o';
        int round;
        for (round = 1; round <= 9; round++) {
            System.out.println(round);
            showBoard(board);
            System.out.println("Current player is : " + currentPlayer);
            Boolean inputIsOk;
            int currentRow, currentColumn;
            do {
                inputIsOk = true;
                System.out.println("Give me a row :");
                currentRow = scanner.nextInt();
                if ((currentRow < 0) || (currentRow > 2)) {
                    inputIsOk = false;
                }
                System.out.println("Give me a column :");
                currentColumn = scanner.nextInt();
                if ((currentColumn < 0) || (currentColumn > 2)) {
                    inputIsOk = false;
                }
                if (inputIsOk) {
                    if (board[currentRow][currentColumn] != '-') {
                        inputIsOk = false;
                    }
                }
                if (!inputIsOk) {
                    System.out.println("Error...!!!\nselect different column!!");
                }
            } while (!inputIsOk);
            board[currentRow][currentColumn] = currentPlayer;
            char boardVerification = verifyBoard(board);
            if (boardVerification != '-') {
                showBoard(board);
                System.out.println("Game over... Player " + boardVerification + " has won!");
                round = 11;
            }
            if (currentPlayer == 'o') {
                currentPlayer = 'x';
            } else {
                currentPlayer = 'o';
            }
        }
        scanner.close();
        if (round == 10) {
            System.out.println("This game is draw!!");
        }
    }

    public static void showBoard(char[][] args) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(args[i][j]);
            }
            System.out.println("\n");
        }
    }

    public static char verifyBoard(char[][] args) {
        for (int i = 0; i < 3; i++) {
            int num_ORow = 0, num_XRow = 0;
            int num_OColumn = 0, num_XColumn = 0;
            for (int j = 0; j < 3; j++) {
                if (args[i][j] == 'o') {
                    num_ORow++;
                }
                if (args[j][i] == 'o') {
                    num_OColumn++;
                }
                if (args[j][i] == 'x') {
                    num_XColumn++;
                }
                if (args[i][j] == 'x') {
                    num_XRow++;
                }
            }
            if ((num_ORow == 3) || (num_OColumn == 3)) {
                return 'o';
            }
            if ((num_XRow == 3) || (num_XColumn == 3)) {
                return 'x';
            }
        }
        int firstDiagonalO = 0, firstDiagonalX = 0;
        int secondDiagonalO = 0, secondDiagonalX = 0;
        for (int i = 0; i < 3; i++) {
            if (args[i][2 - i] == 'o') {
                secondDiagonalO++;
            }
            if (args[i][2 - i] == 'x') {
                secondDiagonalX++;
            }
            if (args[i][i] == 'o') {
                firstDiagonalO++;
            }
            if (args[i][i] == 'x') {
                firstDiagonalX++;
            }
        }
        if ((firstDiagonalO == 3) || (secondDiagonalO == 3)) {
            return 'o';
        }
        if ((firstDiagonalX == 3) || (secondDiagonalX == 3)) {
            return 'x';
        }
        return '-';
    }
}

</source>
</class>

<class classid="14" nclones="2" nlines="95" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student18/ex5/TicTacToeP.java" startline="1" endline="101" pcid="1822">
import java.util.Scanner;

class TicTacToe {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[][] array = new String[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                array[i][j] = "Empty";
            }
        }
        System.out.println("\n---Game Board at start---\n");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                switch (array[i][j]) {
                case "Circle":
                    System.out.print("\t O |");
                    break;
                case "Cross":
                    System.out.print("\t X |");
                    break;
                default:
                    System.out.print("\t  |");
                }
            }
            System.out.println("\n\t-----------------------");
        }
        int rounds = 1;
        boolean finished = false;
        String player = "Circle";
        while (rounds <= 9 && !finished) {
            System.out.println("Player '" + player + "' it is your turn!");
            boolean valid = false;
            int x = -1;
            int y = -1;
            while (!valid) {
                System.out.println("Please type in your choice for X: ");
                x = scanner.nextInt();
                System.out.println("Please type in your choice for Y: ");
                y = scanner.nextInt();
                if (array[x][y] == "Empty") {
                    array[x][y] = player;
                    valid = true;
                }
                else {
                    System.out.println("Wrong option, please enter somehting else!");
                }
            }
            System.out.println("\n---Game Board after round " + rounds + " ---\n");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    switch (array[i][j]) {
                    case "Circle":
                        System.out.print("\t O |");
                        break;

                    case "Cross":
                        System.out.print("\t X |");
                        break;

                    default:
                        System.out.print("\t  |");
                    }
                }
                System.out.println("\n\t----------------------");
            }
            int checkerHorizontal = 0;
            int checkerVertical = 0;
            int checkerDiagonal1 = 0;
            int checkerDiagonal2 = 0;
            for (int i = 0; i < 3; i++) {
                if (array[i][y] == player) {
                    checkerVertical++;
                }
                if (array[x][i] == player) {
                    checkerHorizontal++;
                }
                for (int j = 0; j < 3; j++) {

                    if (i == j && array[i][j] == player) {
                        checkerDiagonal1++;
                        if (i == 1 && j == 1 && array[i][j] == player) {
                            if (array[0][2] == player && array[2][0] == player) {
                                checkerDiagonal2 = 3;
                            }
                        }
                    }
                }
            }
            if (checkerHorizontal == 3 || checkerVertical == 3 || checkerDiagonal1 == 3 || checkerDiagonal2 == 3) {
                finished = true;
                System.out.println("The winner is Player '" + player + "'!");
            }
            rounds++;
            player = rounds % 2 == 0 ? "Cross" : "Circle";
        }
        scanner.close();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student18/ex7/TicTacToeP.java" startline="1" endline="101" pcid="1823">
import java.util.Scanner;

class TicTacToe {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[][] array = new String[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                array[i][j] = "Empty";
            }
        }
        System.out.println("\n---Game Board at start---\n");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                switch (array[i][j]) {
                case "Circle":
                    System.out.print("\t O |");
                    break;
                case "Cross":
                    System.out.print("\t X |");
                    break;
                default:
                    System.out.print("\t  |");
                }
            }
            System.out.println("\n\t-----------------------");
        }
        int rounds = 1;
        boolean finished = false;
        String player = "Circle";
        while (rounds <= 9 && !finished) {
            System.out.println("Player '" + player + "' it is your turn!");
            boolean valid = false;
            int x = -1;
            int y = -1;
            while (!valid) {
                System.out.println("Please type in your choice for X: ");
                x = scanner.nextInt();
                System.out.println("Please type in your choice for Y: ");
                y = scanner.nextInt();
                if (array[x][y] == "Empty") {
                    array[x][y] = player;
                    valid = true;
                }
                else {
                    System.out.println("Wrong option, please enter somehting else!");
                }
            }
            System.out.println("\n---Game Board after round " + rounds + " ---\n");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    switch (array[i][j]) {
                    case "Circle":
                        System.out.print("\t O |");
                        break;

                    case "Cross":
                        System.out.print("\t X |");
                        break;

                    default:
                        System.out.print("\t  |");
                    }
                }
                System.out.println("\n\t----------------------");
            }
            int checkerHorizontal = 0;
            int checkerVertical = 0;
            int checkerDiagonal1 = 0;
            int checkerDiagonal2 = 0;
            for (int i = 0; i < 3; i++) {
                if (array[i][y] == player) {
                    checkerVertical++;
                }
                if (array[x][i] == player) {
                    checkerHorizontal++;
                }
                for (int j = 0; j < 3; j++) {

                    if (i == j && array[i][j] == player) {
                        checkerDiagonal1++;
                        if (i == 1 && j == 1 && array[i][j] == player) {
                            if (array[0][2] == player && array[2][0] == player) {
                                checkerDiagonal2 = 3;
                            }
                        }
                    }
                }
            }
            if (checkerHorizontal == 3 || checkerVertical == 3 || checkerDiagonal1 == 3 || checkerDiagonal2 == 3) {
                finished = true;
                System.out.println("The winner is Player '" + player + "'!");
            }
            rounds++;
            player = rounds % 2 == 0 ? "Cross" : "Circle";
        }
        scanner.close();
    }
}

</source>
</class>

<class classid="15" nclones="2" nlines="52" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student19/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1826">
import java.util.Scanner;

public class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab4-submissions/student27/exercise1/BeveragesP.java" startline="1" endline="55" pcid="1858">
import java.util.Scanner;

public class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
</class>

<class classid="16" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student20/exercise2/FlightP.java" startline="1" endline="31" pcid="2080">
public class Flight {
    String number;
    Airport origin, destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }
    public void setNumber(String number) {
        this.number = number;
    }
    public Airport getOrigin() {
        return origin;
    }
    public void setOrigin(Airport origin) {
        this.origin = origin;
    }
    public Airport getDestination() {
        return destination;
    }
    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student9/lab6/exercise2/FlightP.java" startline="1" endline="29" pcid="2698">
public class Flight {
    String number;
    Airport origin,destination;
    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }
    public String getNumber() {
        return number;
    }
    public void setNumber(String number) {
        this.number = number;
    }
    public Airport getOrigin() {
        return origin;
    }
    public void setOrigin(Airport origin) {
        this.origin = origin;
    }
    public Airport getDestination() {
        return destination;
    }
    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
</class>

<class classid="17" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student20/exercise2/PassengerP.java" startline="1" endline="14" pcid="2081">
public class Passenger extends Person{
    int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student38/Exercise2/PassengerP.java" startline="1" endline="16" pcid="2525">
public class Passenger extends Person {

    int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber=loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {

        return loyaltyCardNumber;
    }

}

</source>
</class>

<class classid="18" nclones="3" nlines="13" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student20/exercise2/PilotP.java" startline="1" endline="19" pcid="2083">
public class Pilot extends Person {

    String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/UML/PilotP.java" startline="1" endline="19" pcid="2625">
public class Pilot extends Person{

    String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/implementation/PilotP.java" startline="1" endline="19" pcid="2619">
public class Pilot extends Person{

    String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
</class>

<class classid="19" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student23/exercise3/PersonP.java" startline="1" endline="14" pcid="2096">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId(){return this.id;}
    public String getName(){return this.name;}

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student47/exercise3/PersonP.java" startline="1" endline="19" pcid="2252">
public class Person {
    private int id;
    private String name;

    public Person(int id,String name){
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }

}

</source>
</class>

<class classid="20" nclones="2" nlines="25" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student31/exercise1/QuadraticP.java" startline="1" endline="31" pcid="2152">
public class Quadratic {
    private double disc;
    private double a,b,c;

    public double getA(double a) { return this.a; }

    public double getB(double b) {
        return this.b;
    }

    public double getC(double c) {
        return this.c;
    }

    public double getDiscriminant(double a,double b,double c){
        disc = Math.pow(b,2) - (4*a*c);
        return disc;
    }

    public double getRoot1(double a,double b,double c){
        double root1 = (-b+Math.sqrt(Math.pow(b,2)-(4*a*c))) / (2*a);

        return root1;
    }

    public double getRoot2(double a,double b,double c){
        double root2 = (-b-Math.sqrt(Math.pow(b,2)-(4*a*c))) / (2*a);
        return root2;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student35/Exercise1/QuadraticP.java" startline="1" endline="33" pcid="2172">
public class Quadratic {
    private double disc;
    private double a, b, c;

    public double getA(double a) {
        return this.a;
    }

    public double getB(double b) {
        return this.b;
    }

    public double getC(double c) {
        return this.c;
    }

    public double getDiscriminant(double a, double b, double c) {
        disc = Math.pow(b, 2) - (4 * a * c);
        return disc;
    }

    public double getRoot1(double a, double b, double c) {
        double root1 = (-b + Math.sqrt(Math.pow(b, 2) - (4 * a * c))) / (2 * a);

        return root1;
    }

    public double getRoot2(double a, double b, double c) {
        double root2 = (-b - Math.sqrt(Math.pow(b, 2) - (4 * a * c))) / (2 * a);
        return root2;
    }
}

</source>
</class>

<class classid="21" nclones="4" nlines="19" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student31/exercise2/ColorsP.java" startline="1" endline="21" pcid="2153">
public class Colors {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    public static final String ANSI_RED_BACKGROUND = "\u001B[41m";
    public static final String ANSI_GREEN_BACKGROUND = "\u001B[42m";
    public static final String ANSI_YELLOW_BACKGROUND = "\u001B[43m";
    public static final String ANSI_BLUE_BACKGROUND = "\u001B[44m";
    public static final String ANSI_PURPLE_BACKGROUND = "\u001B[45m";
    public static final String ANSI_CYAN_BACKGROUND = "\u001B[46m";
    public static final String ANSI_WHITE_BACKGROUND = "\u001B[47m";
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student3/exercise2/ColorsP.java" startline="1" endline="21" pcid="3354">
public class Colors {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    public static final String ANSI_RED_BACKGROUND = "\u001B[41m";
    public static final String ANSI_GREEN_BACKGROUND = "\u001B[42m";
    public static final String ANSI_YELLOW_BACKGROUND = "\u001B[43m";
    public static final String ANSI_BLUE_BACKGROUND = "\u001B[44m";
    public static final String ANSI_PURPLE_BACKGROUND = "\u001B[45m";
    public static final String ANSI_CYAN_BACKGROUND = "\u001B[46m";
    public static final String ANSI_WHITE_BACKGROUND = "\u001B[47m";
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student3/exercise1/ColorsP.java" startline="1" endline="21" pcid="3349">
public class Colors {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    public static final String ANSI_RED_BACKGROUND = "\u001B[41m";
    public static final String ANSI_GREEN_BACKGROUND = "\u001B[42m";
    public static final String ANSI_YELLOW_BACKGROUND = "\u001B[43m";
    public static final String ANSI_BLUE_BACKGROUND = "\u001B[44m";
    public static final String ANSI_PURPLE_BACKGROUND = "\u001B[45m";
    public static final String ANSI_CYAN_BACKGROUND = "\u001B[46m";
    public static final String ANSI_WHITE_BACKGROUND = "\u001B[47m";
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student3/exercise4/ColorsP.java" startline="1" endline="21" pcid="3358">
public class Colors {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";

    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    public static final String ANSI_RED_BACKGROUND = "\u001B[41m";
    public static final String ANSI_GREEN_BACKGROUND = "\u001B[42m";
    public static final String ANSI_YELLOW_BACKGROUND = "\u001B[43m";
    public static final String ANSI_BLUE_BACKGROUND = "\u001B[44m";
    public static final String ANSI_PURPLE_BACKGROUND = "\u001B[45m";
    public static final String ANSI_CYAN_BACKGROUND = "\u001B[46m";
    public static final String ANSI_WHITE_BACKGROUND = "\u001B[47m";
}

</source>
</class>

<class classid="22" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab5-submissions/student49/Exercise3/PersonP.java" startline="1" endline="18" pcid="2264">
public class Person {
    private String id, name;

    Person(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise2/PersonP.java" startline="1" endline="18" pcid="3082">
public class Person {
    private String id, name;

    Person(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }

}

</source>
</class>

<class classid="23" nclones="9" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise1/PavilionP.java" startline="1" endline="18" pcid="2304">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion (String name, double price){
        this.name = name;
        this.price = price;

    }
    public String getName() {
        return name;
    }
    public double getPrice() {
        return price;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise1/PavilionP.java" startline="1" endline="15" pcid="2611">
public class Pavilion {

    private String name;
    private double price;

    public Pavilion(String name, double price)
    {
        this.name = name;
        this.price = price;
    }

    public String getName(){return name;}
    public double getPrice(){return price;}
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student11/Exercises/exercise1/PavilionP.java" startline="1" endline="17" pcid="2324">
public class Pavilion {
    private String name;
    private double price;
    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }
    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student51/exercise1/PavilionP.java" startline="1" endline="18" pcid="2664">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student27/exercise1/PavilionP.java" startline="1" endline="18" pcid="2452">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student17/ex1/PavilionP.java" startline="1" endline="20" pcid="2385">
public class Pavilion{

    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student9/lab6/exercise1/PavilionP.java" startline="1" endline="19" pcid="2695">
public class Pavilion {

    private String name;
    private double price;

    public Pavilion (String name, double price){
        this.name=name;
        this.price=price;
    }
     public String getName() {
         return name;
     }

     public double getPrice() {
         return price;
     }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student16/Exercise1/PavilionP.java" startline="1" endline="20" pcid="2375">
public class Pavilion {

    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/ex1/PavilionP.java" startline="1" endline="18" pcid="2575">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
</class>

<class classid="24" nclones="9" nlines="19" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise2/AirportP.java" startline="1" endline="21" pcid="2307">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport (String city, String country, String iataCode){
        this.city = city;
        this.country = country;
        this.iataCode= iataCode;
    }
    public String getCity() {
        return city;
    }
    public String getCountry() {
        return country;
    }
    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise2/AirportP.java" startline="1" endline="27" pcid="2358">
public class Airport {

    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country , String iataCode) {

        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise2/AirportP.java" startline="1" endline="25" pcid="2593">
public class Airport {

   private String city;
   private String country;
   private String iataCode;

   public Airport(String city, String country, String iataCode) {
      this.city = city;
      this.country = country;
      this.iataCode = iataCode;
   }

   public String getCity() {
      return city;
   }

   public String getCountry() {
      return country;
   }

   public String getIataCode() {
      return iataCode;
   }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student6/exercise2/AirportP.java" startline="1" endline="25" pcid="2687">
public class Airport {
   private String city;
   private String country;
   private String iataCode;

   public Airport(String city, String country, String iataCode) {
      this.city = city;
      this.country = country;
      this.iataCode = iataCode;
   }

   public String getCity() {
      return city;
   }

   public String getCountry() {
      return country;
   }

   public String getIataCode() {
      return iataCode;
   }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise2/AirportP.java" startline="1" endline="26" pcid="2347">
public class Airport {

   private String city;
   private String country;
   private String iataCode;

   public Airport(String city, String country, String iataCode) {
      this.city = city;
      this.country = country;
      this.iataCode = iataCode;
   }

   public String getCity() {
      return city;
   }

   public String getCountry() {
      return country;
   }

   public String getIataCode() {
      return iataCode;
   }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student11/Exercises/exercise2/AirportP.java" startline="1" endline="25" pcid="2326">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student3/exercise2/AirportP.java" startline="1" endline="23" pcid="2479">
public class Airport {
    private String city;
    private String country;
    private String iataCode;
    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }
    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise2/AirportP.java" startline="1" endline="25" pcid="2509">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/UML/AirportP.java" startline="1" endline="26" pcid="2620">
public class Airport {

    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode)
    {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
</class>

<class classid="25" nclones="6" nlines="28" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise2/FlightP.java" startline="1" endline="37" pcid="2308">
public class Flight {
    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise2/FlightP.java" startline="1" endline="39" pcid="2359">
public class Flight {

    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {

        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student20/Exercise2/FlightP.java" startline="1" endline="38" pcid="2398">
public class Flight {

    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student32/Exercise2/FlightP.java" startline="1" endline="32" pcid="2487">
public class Flight {

    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }
    public String getNumber() {
        return number;
    }
    public void setNumber(String number) {
        this.number = number;
    }
    public Airport getOrigin() {
        return origin;
    }
    public void setOrigin(Airport origin) {
        this.origin = origin;
    }
    public Airport getDestination() {
        return destination;
    }
    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/UML/FlightP.java" startline="1" endline="38" pcid="2621">
public class Flight {

    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise2/FlightP.java" startline="1" endline="37" pcid="2510">
public class Flight {
    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }

}

</source>
</class>

<class classid="26" nclones="15" nlines="10" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise2/PassengerP.java" startline="1" endline="11" pcid="2310">
public class Passenger extends Person {
    private int loyaltyCardNumber;
    public Passenger (String name, String passportNumber, int loyaltyCardNumber){
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }
    public int getLoyaltyCardNumber(){
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/implementation/PassengerP.java" startline="1" endline="15" pcid="2617">
public class Passenger extends Person{
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber)
    {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber()
    {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student47/exercise2/PassengerP.java" startline="1" endline="15" pcid="2633">
public class Passenger extends Person {

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student29/exercise2/PassengerP.java" startline="1" endline="15" pcid="2468">
public class Passenger extends Person {

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student25/exercise2/PassengerP.java" startline="1" endline="13" pcid="2437">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student3/exercise2/PassengerP.java" startline="1" endline="14" pcid="2481">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise2/PassengerP.java" startline="1" endline="15" pcid="2360">
public class Passenger extends Person{

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student4/Exercise2/PassengerP.java" startline="1" endline="15" pcid="2546">
public class Passenger extends Person {

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber=loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student23/exercise2/PassengerP.java" startline="1" endline="13" pcid="2418">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise2/PassengerP.java" startline="1" endline="13" pcid="2448">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise2/PassengerP.java" startline="1" endline="14" pcid="2511">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise2/PassengerP.java" startline="1" endline="15" pcid="2597">
public class Passenger extends Person {

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {

        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise2/PassengerP.java" startline="1" endline="14" pcid="2351">
public class Passenger extends Person {

    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student6/exercise2/PassengerP.java" startline="1" endline="13" pcid="2691">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/UML/PassengerP.java" startline="1" endline="15" pcid="2623">
public class Passenger extends Person{
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber)
    {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber()
    {
        return loyaltyCardNumber;
    }
}

</source>
</class>

<class classid="27" nclones="12" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise2/PersonP.java" startline="1" endline="24" pcid="2311">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber){
        this.name=name;
        this.passportNumber=passportNumber;

    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student23/exercise2/PersonP.java" startline="1" endline="23" pcid="2419">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/implementation/PersonP.java" startline="1" endline="23" pcid="2618">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise2/PersonP.java" startline="1" endline="24" pcid="2361">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student6/exercise2/PersonP.java" startline="1" endline="23" pcid="2692">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise2/PersonP.java" startline="1" endline="23" pcid="2598">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student3/exercise2/PersonP.java" startline="1" endline="20" pcid="2482">
public class  Person {
    private String name;
    private String passportNumber;
    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }
    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }
    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student20/Exercise2/PersonP.java" startline="1" endline="23" pcid="2401">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student46/lab6/exercise2/UML/PersonP.java" startline="1" endline="23" pcid="2624">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student29/exercise2/PersonP.java" startline="1" endline="24" pcid="2469">
public class Person {

    private String name;

    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise2/PersonP.java" startline="1" endline="24" pcid="2352">
public class Person {

    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise2/PersonP.java" startline="1" endline="23" pcid="2512">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
</class>

<class classid="28" nclones="13" nlines="13" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student1/exercise2/PilotP.java" startline="1" endline="15" pcid="2312">
public class Pilot extends Person {
    private String airline;
    public Pilot (String name, String passportNumber, String airline){
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline(){
        return airline;
    }
    public void setAirline(String airline){
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student20/Exercise2/PilotP.java" startline="1" endline="19" pcid="2402">
public class Pilot extends Person {

private String airline;

    public Pilot(String name, String passportNumber, String airline) {
    super(name, passportNumber);
    this.airline = airline;
}

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student4/Exercise2/PilotP.java" startline="1" endline="19" pcid="2548">
public class Pilot extends Person {

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline=airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise2/PilotP.java" startline="1" endline="19" pcid="2362">
public class Pilot extends Person {

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise2/PilotP.java" startline="1" endline="19" pcid="2353">
public class Pilot extends Person {

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise2/PilotP.java" startline="1" endline="17" pcid="2450">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise2/PilotP.java" startline="1" endline="18" pcid="2513">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student3/exercise2/PilotP.java" startline="1" endline="18" pcid="2483">
public class Pilot extends Person {
        private String airline ;

        public Pilot(String name, String passportNumber, String airline) {
            super(name, passportNumber);
            this.airline = airline;
        }

        public String getAirline() {
            return airline;
        }

        public void setAirline(String airline) {
            this.airline = airline;
        }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student29/exercise2/PilotP.java" startline="1" endline="19" pcid="2470">
public class Pilot extends Person {

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student24/exercise2/PilotP.java" startline="1" endline="18" pcid="2429">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline){
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student6/exercise2/PilotP.java" startline="1" endline="18" pcid="2693">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student47/exercise2/PilotP.java" startline="1" endline="19" pcid="2635">
public class Pilot extends Person{

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline=airline;
    }

    public String getAirline(){
        return airline;
    }

    public void setAirline(String airline){
        this.airline=airline;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise2/PilotP.java" startline="1" endline="18" pcid="2599">
public class Pilot extends Person {

    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
</class>

<class classid="29" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise1/groupTicketP.java" startline="1" endline="30" pcid="2343">
public class groupTicket extends Ticket {
    private int n;

    public groupTicket(Pavilion[] sections, int numberOfVisitors) {
        super(sections);

        n = numberOfVisitors;
    }

    public double getTicketPrice() {
        double returnValue = 0;
        double oneTicket = super.getTicketPrice();
        returnValue = oneTicket * n;
        if (n >= 6 && n <= 12) {
            returnValue = returnValue * 0.7;

        }
        if (n > 12) {
            returnValue = returnValue * 0.6;
        }
        return returnValue;
    }

    public String toString() {
        String printedTicket = "** Group Ticket **\n";
        printedTicket += super.toString();
        return printedTicket;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise1/groupTicketP.java" startline="1" endline="28" pcid="2589">
public class groupTicket extends Ticket {
    private int n;

    public groupTicket(Pavilion[] sections, int numberOfVisitors) {
        super(sections);
        n = numberOfVisitors;
    }

    public double getTicketPrice() {
        double returnValue = 0;
        double oneTicket = super.getTicketPrice();
        returnValue = oneTicket * n;
        if (n >= 6 && n <= 12) {
            returnValue = returnValue * 0.7;
        }
        if (n > 12) {
            returnValue = returnValue * 0.6;
        }
        return returnValue;
    }

    public String toString() {
        String printedTicket = "** Group Ticket **\n";
        printedTicket += super.toString();
        return printedTicket;
    }
}

</source>
</class>

<class classid="30" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise1/PavilionP.java" startline="1" endline="19" pcid="2345">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public double getPrice() {
        return price;

    }

    public String toString() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise1/PavilionP.java" startline="1" endline="19" pcid="2591">
public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public double getPrice() {
        return price;

    }

    public String toString() {
        return name;
    }
}

</source>
</class>

<class classid="31" nclones="2" nlines="39" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise1/TicketP.java" startline="1" endline="44" pcid="2346">
import java.text.DecimalFormat;
import java.util.Date;
import java.util.UUID;

public class Ticket {
    private String ticketUid;
    private Date emissionDate;
    private Pavilion[] array;
    private static final DecimalFormat df = new DecimalFormat("0.00");

    public Ticket(Pavilion[] sections) {
        ticketUid = UUID.randomUUID().toString();
        emissionDate = new Date();
        this.array = sections;
    }

    public double getTicketPrice() {
        double returnValue = 0;

        for (int i = 0; i < array.length; i++) {
            if (i < 3) {
                returnValue += array[i].getPrice() * 1;
            } else {
                returnValue += array[i].getPrice() * 0.7;
            }
        }
        return returnValue;
    }

    public String toString() {
        String printedTicket = "";
        printedTicket += "Welcome to Luxemobourg History Museum\n";
        printedTicket += "Ticket ID: " + ticketUid + "\n";
        printedTicket += "Date : " + emissionDate + "\n";
        printedTicket += "You can vist : \n";
        for (int i = 0; i < array.length; i++) {
            printedTicket += array[i];
        }
        printedTicket += "\n";
        printedTicket += "Total cost is : " + df.format(getTicketPrice()) + "\n";
        return printedTicket;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise1/TicketP.java" startline="1" endline="44" pcid="2592">
import java.text.DecimalFormat;
import java.util.Date;
import java.util.UUID;

public class Ticket {
    private String ticketUid;
    private Date emissionDate;
    private Pavilion[] array;
    private static final DecimalFormat df = new DecimalFormat("0.00");

    public Ticket(Pavilion[] sections) {
        ticketUid = UUID.randomUUID().toString();
        emissionDate = new Date();
        this.array = sections;
    }

    public double getTicketPrice() {
        double returnValue = 0;

        for (int i = 0; i < array.length; i++) {
            if (i < 3) {
                returnValue += array[i].getPrice() * 1;
            } else {
                returnValue += array[i].getPrice() * 0.7;
            }
        }
        return returnValue;
    }

    public String toString() {
        String printedTicket = "";
        printedTicket += "Welcome to Luxemobourg History Museum\n";
        printedTicket += "Ticket ID: " + ticketUid + "\n";
        printedTicket += "Date : " + emissionDate + "\n";
        printedTicket += "You can vist : \n";
        for (int i = 0; i < array.length; i++) {
            printedTicket += array[i];
        }
        printedTicket += "\n";
        printedTicket += "Total cost is : " + df.format(getTicketPrice()) + "\n";
        return printedTicket;
    }
}

</source>
</class>

<class classid="32" nclones="3" nlines="28" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student13/Exercise2/FlightP.java" startline="1" endline="37" pcid="2348">
public class Flight {

    private String number;
    private Airport origin;
    Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/exercise2/FlightP.java" startline="1" endline="37" pcid="2594">
public class Flight {

    private String number;
    private Airport origin;
    Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student6/exercise2/FlightP.java" startline="1" endline="36" pcid="2688">
public class Flight {
    private String number;
    private Airport origin;
    Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
</class>

<class classid="33" nclones="3" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student14/exercise1/PavilionP.java" startline="1" endline="17" pcid="2356">
public class Pavilion {
    private String name;
    private double price;

    Pavilion(String name, double price) {

        this.name = name;
        this.price = price;
    }
    public String getName() {
        return name;
    }
    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student29/exercise1/PavilionP.java" startline="1" endline="21" pcid="2463">
public class Pavilion {

    private String name;

    private double price;

    Pavilion(String name, double price){
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student50/Exercise1/PavilionP.java" startline="1" endline="19" pcid="2647">
public class Pavilion
{ private String name;
 private double price;

Pavilion(String name, double price) {
    this.name=name;
    this.price = price;
}

public String getName() {
    return name;
}

public double getPrice() {
    return price;
}

}

</source>
</class>

<class classid="34" nclones="5" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student16/Exercise2/AirportP.java" startline="1" endline="26" pcid="2377">
public class Airport {

    private String city,
    country,
    iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise2/AirportP.java" startline="1" endline="22" pcid="2444">
public class Airport {
    private String city, country, iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student47/exercise2/AirportP.java" startline="1" endline="23" pcid="2630">
public class Airport {
    private String city,country,iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student24/exercise2/AirportP.java" startline="1" endline="23" pcid="2425">
public class Airport {
    private String city, country, iataCode;

    public Airport(String city, String country, String iataCode){
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student22/exercise2/AirportP.java" startline="1" endline="22" pcid="2407">
public class Airport {
    private String city, country, iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
</class>

<class classid="35" nclones="3" nlines="16" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student16/Exercise2/PersonP.java" startline="1" endline="24" pcid="2381">
public class Person {

    private String name,
    passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student24/exercise2/PersonP.java" startline="1" endline="22" pcid="2428">
public class Person {
    private String name, passportNumber;

    public Person(String name, String passportNumber){
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise2/PersonP.java" startline="1" endline="21" pcid="2449">
public class Person {
    private String name, passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
</class>

<class classid="36" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student22/exercise1/PavillonP.java" startline="1" endline="19" pcid="2405">
public class Pavillon{

    private String name;
    private double price;

    public Pavillon(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise1/PavillonP.java" startline="1" endline="18" pcid="2442">
public class Pavillon {
    private String name;
    private double price;

    public Pavillon(String name, double price){
        this.name = name;
        this.price = price;
    }

    public String getName(){
        return name;
    }

    public double getPrice(){
        return price;
    }
}

</source>
</class>

<class classid="37" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student24/exercise2/FlightP.java" startline="1" endline="34" pcid="2426">
public class Flight {
    private String number;
    private Airport origin, destination;

    public Flight(String number, Airport origin, Airport destination){
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student26/exercise2/FlightP.java" startline="1" endline="29" pcid="2445">
public class Flight {
    private String number;
    private Airport origin, destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }
    public String getNumber() {
        return number;
    }
    public void setNumber(String number) {
        this.number = number;
    }
    public Airport getOrigin() {
        return origin;
    }
    public void setOrigin(Airport origin) {
        this.origin = origin;
    }
    public Airport getDestination() {
        return destination;
    }
    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
</class>

<class classid="38" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise3/PageP.java" startline="1" endline="18" pcid="2515">
public class Page extends Profile {

    private int likeCounter = 0;

    public Page(String name) {
        super(name);
    }

    public int getLikeCounter() {
        return this.likeCounter;
    }

    public void like(User by) {
        this.likeCounter++;
        this.createPost(by + " likes " + this);
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/ex3/PageP.java" startline="1" endline="18" pcid="2586">
public class Page extends Profile {

    private int likeCounter = 0;

    public Page(String name) {
        super(name);
    }

    public int getLikeCounter() {
        return this.likeCounter;
    }

    public void like(User by) {
        this.likeCounter++;
        this.createPost(by + " likes " + this);
    }
}

</source>
</class>

<class classid="39" nclones="2" nlines="40" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student35/Exercise3/ProfileP.java" startline="1" endline="51" pcid="2516">
import java.util.UUID;

public abstract class Profile {

    private static final int TIMELINE_CAPACITY = 10;

    private String id;
    private String name;
    private String[] posts;

    public Profile(String name) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.posts = new String[TIMELINE_CAPACITY];
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void createPost(String text) {
        int i;
        for (i = 0; this.posts[i] != null; i++)
            ;

        if (i < TIMELINE_CAPACITY) {
            this.posts[i] = text;
        } else {
            System.err.println("Timeline is full!");
        }
    }

    public void showTimeline(User observer) {
        System.out.println("Timeline of " + this.name + ":");
        for (String post : this.posts) {
            if (post != null) {
                System.out.println("- " + post);
            }
        }
    }

    @Override
    public String toString() {
        return this.name;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab6-submissions/student43/ex3/ProfileP.java" startline="1" endline="51" pcid="2587">
import java.util.UUID;

public abstract class Profile {

    private static final int TIMELINE_CAPACITY = 10;

    private String id;
    private String name;
    private String[] posts;

    public Profile(String name) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.posts = new String[TIMELINE_CAPACITY];
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void createPost(String text) {
        int i;
        for (i = 0; this.posts[i] != null; i++)
            ;

        if (i < TIMELINE_CAPACITY) {
            this.posts[i] = text;
        } else {
            System.err.println("Timeline is full!");
        }
    }

    public void showTimeline(User observer) {
        System.out.println("Timeline of " + this.name + ":");
        for (String post : this.posts) {
            if (post != null) {
                System.out.println("- " + post);
            }
        }
    }

    @Override
    public String toString() {
        return this.name;
    }
}

</source>
</class>

<class classid="40" nclones="3" nlines="12" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student30/Exercise1/actionP.java" startline="1" endline="16" pcid="2923">
public class action {
    private int timeToExecute;

    public action(int timeToExecute) {
        this.timeToExecute = timeToExecute;
    }

    public int getTime() {
        return timeToExecute;
    }

    public void display() {
        System.out.println("We spent : " + timeToExecute + " seconds");
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student7/Exercise1/actionP.java" startline="1" endline="16" pcid="3137">
public class action {
    private int timeToExecute;

    public action(int timeToExecute) {
        this.timeToExecute = timeToExecute;
    }

    public int getTime() {
        return timeToExecute;
    }

    public void display() {
        System.out.println("We spent : " + timeToExecute + " seconds");
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student36/Exercise1/actionP.java" startline="1" endline="16" pcid="2946">
public class action {
    private int timeToExecute;

    public action(int timeToExecute) {
        this.timeToExecute = timeToExecute;
    }

    public int getTime() {
        return timeToExecute;
    }

    public void display() {
        System.out.println("We spent : " + timeToExecute + " seconds");
    }
}

</source>
</class>

<class classid="41" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student30/Exercise1/moveP.java" startline="1" endline="31" pcid="2925">
public class move extends action {
    private int direction;

    public move(int directionToMove) {
        super(10);
        this.direction = directionToMove;
    }

    public void display() {
        System.out.println("Move :");
        switch (direction) {
        case 0:
            System.out.println("Up");
            break;
        case 1:
            System.out.println("Down");
            break;
        case 2:
            System.out.println("Left");
            break;
        case 3:
            System.out.println("Right");
            break;
        default:
            System.out.println("Unknown direction!!");
            break;
        }
        super.display();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student36/Exercise1/moveP.java" startline="1" endline="33" pcid="2948">
public class move extends action {
    private int direction;

    public move(int directionToMove) {
        super(10);
        this.direction = directionToMove;
    }

    public void display() {
        System.out.println("Move :");
        switch (direction) {
        case 0:
            System.out.println("Up");
            break;
        case 1:
            System.out.println("Down");

            break;
        case 2:
            System.out.println("Left");
            break;
        case 3:
            System.out.println("Right");
            break;

        default:
            System.out.println("Unknown direction!!");
            break;
        }
        super.display();
    }
}

</source>
</class>

<class classid="42" nclones="3" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student30/Exercise1/takePicP.java" startline="1" endline="19" pcid="2928">
public class takePic extends action {
    private boolean highResolution;

    public takePic(boolean highResolution) {
        super(highResolution ? 60 : 40);
        this.highResolution = highResolution;
    }

    public void display() {
        System.out.println("We took a picture :");
        if (highResolution) {
            System.out.println("high Resolution");
        } else {
            System.out.println("Low resolution");
        }
        super.display();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student36/Exercise1/takePicP.java" startline="1" endline="19" pcid="2951">
public class takePic extends action {
    private boolean highResolution;

    public takePic(boolean highResolution) {
        super(highResolution ? 60 : 40);
        this.highResolution = highResolution;
    }

    public void display() {
        System.out.println("We took a picture :");
        if (highResolution) {
            System.out.println("high Resolution");
        } else {
            System.out.println("Low resolution");
        }
        super.display();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student7/Exercise1/takePicP.java" startline="1" endline="19" pcid="3142">
public class takePic extends action {
    private boolean highResolution;

    public takePic(boolean highResolution) {
        super(highResolution ? 60 : 40);
        this.highResolution = highResolution;
    }

    public void display() {
        System.out.println("We took a picture :");
        if (highResolution) {
            System.out.println("high Resolution");
        } else {
            System.out.println("Low resolution");
        }
        super.display();
    }
}

</source>
</class>

<class classid="43" nclones="2" nlines="38" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student36/Exercise4/personP.java" startline="1" endline="45" pcid="2954">
import java.time.Year;

public class person {
    private int year, month, date;
    private boolean studies, teaches;
    private String name;

    public person(String name, int year, int month, int date, boolean studies, boolean teaches) {
        this.name = name;
        this.year = year;
        this.month = month;
        this.date = date;
        this.studies = studies;
        this.teaches = teaches;
    }

    public boolean matchFilter(String filter) {
        switch (filter) {
        case "Lecturer":
            return teaches == true && studies == false;
        case "Student":
            return teaches == false && studies == true;
        case "TA":
            return teaches == true && studies == true;
        case "Junior":
            return 18 <= getAge() && getAge() < 28;
        case "Middle":
            return 28 <= getAge() && getAge() < 55;
        case "Senior":
            return 55 <= getAge();
        default:
            return true;
        }
    }

    public int getAge() {
        return Year.now().getValue() - year;
    }

    public void display() {
        System.out.printf("%s %d %d %d %s %s\n ", name, year, month, date, studies ? "yes" : "no",
                teaches ? "yes" : "no");
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student7/Exercise4/personP.java" startline="1" endline="45" pcid="3145">
import java.time.Year;

public class person {
    private int year, month, date;
    private boolean studies, teaches;
    private String name;

    public person(String name, int year, int month, int date, boolean studies, boolean teaches) {
        this.name = name;
        this.year = year;
        this.month = month;
        this.date = date;
        this.studies = studies;
        this.teaches = teaches;
    }

    public boolean matchFilter(String filter) {
        switch (filter) {
        case "Lecturer":
            return teaches == true && studies == false;
        case "Student":
            return teaches == false && studies == true;
        case "TA":
            return teaches == true && studies == true;
        case "Junior":
            return 18 <= getAge() && getAge() < 28;
        case "Middle":
            return 28 <= getAge() && getAge() < 55;
        case "Senior":
            return 55 <= getAge();
        default:
            return true;
        }
    }

    public int getAge() {
        return Year.now().getValue() - year;
    }

    public void display() {
        System.out.printf("%s %d %d %d %s %s\n ", name, year, month, date, studies ? "yes" : "no",
                teaches ? "yes" : "no");
    }
}

</source>
</class>

<class classid="44" nclones="2" nlines="16" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise1/ActionP.java" startline="1" endline="29" pcid="3069">
public abstract class Action {
    protected Robot robot;

    public Action(Robot robot) {
        this.robot = robot;
    }

    public abstract void goForward();

    public abstract void goLeft();

    public abstract void goRight();

    public abstract void goBack();

    public abstract void takePicHigh();

    public abstract void takePicLow();

    public abstract void pickRock();

    public abstract void exit();

    public abstract void printAction(String act, int time);

    public abstract void printSet();

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise1simple/ActionP.java" startline="1" endline="29" pcid="3075">
public abstract class Action {
    protected Robot robot;

    public Action(Robot robot) {
        this.robot = robot;
    }

    public abstract void goForward();

    public abstract void goLeft();

    public abstract void goRight();

    public abstract void goBack();

    public abstract void takePicHigh();

    public abstract void takePicLow();

    public abstract void pickRock();

    public abstract void exit();

    public abstract void printAction(String act, int time);

    public abstract void printSet();

}

</source>
</class>

<class classid="45" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise4a/DateP.java" startline="1" endline="28" pcid="3095">
public class Date {
    private int y, m, d;

    public Date(int y, int m, int d) {
        this.y = y;
        this.m = m;
        this.d = d;
    }

    public int getY() {
        return y;
    }

    public int getM() {
        return m;
    }

    public int getD() {
        return d;
    }

    @Override
    public String toString() {
        return "Date [d=" + d + ", m=" + m + ", y=" + y + "]";
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise4b/DateP.java" startline="1" endline="28" pcid="3105">
public class Date {
    private int y, m, d;

    public Date(int y, int m, int d) {
        this.y = y;
        this.m = m;
        this.d = d;
    }

    public int getY() {
        return y;
    }

    public int getM() {
        return m;
    }

    public int getD() {
        return d;
    }

    @Override
    public String toString() {
        return "Date [d=" + d + ", m=" + m + ", y=" + y + "]";
    }

}

</source>
</class>

<class classid="46" nclones="2" nlines="31" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise4a/PersonP.java" startline="1" endline="44" pcid="3100">
public class Person {

    private String name;
    private Date birthday;
    private Boolean studies, teaches;

    public Person(String name, Date birthday, Boolean studies, Boolean teaches) {
        this.name = name;
        this.birthday = birthday;
        this.studies = studies;
        this.teaches = teaches;
    }

    public int ageInYears(Date today) {
        if (today.getM() >= birthday.getM())
            if (today.getD() >= birthday.getD())
                return today.getY() - birthday.getY();
        return today.getY() - birthday.getY() - 1;

    }

    public String getName() {
        return name;
    }

    public Date getBirthday() {
        return birthday;
    }

    public Boolean getStudies() {
        return studies;
    }

    public Boolean getTeaches() {
        return teaches;
    }

    @Override
    public String toString() {
        return "Person " + name + " [birthday=" + birthday + ", studies=" + studies + ", teaches=" + teaches + "]";
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab7-submissions/student47/Exercise4b/PersonP.java" startline="1" endline="44" pcid="3108">
public class Person {

    private String name;
    private Date birthday;
    private Boolean studies, teaches;

    public Person(String name, Date birthday, Boolean studies, Boolean teaches) {
        this.name = name;
        this.birthday = birthday;
        this.studies = studies;
        this.teaches = teaches;
    }

    public int ageInYears(Date today) {
        if (today.getM() >= birthday.getM())
            if (today.getD() >= birthday.getD())
                return today.getY() - birthday.getY();
        return today.getY() - birthday.getY() - 1;

    }

    public String getName() {
        return name;
    }

    public Date getBirthday() {
        return birthday;
    }

    public Boolean getStudies() {
        return studies;
    }

    public Boolean getTeaches() {
        return teaches;
    }

    @Override
    public String toString() {
        return "Person " + name + " [birthday=" + birthday + ", studies=" + studies + ", teaches=" + teaches + "]";
    }

}

</source>
</class>

<class classid="47" nclones="4" nlines="18" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student10/Exercises/exercise2/LauncherP.java" startline="1" endline="22" pcid="3175">
public class Launcher {
    public static void main(String[] args) {
        Order o1= new Order("Coke", 0.80, 100);
        Order o2= new Order("KitKat", 0.70, 250);
        Order o3= new Order("OrangeJ", 0.72, 350);
        Order o4= new Order("Snickers", 1.60, 150);
        Order o5= new Order("Snickers", 1.60, 150);
        Order o6= new Order("Coke", 0.80, 100);

        OrderList w2= new OrderList("TheOne");

        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);

        w2.order();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student35/exercise2/LauncherP.java" startline="1" endline="22" pcid="3403">
public class Launcher {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("OrangeJ", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList w2 = new OrderList("TheOne");

        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);

        w2.order();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student43/exercise2/LauncherP.java" startline="1" endline="22" pcid="3462">
public class Launcher {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("OrangeJ", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList w2 = new OrderList("TheOne");

        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);

        w2.order();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student47/Exercise2/LauncherP.java" startline="1" endline="23" pcid="3497">
public class Launcher {
    public static void main(String[] args) {

        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("OrangeJ", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList w2 = new OrderList("TheOne");

        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);

        w2.order();
    }
}

</source>
</class>

<class classid="48" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student12/Exercise2/launcherP.java" startline="1" endline="16" pcid="3196">
public class launcher {
    public static void main(String[] args) {
        order order1 = new order("Coke", 1.05, 200);
        order order2 = new order("Fanta", 2.36, 10);
        order order3 = new order("Pepsi", 1.22, 60);
        order order4 = new order("7up", 1.55, 40);

        orderedList l = new orderedList("The one");
        l.addItem(order1);
        l.addItem(order2);
        l.addItem(order3);
        l.addItem(order4);
        l.order();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student7/Exercise2/launcherP.java" startline="1" endline="16" pcid="3517">
public class launcher {
    public static void main(String[] args) {
        order order1 = new order("Coke", 1.05, 200);
        order order2 = new order("Fanta", 2.36, 10);
        order order3 = new order("Pepsi", 1.22, 60);
        order order4 = new order("7up", 1.55, 40);

        orderedList l = new orderedList("The one");
        l.addItem(order1);
        l.addItem(order2);
        l.addItem(order3);
        l.addItem(order4);
        l.order();
    }
}

</source>
</class>

<class classid="49" nclones="2" nlines="36" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student12/Exercise2/orderP.java" startline="1" endline="42" pcid="3198">
public class order {
    private String orders;
    private double price;
    private int amount;

    public order(String orders, double price, int amount) {
        this.orders = orders;
        this.price = price;
        this.amount = amount;
    }

    public String toString() {
        String myString;
        myString = price + " " + orders + " = " + getTotalPrice() + "€";
        return myString;
    }

    public double getTotalPrice() {
        return price * amount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        order other = (order) obj;
        return orders == other.orders && price == other.price && amount == other.amount;
    }

    @Override
    public int hashCode() {
        return orders.hashCode() + Double.valueOf(getTotalPrice()).hashCode();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student7/Exercise2/orderP.java" startline="1" endline="42" pcid="3519">
public class order {
    private String orders;
    private double price;
    private int amount;

    public order(String orders, double price, int amount) {
        this.orders = orders;
        this.price = price;
        this.amount = amount;
    }

    public String toString() {
        String myString;
        myString = price + " " + orders + " = " + getTotalPrice() + "€";
        return myString;
    }

    public double getTotalPrice() {
        return price * amount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        order other = (order) obj;
        return orders == other.orders && price == other.price && amount == other.amount;
    }

    @Override
    public int hashCode() {
        return orders.hashCode() + Double.valueOf(getTotalPrice()).hashCode();
    }
}

</source>
</class>

<class classid="50" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student3/exercise1/ShippingP.java" startline="1" endline="24" pcid="3353">
public enum Shipping {

    EXPRESS(1,100),
    PRIORITY(3,50),
    CLASSIC(5, 10),
    NORUSH(8, 0);

    public int days, cost;

    private Shipping(int days, int cost) {
        this.days = days;
        this.cost = cost;
    }

    public int getDays() {
        return days;
    }

    public int getCost() {
        return cost;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student47/Exercise1/ShippingP.java" startline="1" endline="24" pcid="3496">
public enum Shipping {

    EXPRESS(1,100),
    PRIORITY(3,50),
    CLASSIC(5, 10),
    NORUSH(8, 0);

    public int days, cost;

    private Shipping(int days, int cost) {
        this.days = days;
        this.cost = cost;
    }

    public int getDays() {
        return days;
    }

    public int getCost() {
        return cost;
    }

}

</source>
</class>

<class classid="51" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student47/Exercise1/ItemP.java" startline="1" endline="18" pcid="3494">
public class Item {
    private String item;

    public Item(String item) {
        this.item = item;
    }

    public String getItem() {
        return item;
    }

    @Override
    public String toString() {
        return "Item: " + item;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab8-submissions/student5/exercise1/ItemP.java" startline="1" endline="17" pcid="3506">
public class Item {
    private String item;

    public Item(String item) {
        this.item = item;
    }

    public String getItem() {
        return item;
    }

    @Override
    public String toString() {
        return "Item: " + item;
    }
}

</source>
</class>

<class classid="52" nclones="36" nlines="28" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student1/exercise3/MageP.java" startline="1" endline="39" pcid="3548">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student37/exercise3/MageP.java" startline="1" endline="39" pcid="3967">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student3/exercise3/MageP.java" startline="1" endline="39" pcid="3869">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student5/exercise3/MageP.java" startline="1" endline="39" pcid="4101">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student29/exercise3/MageP.java" startline="1" endline="39" pcid="3853">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student6/exercise3/MageP.java" startline="1" endline="39" pcid="4126">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student10/exercise3/MageP.java" startline="1" endline="39" pcid="3559">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student18/exercise3/MageP.java" startline="1" endline="39" pcid="3678">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student2/exercise3/MageP.java" startline="1" endline="39" pcid="3713">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student9/exercise3/MageP.java" startline="1" endline="39" pcid="4172">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student12/exercise3/MageP.java" startline="1" endline="39" pcid="3597">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student23/exercise3/MageP.java" startline="1" endline="39" pcid="3774">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student8/exercise3/MageP.java" startline="1" endline="39" pcid="4141">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student44/exercise3/MageP.java" startline="1" endline="39" pcid="4086">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student36/exercise3/MageP.java" startline="1" endline="39" pcid="3964">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student19/exercise3/MageP.java" startline="1" endline="39" pcid="3696">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student35/exercise3/MageP.java" startline="1" endline="39" pcid="3946">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student15/exercise3/MageP.java" startline="1" endline="39" pcid="3631">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student41/exercise3/MageP.java" startline="1" endline="39" pcid="4034">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student31/exercise3/MageP.java" startline="1" endline="39" pcid="3904">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student7/exercise3/MageP.java" startline="1" endline="39" pcid="4138">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student40/exercise3/MageP.java" startline="1" endline="39" pcid="4015">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student28/exercise3/MageP.java" startline="1" endline="39" pcid="3839">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student26/exercise3/MageP.java" startline="1" endline="39" pcid="3822">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student11/exercise3/MageP.java" startline="1" endline="39" pcid="3577">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student13/exercise3/MageP.java" startline="1" endline="39" pcid="3614">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student16/exercise3/MageP.java" startline="1" endline="39" pcid="3646">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student22/exercise3/MageP.java" startline="1" endline="39" pcid="3765">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student38/exercise3/MageP.java" startline="1" endline="39" pcid="3984">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student4/exercise3/MageP.java" startline="1" endline="39" pcid="3998">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student39/exercise3/MageP.java" startline="1" endline="39" pcid="3993">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student25/exercise3/MageP.java" startline="1" endline="39" pcid="3812">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise3/MageP.java" startline="1" endline="39" pcid="3795">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student20/exercise3/MageP.java" startline="1" endline="39" pcid="3727">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student34/exercise3/MageP.java" startline="1" endline="39" pcid="3931">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student17/exercise3/MageP.java" startline="1" endline="39" pcid="3662">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
</class>

<class classid="53" nclones="3" nlines="24" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student10/exercise2/characterP.java" startline="1" endline="29" pcid="3553">
public class character {

    private String name;
    private int currentHealth;

    public character(String name, int currentHealth) {
        this.name = name;
        this.currentHealth = currentHealth;
    }

    public boolean takeDamage(int damage) {
        if (currentHealth - damage <= 0) {
            currentHealth = 0;
            return true;
        } else {
            currentHealth = currentHealth - damage;
            return false;
        }
    }

    public String toString() {
        return name;
    }

    public boolean stillAlive() {
        return currentHealth != 0;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student35/exercise2/characterP.java" startline="1" endline="29" pcid="3940">
public class character {

    private String name;
    private int currentHealth;

    public character(String name, int currentHealth) {
        this.name = name;
        this.currentHealth = currentHealth;
    }

    public boolean takeDamage(int damage) {
        if (currentHealth - damage <= 0) {
            currentHealth = 0;
            return true;
        } else {
            currentHealth = currentHealth - damage;
            return false;
        }
    }

    public String toString() {
        return name;
    }

    public boolean stillAlive() {
        return currentHealth != 0;
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student5/exercise2/characterP.java" startline="1" endline="29" pcid="4095">
public class character {

    private String name;
    private int currentHealth;

    public character(String name, int currentHealth) {
        this.name = name;
        this.currentHealth = currentHealth;
    }

    public boolean takeDamage(int damage) {
        if (currentHealth - damage <= 0) {
            currentHealth = 0;
            return true;
        } else {
            currentHealth = currentHealth - damage;
            return false;
        }
    }

    public String toString() {
        return name;
    }

    public boolean stillAlive() {
        return currentHealth != 0;
    }
}

</source>
</class>

<class classid="54" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student10/exercise2/launcherP.java" startline="1" endline="18" pcid="3555">
public class launcher {
    public static void main(String[] args) {
        character Bob = new character("Bob", 100);
        character Jhon = new character("Jhon", 100);
        targetable tar = new targetable("Firing towards", 50);
        ability ab = new ability("Opened fire");
        jump jum = new jump();
        jum.execute(Bob);
        jum.execute(Jhon);
        ab.execute(Bob);
        tar.setTarget(Jhon);
        tar.execute(Bob);
        tar.execute(Bob);
        tar.execute(Bob);
        action.logger.printLog();
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student35/exercise2/launcherP.java" startline="1" endline="18" pcid="3942">
public class launcher {
    public static void main(String[] args) {
        character Bob = new character("Bob", 100);
        character Jhon = new character("Jhon", 100);
        targetable tar = new targetable("Firing towards", 50);
        ability ab = new ability("Opened fire");
        jump jum = new jump();
        jum.execute(Bob);
        jum.execute(Jhon);
        ab.execute(Bob);
        tar.setTarget(Jhon);
        tar.execute(Bob);
        tar.execute(Bob);
        tar.execute(Bob);
        action.logger.printLog();
    }
}

</source>
</class>

<class classid="55" nclones="3" nlines="17" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student10/exercise2/logP.java" startline="1" endline="22" pcid="3556">
import java.util.ArrayList;
import java.util.Date;

public class log {
    private ArrayList<String> logMessages;

    public void addLogMessage(String newMessage) {
        Date d = new Date();
        logMessages.add(d + " : " + newMessage);
    }

    public log() {
        logMessages = new ArrayList<String>();
    }

    public void printLog() {
        for (int i = 0; i < logMessages.size(); i++) {
            System.out.println(logMessages.get(i));
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student35/exercise2/logP.java" startline="1" endline="22" pcid="3943">
import java.util.ArrayList;
import java.util.Date;

public class log {
    private ArrayList<String> logMessages;

    public void addLogMessage(String newMessage) {
        Date d = new Date();
        logMessages.add(d + " : " + newMessage);
    }

    public log() {
        logMessages = new ArrayList<String>();
    }

    public void printLog() {
        for (int i = 0; i < logMessages.size(); i++) {
            System.out.println(logMessages.get(i));
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student5/exercise2/logP.java" startline="1" endline="22" pcid="4098">
import java.util.ArrayList;
import java.util.Date;

public class log {
    private ArrayList<String> logMessages;

    public void addLogMessage(String newMessage) {
        Date d = new Date();
        logMessages.add(d + " : " + newMessage);
    }

    public log() {
        logMessages = new ArrayList<String>();
    }

    public void printLog() {
        for (int i = 0; i < logMessages.size(); i++) {
            System.out.println(logMessages.get(i));
        }
    }
}

</source>
</class>

<class classid="56" nclones="3" nlines="31" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student10/exercise2/targetableP.java" startline="1" endline="32" pcid="3557">
public class targetable extends ability {
    private character target;
    private int power;

    public targetable(String nameOfAction, int power) {
        super(nameOfAction);
        this.target = null;
        this.power = power;
    }

    public void setTarget(character newTarget) {
        if (newTarget.stillAlive()) {
            this.target = newTarget;
        } else {
            logger.addLogMessage("Targeting failed!! : Target is already dead");
        }
    }

    public void execute(character user) {
        if (this.target == null) {
            logger.addLogMessage("Action failed :\tInvalid target!!");
        } else {
            if (target.takeDamage(power)) {
                logger.addLogMessage("The user " + user + " killed " + target);
                target = null;
            } else {
                logger.addLogMessage("The user " + user + " executed " + name + " on target " + target);
            }
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student5/exercise2/targetableP.java" startline="1" endline="32" pcid="4099">
public class targetable extends ability {
    private character target;
    private int power;

    public targetable(String nameOfAction, int power) {
        super(nameOfAction);
        this.target = null;
        this.power = power;
    }

    public void setTarget(character newTarget) {
        if (newTarget.stillAlive()) {
            this.target = newTarget;
        } else {
            logger.addLogMessage("Targeting failed!! : Target is already dead");
        }
    }

    public void execute(character user) {
        if (this.target == null) {
            logger.addLogMessage("Action failed :\tInvalid target!!");
        } else {
            if (target.takeDamage(power)) {
                logger.addLogMessage("The user " + user + " killed " + target);
                target = null;
            } else {
                logger.addLogMessage("The user " + user + " executed " + name + " on target " + target);
            }
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student35/exercise2/targetableP.java" startline="1" endline="32" pcid="3944">
public class targetable extends ability {
    private character target;
    private int power;

    public targetable(String nameOfAction, int power) {
        super(nameOfAction);
        this.target = null;
        this.power = power;
    }

    public void setTarget(character newTarget) {
        if (newTarget.stillAlive()) {
            this.target = newTarget;
        } else {
            logger.addLogMessage("Targeting failed!! : Target is already dead");
        }
    }

    public void execute(character user) {
        if (this.target == null) {
            logger.addLogMessage("Action failed :\tInvalid target!!");
        } else {
            if (target.takeDamage(power)) {
                logger.addLogMessage("The user " + user + " killed " + target);
                target = null;
            } else {
                logger.addLogMessage("The user " + user + " executed " + name + " on target " + target);
            }
        }
    }
}

</source>
</class>

<class classid="57" nclones="2" nlines="16" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/ConsumableItemP.java" startline="1" endline="20" pcid="3776">
public class ConsumableItem extends Item {
    int charges;

    public ConsumableItem(String name, double value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = charges;
    }

    @Override
    public void use() {
        charges--;
        System.out.println("Used the Consumable Item " + name + ". (" + charges + " charges left)");
    }

    @Override
    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - " + charges + " charges";
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/exercise1/ConsumableItemP.java" startline="1" endline="20" pcid="3777">
public class ConsumableItem extends Item {
    int charges;

    public ConsumableItem(String name, double value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = charges;
    }

    @Override
    public void use() {
        charges--;
        System.out.println("Used the Consumable Item " + name + ". (" + charges + " charges left)");
    }

    @Override
    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - " + charges + " charges";
    }
}

</source>
</class>

<class classid="58" nclones="2" nlines="36" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/exercise1/GearItemP.java" startline="1" endline="41" pcid="3778">
public class GearItem extends Item implements Comparable<Item>{
    int critical_hit,determination,direct_hit;

    public GearItem(String name, double value, Rarity rarity, int critical_hit, int determination, int direct_hit) {
        super(name, value, rarity);
        this.critical_hit = critical_hit;
        this.determination = determination;
        this.direct_hit = direct_hit;
    }

    @Override
    public void use() {

    }

    @Override
    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - " + critical_hit + " Critical Hit / " + determination + " Determination / " + direct_hit + " Diret Hit";
    }

    @Override
    public int compareTo(Item item) {
        if (item instanceof GearItem){
            GearItem o = (GearItem) item;
            int sum = critical_hit+determination+direct_hit;
            int sumo = o.critical_hit+o.determination+o.direct_hit;
            if (sum>sumo){
                return 1;
            }
            else if (sumo>sum){
                return -1;
            }
            else {
                return 0;
            }
        }else{
            return Double.compare(this.value,item.value);
        }
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/GearItemP.java" startline="1" endline="41" pcid="3783">
public class GearItem extends Item implements Comparable<Item>{
    int critical_hit,determination,direct_hit;

    public GearItem(String name, double value, Rarity rarity, int critical_hit, int determination, int direct_hit) {
        super(name, value, rarity);
        this.critical_hit = critical_hit;
        this.determination = determination;
        this.direct_hit = direct_hit;
    }

    @Override
    public void use() {

    }

    @Override
    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - " + critical_hit + " Critical Hit / " + determination + " Determination / " + direct_hit + " Diret Hit";
    }

    @Override
    public int compareTo(Item item) {
        if (item instanceof GearItem){
            GearItem o = (GearItem) item;
            int sum = critical_hit+determination+direct_hit;
            int sumo = o.critical_hit+o.determination+o.direct_hit;
            if (sum>sumo){
                return 1;
            }
            else if (sumo>sum){
                return -1;
            }
            else {
                return 0;
            }
        }else{
            return Double.compare(this.value,item.value);
        }
    }
}

</source>
</class>

<class classid="59" nclones="2" nlines="102" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/exercise1/InventoryP.java" startline="1" endline="114" pcid="3779">
import java.util.*;

public class Inventory {
    public static final int CAPACITY = 12;
    List<Item> inventoryList = new ArrayList<>();

    public boolean add(Item item){
        if (inventoryList.size()<=CAPACITY){
            inventoryList.add(item);
            System.out.println("Added item to inventory: " + item.showStats());
            return true;
        }else {
            return false;
        }
    }

    public int drop(Item item){
        int count=0;
        while (inventoryList.remove(item)){
            count++;
        }
        System.out.println("Dropped " + count +" instances of item: " + item.showStats());
        return count;
    }

    public boolean drop(int index){
        if (index < inventoryList.size()){
            inventoryList.remove(index);
            return true;
        }else {
            return false;
        }
    }

    public void use(int index){
        Item item = inventoryList.get(index);
        if(item instanceof  ConsumableItem){
            if (((ConsumableItem) item).charges>0){
                ((ConsumableItem) item).charges--;
                System.out.println("Used the consumble item " + item.name + ". (" + ((ConsumableItem) item).charges + " charges left)") ;
                if (((ConsumableItem) item).charges<=0){
                    System.out.println("Used item has no charges left and has been dropped: [" + item.rarity + "] " + item.name + " (" + item.value + " Gold) - 0 Charges");
                }
            }else
                System.out.println("The consumable item " + item.name + " has no charges left.");

        }
    }

    public boolean sell(int index){
        Item item = inventoryList.get(index);
        if (item instanceof TrashItem || item instanceof ConsumableItem){
            inventoryList.remove(index);
            return true;
        }else{
            GearItem itemm = (GearItem) inventoryList.get(index);
            System.out.println("The following item cannot be sold: "+ itemm.showStats());
            return false;
        }
    }

    public void sort(boolean byName,boolean ascending){
        if (byName){
            inventoryList.sort(Comparator.comparing(o -> o.name));
        }else{
            inventoryList.sort(Comparator.comparing(o -> o.value));
        }

        if (!ascending){
            Collections.reverse(inventoryList);
        }
    }

    @Override
    public String toString() {
        System.out.println("Inventory: " + inventoryList.size());
        int c= 0;
        StringBuilder sb = new StringBuilder();
        for (Item i : inventoryList){
            sb.append("{").append(c).append("}").append(i.showStats()).append("\n");
            c++;
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        ConsumableItem item1 = new ConsumableItem("Mana Potion",230,Rarity.WHITE,1);
        ConsumableItem itemc2 = new ConsumableItem("Health Potion",230,Rarity.WHITE,2);
        GearItem item2 = new GearItem("Helmet",250,Rarity.BLUE,5,3,4);
        GearItem item4 = new GearItem("Vest",290,Rarity.PURPLE,5,3,4);
        TrashItem item3 = new TrashItem("Cross",2,Rarity.PINK);

        Inventory inventory = new Inventory();
        inventory.add(item1);
        inventory.add(itemc2);
        inventory.add(item2);
        inventory.add(item4);
        inventory.add(item1);
        inventory.add(item3);

        inventory.drop(item1);
        inventory.add(item2);
        inventory.use(0);
        inventory.use(0);
        inventory.use(0);
        inventory.use(1);

        inventory.sell(0);
        inventory.sell(3);

        inventory.sort(false,true);
    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/InventoryP.java" startline="1" endline="114" pcid="3784">
import java.util.*;

public class Inventory {
    public static final int CAPACITY = 12;
    List<Item> inventoryList = new ArrayList<>();

    public boolean add(Item item){
        if (inventoryList.size()<=CAPACITY){
            inventoryList.add(item);
            System.out.println("Added item to inventory: " + item.showStats());
            return true;
        }else {
            return false;
        }
    }

    public int drop(Item item){
        int count=0;
        while (inventoryList.remove(item)){
            count++;
        }
        System.out.println("Dropped " + count +" instances of item: " + item.showStats());
        return count;
    }

    public boolean drop(int index){
        if (index < inventoryList.size()){
            inventoryList.remove(index);
            return true;
        }else {
            return false;
        }
    }

    public void use(int index){
        Item item = inventoryList.get(index);
        if(item instanceof  ConsumableItem){
            if (((ConsumableItem) item).charges>0){
                ((ConsumableItem) item).charges--;
                System.out.println("Used the consumble item " + item.name + ". (" + ((ConsumableItem) item).charges + " charges left)") ;
                if (((ConsumableItem) item).charges<=0){
                    System.out.println("Used item has no charges left and has been dropped: [" + item.rarity + "] " + item.name + " (" + item.value + " Gold) - 0 Charges");
                }
            }else
                System.out.println("The consumable item " + item.name + " has no charges left.");

        }
    }

    public boolean sell(int index){
        Item item = inventoryList.get(index);
        if (item instanceof TrashItem || item instanceof ConsumableItem){
            inventoryList.remove(index);
            return true;
        }else{
            GearItem itemm = (GearItem) inventoryList.get(index);
            System.out.println("The following item cannot be sold: "+ itemm.showStats());
            return false;
        }
    }

    public void sort(boolean byName,boolean ascending){
        if (byName){
            inventoryList.sort(Comparator.comparing(o -> o.name));
        }else{
            inventoryList.sort(Comparator.comparing(o -> o.value));
        }

        if (!ascending){
            Collections.reverse(inventoryList);
        }
    }

    @Override
    public String toString() {
        System.out.println("Inventory: " + inventoryList.size());
        int c= 0;
        StringBuilder sb = new StringBuilder();
        for (Item i : inventoryList){
            sb.append("{").append(c).append("}").append(i.showStats()).append("\n");
            c++;
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        ConsumableItem item1 = new ConsumableItem("Mana Potion",230,Rarity.WHITE,1);
        ConsumableItem itemc2 = new ConsumableItem("Health Potion",230,Rarity.WHITE,2);
        GearItem item2 = new GearItem("Helmet",250,Rarity.BLUE,5,3,4);
        GearItem item4 = new GearItem("Vest",290,Rarity.PURPLE,5,3,4);
        TrashItem item3 = new TrashItem("Cross",2,Rarity.PINK);

        Inventory inventory = new Inventory();
        inventory.add(item1);
        inventory.add(itemc2);
        inventory.add(item2);
        inventory.add(item4);
        inventory.add(item1);
        inventory.add(item3);

        inventory.drop(item1);
        inventory.add(item2);
        inventory.use(0);
        inventory.use(0);
        inventory.use(0);
        inventory.use(1);

        inventory.sell(0);
        inventory.sell(3);

        inventory.sort(false,true);
    }
}

</source>
</class>

<class classid="60" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/exercise1/ItemP.java" startline="1" endline="40" pcid="3780">
public class Item implements Comparable<Item> {
    String name;
    double value;
    Rarity rarity;

    public Item(String name, double value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this){
            return true;
        }
        if (!(obj instanceof Item)){
            return false;
        }

        Item c = (Item) obj;

        return c.name.equals(name)&&c.rarity.equals(rarity);
    }

    public void use(){

    }

    @Override
    public int compareTo(Item o) {
        return Double.compare(this.value, o.value);
    }

    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - ";
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise1/ItemP.java" startline="1" endline="40" pcid="3785">
public class Item implements Comparable<Item> {
    String name;
    double value;
    Rarity rarity;

    public Item(String name, double value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this){
            return true;
        }
        if (!(obj instanceof Item)){
            return false;
        }

        Item c = (Item) obj;

        return c.name.equals(name)&&c.rarity.equals(rarity);
    }

    public void use(){

    }

    @Override
    public int compareTo(Item o) {
        return Double.compare(this.value, o.value);
    }

    public String showStats(){
        return "[" +rarity+"] " + name  + " (" + value + " Gold) - ";
    }

}

</source>
</class>

<class classid="61" nclones="2" nlines="62" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/ActionP.java" startline="1" endline="74" pcid="3788">
abstract class Actions {
    Character user;

    public Actions(Character user) {
        this.user = user;
    }

    abstract void execute();
}

class Jump extends Actions {

    public Jump(Character user) {
        super(user);
    }

    @Override
    void execute() {
     Logger.log(user.name + " user jumped");
    }
}

class Abilities extends Actions{

    String name;

    public Abilities(Character user,String name) {
        super(user);
        this.name = name;
    }

    @Override
    void execute() {
        Logger.log(user.name + " user used ability " + name);
    }
}

class Targetable extends Actions{

    Character target;
    int value;
    boolean isStrict;

    public Targetable(Character user,Character target,int value,boolean isStrict) {
        super(user);
        this.target = target;
        this.value = value;
        this.isStrict = isStrict;
    }

    @Override
    void execute() {
        if (isStrict){
            if(target != null){
                if (target.redHealth(value)){
                    Logger.log(user.name+" user killed user " + target.name);
                }else {
                    Logger.log(user.name + " user used targetable ability on user " + target.name);
                }
            }else{
                Logger.log(user.name + " action failed (no target specified)");
            }
        }else{
            if (user.redHealth(value)){
                Logger.log(user.name+" killed himself using targetable actioy");
            }else{
                Logger.log(user.name + " used targetable acttion on itself and healt got reduced by " + value);
            }

        }

    }
}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/exercise2/ActionP.java" startline="1" endline="74" pcid="3790">
abstract class Actions {
    Character user;

    public Actions(Character user) {
        this.user = user;
    }

    abstract void execute();
}

class Jump extends Actions {

    public Jump(Character user) {
        super(user);
    }

    @Override
    void execute() {
     Logger.log(user.name + " user jumped");
    }
}

class Abilities extends Actions{

    String name;

    public Abilities(Character user,String name) {
        super(user);
        this.name = name;
    }

    @Override
    void execute() {
        Logger.log(user.name + " user used ability " + name);
    }
}

class Targetable extends Actions{

    Character target;
    int value;
    boolean isStrict;

    public Targetable(Character user,Character target,int value,boolean isStrict) {
        super(user);
        this.target = target;
        this.value = value;
        this.isStrict = isStrict;
    }

    @Override
    void execute() {
        if (isStrict){
            if(target != null){
                if (target.redHealth(value)){
                    Logger.log(user.name+" user killed user " + target.name);
                }else {
                    Logger.log(user.name + " user used targetable ability on user " + target.name);
                }
            }else{
                Logger.log(user.name + " action failed (no target specified)");
            }
        }else{
            if (user.redHealth(value)){
                Logger.log(user.name+" killed himself using targetable actioy");
            }else{
                Logger.log(user.name + " used targetable acttion on itself and healt got reduced by " + value);
            }

        }

    }
}

</source>
</class>

<class classid="62" nclones="2" nlines="40" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/CharacterP.java" startline="1" endline="52" pcid="3789">
public class Character {
    String name;
    int max_health=100,curr_health;

    public Character(String name, int curr_health) {
        this.name = name;
        this.curr_health = curr_health;
    }

    public boolean redHealth(int value){
        if (value<curr_health){
            curr_health -= value;
            return false;
        }else{
            return  true;
        }
    }

    public static void main(String[] args) {
        Character itachi = new Character("Itachi",100);
        Character naruto = new Character("Naruto",100);

        Jump jumpi = new Jump(itachi);
        Abilities iabil = new Abilities(itachi,"Sharingan");
        Targetable targetablei = new Targetable(itachi,null,50,true);
        Targetable targetablei1 = new Targetable(itachi,naruto,50,true);
        Targetable targetablei2 = new Targetable(itachi,null,50,false);

        Jump jumpn = new Jump(naruto);
        Abilities nabil = new Abilities(naruto,"Rasengan");
        Targetable targetablen = new Targetable(naruto,null,50,true);
        Targetable targetablen1 = new Targetable(naruto,itachi,50,true);
        Targetable targetablen2 = new Targetable(naruto,null,50,false);

        jumpi.execute();
        jumpn.execute();

        targetablei.execute();
        targetablei1.execute();
        targetablei2.execute();

        iabil.execute();
        nabil.execute();

        targetablen1.execute();

        Logger.printLogs();

    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/exercise2/CharacterP.java" startline="1" endline="52" pcid="3791">
public class Character {
    String name;
    int max_health=100,curr_health;

    public Character(String name, int curr_health) {
        this.name = name;
        this.curr_health = curr_health;
    }

    public boolean redHealth(int value){
        if (value<curr_health){
            curr_health -= value;
            return false;
        }else{
            return  true;
        }
    }

    public static void main(String[] args) {
        Character itachi = new Character("Itachi",100);
        Character naruto = new Character("Naruto",100);

        Jump jumpi = new Jump(itachi);
        Abilities iabil = new Abilities(itachi,"Sharingan");
        Targetable targetablei = new Targetable(itachi,null,50,true);
        Targetable targetablei1 = new Targetable(itachi,naruto,50,true);
        Targetable targetablei2 = new Targetable(itachi,null,50,false);

        Jump jumpn = new Jump(naruto);
        Abilities nabil = new Abilities(naruto,"Rasengan");
        Targetable targetablen = new Targetable(naruto,null,50,true);
        Targetable targetablen1 = new Targetable(naruto,itachi,50,true);
        Targetable targetablen2 = new Targetable(naruto,null,50,false);

        jumpi.execute();
        jumpn.execute();

        targetablei.execute();
        targetablei1.execute();
        targetablei2.execute();

        iabil.execute();
        nabil.execute();

        targetablen1.execute();

        Logger.printLogs();

    }

}

</source>
</class>

<class classid="63" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/exercise2/LoggerP.java" startline="1" endline="20" pcid="3792">
import java.util.ArrayList;
import java.util.Date;

public class Logger {

   static ArrayList<String> logs = new ArrayList<>();

    public static void log(String log){
        Date date = new Date();
        logs.add(log + "   " + date);
    }

    public static void printLogs(){
        for(String log : logs){
            System.out.println(log);
        }
    }

}

</source>
<source file="../AIvsSTD_std_preproc/prog1-2021-lab9-submissions/student24/exercise2/LoggerP.java" startline="1" endline="20" pcid="3793">
import java.util.ArrayList;
import java.util.Date;

public class Logger {

   static ArrayList<String> logs = new ArrayList<>();

    public static void log(String log){
        Date date = new Date();
        logs.add(log + "   " + date);
    }

    public static void printLogs(){
        for(String log : logs){
            System.out.println(log);
        }
    }

}

</source>
</class>

</clones>
