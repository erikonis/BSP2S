<clones>
<systeminfo processor="nicad6" system="AIvsSTD_ai_preproc" granularity="files" threshold="0%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="2727" npairs="1077"/>
<runinfo ncompares="80549" cputime="87135"/>
<classinfo nclasses="196"/>

<class classid="1" nclones="3" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/chatgpt/sol1/CharacterP.java" startline="1" endline="29" pcid="1">
public class Character {
    private final String name;
    private final CharacterRole role;

    public Character(String name, CharacterRole role) throws InvalidCharacterException {
        if (name == null || name.trim().isEmpty()) {
            throw new InvalidCharacterException("Character name cannot be empty.");
        }
        if (name.length() > 20) {
            throw new InvalidCharacterException("Character name cannot exceed 20 characters.");
        }
        this.name = name.trim();
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " [" + role + "]";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/chatgpt/sol5/CharacterP.java" startline="1" endline="29" pcid="32">
public class Character {
    private final String name;
    private final CharacterRole role;

    public Character(String name, CharacterRole role) throws InvalidCharacterException {
        if (name == null || name.trim().isEmpty()) {
            throw new InvalidCharacterException("Character name cannot be empty.");
        }
        if (name.length() > 20) {
            throw new InvalidCharacterException("Character name cannot exceed 20 characters.");
        }
        this.name = name.trim();
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " [" + role + "]";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/chatgpt/sol4/CharacterP.java" startline="1" endline="29" pcid="26">
public class Character {
    private final String name;
    private final CharacterRole role;

    public Character(String name, CharacterRole role) throws InvalidCharacterException {
        if (name == null || name.trim().isEmpty()) {
            throw new InvalidCharacterException("Character name cannot be empty.");
        }
        if (name.length() > 20) {
            throw new InvalidCharacterException("Character name cannot exceed 20 characters.");
        }
        this.name = name.trim();
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " [" + role + "]";
    }
}

</source>
</class>

<class classid="2" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol1/CharacterP.java" startline="1" endline="26" pcid="38">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) throws Exception {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new Exception("Invalid character name.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol3/CharacterP.java" startline="1" endline="26" pcid="54">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) throws Exception {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new Exception("Invalid character name.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
</class>

<class classid="3" nclones="2" nlines="78" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol3/LauncherP.java" startline="1" endline="80" pcid="58">
import java.util.InputMismatchException;
import java.util.Scanner;

public class Launcher {
    public static void main(String[] args) {
        Party party0 = new Party();
        Party party1 = new Party();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Enter '0' to exit, '1' to create a new character, '2' to view a party:");
            int choice;
            try {
                choice = scanner.nextInt();
                scanner.nextLine();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine();
                continue;
            }

            if (choice == 0) {
                break;
            } else if (choice == 1) {
                try {
                    System.out.println("Enter character name:");
                    String name = scanner.nextLine();
                    if (name.isEmpty() || name.length() > 20) {
                        throw new Exception("Invalid character name.");
                    }

                    System.out.println("Enter character role (DAMAGE, TANK, HEALER):");
                    String roleInput = scanner.nextLine().toUpperCase();
                    CharacterRole role;
                    try {
                        role = CharacterRole.valueOf(roleInput);
                    } catch (IllegalArgumentException e) {
                        throw new Exception("Invalid role name.");
                    }

                    System.out.println("Enter party number (0 or 1):");
                    int partyNumber = scanner.nextInt();
                    scanner.nextLine();

                    Character character = new Character(name, role);
                    if (partyNumber == 0) {
                        party0.add(character);
                    } else if (partyNumber == 1) {
                        party1.add(character);
                    } else {
                        throw new Exception("Invalid party number.");
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } else if (choice == 2) {
                try {
                    System.out.println("Enter party number to view (0 or 1):");
                    int partyNumber = scanner.nextInt();
                    scanner.nextLine();

                    if (partyNumber == 0) {
                        System.out.println(party0);
                    } else if (partyNumber == 1) {
                        System.out.println(party1);
                    } else {
                        throw new Exception("Invalid party number.");
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } else {
                System.out.println("Invalid choice. Please enter '0', '1', or '2'.");
            }
        }

        scanner.close();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol5/LauncherP.java" startline="1" endline="80" pcid="73">
import java.util.InputMismatchException;
import java.util.Scanner;

public class Launcher {
    public static void main(String[] args) {
        Party party0 = new Party();
        Party party1 = new Party();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Enter '0' to exit, '1' to create a new character, '2' to view a party:");
            int choice;
            try {
                choice = scanner.nextInt();
                scanner.nextLine();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine();
                continue;
            }

            if (choice == 0) {
                break;
            } else if (choice == 1) {
                try {
                    System.out.println("Enter character name:");
                    String name = scanner.nextLine();
                    if (name.isEmpty() || name.length() > 20) {
                        throw new Exception("Invalid character name.");
                    }

                    System.out.println("Enter character role (DAMAGE, TANK, HEALER):");
                    String roleInput = scanner.nextLine().toUpperCase();
                    CharacterRole role;
                    try {
                        role = CharacterRole.valueOf(roleInput);
                    } catch (IllegalArgumentException e) {
                        throw new Exception("Invalid role name.");
                    }

                    System.out.println("Enter party number (0 or 1):");
                    int partyNumber = scanner.nextInt();
                    scanner.nextLine();

                    Character character = new Character(name, role);
                    if (partyNumber == 0) {
                        party0.add(character);
                    } else if (partyNumber == 1) {
                        party1.add(character);
                    } else {
                        throw new Exception("Invalid party number.");
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } else if (choice == 2) {
                try {
                    System.out.println("Enter party number to view (0 or 1):");
                    int partyNumber = scanner.nextInt();
                    scanner.nextLine();

                    if (partyNumber == 0) {
                        System.out.println(party0);
                    } else if (partyNumber == 1) {
                        System.out.println(party1);
                    } else {
                        throw new Exception("Invalid party number.");
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            } else {
                System.out.println("Invalid choice. Please enter '0', '1', or '2'.");
            }
        }

        scanner.close();
    }
}

</source>
</class>

<class classid="4" nclones="2" nlines="45" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol3/PartyP.java" startline="1" endline="54" pcid="60">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    public Party() {
        characters = new ArrayList<>();
    }

    public void add(Character character) throws Exception {
        if (characters.size() >= 4) {
            throw new Exception("Party is already full.");
        }

        long healerCount = characters.stream().filter(c -> c.getRole() == CharacterRole.HEALER).count();
        long tankCount = characters.stream().filter(c -> c.getRole() == CharacterRole.TANK).count();
        long damageCount = characters.stream().filter(c -> c.getRole() == CharacterRole.DAMAGE).count();

        switch (character.getRole()) {
            case HEALER:
                if (healerCount >= 1) {
                    throw new Exception("Party already has a Healer.");
                }
                break;
            case TANK:
                if (tankCount >= 1) {
                    throw new Exception("Party already has a Tank.");
                }
                break;
            case DAMAGE:
                if (damageCount >= 2) {
                    throw new Exception("Party already has enough Damage characters.");
                }
                break;
        }

        if (characters.contains(character)) {
            throw new Exception("Character is already in the party.");
        }

        characters.add(character);
    }

    @Override
    public String toString() {
        StringBuilder characterList = new StringBuilder();
        for (Character character : characters) {
            characterList.append("- ").append(character).append("\n");
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol5/PartyP.java" startline="1" endline="54" pcid="74">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;

    public Party() {
        characters = new ArrayList<>();
    }

    public void add(Character character) throws Exception {
        if (characters.size() >= 4) {
            throw new Exception("Party is already full.");
        }

        long healerCount = characters.stream().filter(c -> c.getRole() == CharacterRole.HEALER).count();
        long tankCount = characters.stream().filter(c -> c.getRole() == CharacterRole.TANK).count();
        long damageCount = characters.stream().filter(c -> c.getRole() == CharacterRole.DAMAGE).count();

        switch (character.getRole()) {
            case HEALER:
                if (healerCount >= 1) {
                    throw new Exception("Party already has a Healer.");
                }
                break;
            case TANK:
                if (tankCount >= 1) {
                    throw new Exception("Party already has a Tank.");
                }
                break;
            case DAMAGE:
                if (damageCount >= 2) {
                    throw new Exception("Party already has enough Damage characters.");
                }
                break;
        }

        if (characters.contains(character)) {
            throw new Exception("Character is already in the party.");
        }

        characters.add(character);
    }

    @Override
    public String toString() {
        StringBuilder characterList = new StringBuilder();
        for (Character character : characters) {
            characterList.append("- ").append(character).append("\n");
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList;
    }
}

</source>
</class>

<class classid="5" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol4/CharacterP.java" startline="1" endline="23" pcid="63">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/copilot/sol5/CharacterP.java" startline="1" endline="23" pcid="71">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return name + " (" + role + ")";
    }
}

</source>
</class>

<class classid="6" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol1/CharacterP.java" startline="1" endline="29" pcid="98">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) throws InvalidCharacterNameException {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new InvalidCharacterNameException("Character name must not be empty and must not exceed 20 characters.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "Character{" +
                "name='" + name + '\'' +
                ", role=" + role +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol5/CharacterP.java" startline="1" endline="29" pcid="129">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) throws InvalidCharacterNameException {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new InvalidCharacterNameException("Character name must not be empty and must not exceed 20 characters.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "Character{" +
                "name='" + name + '\'' +
                ", role=" + role +
                '}';
    }
}

</source>
</class>

<class classid="7" nclones="2" nlines="90" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol1/MainP.java" startline="1" endline="99" pcid="102">
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Party party0 = new Party();
        Party party1 = new Party();
        int choice;

        do {
            System.out.println("\n--- Final Fantasy Party Manager ---");
            System.out.println("0 - Exit the program");
            System.out.println("1 - Create a new character");
            System.out.println("2 - Choose a Party to view");
            System.out.print("Enter your choice: ");

            try {
                choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 0:
                        System.out.println("Exiting program.");
                        break;
                    case 1:
                        createCharacter(scanner, party0, party1);
                        break;
                    case 2:
                        viewParty(scanner, party0, party1);
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Error: Invalid input type. Please enter an integer.");
                scanner.nextLine();
                choice = -1;
            }
        } while (choice != 0);

        scanner.close();
    }

    private static void createCharacter(Scanner scanner, Party party0, Party party1) {
        System.out.print("Enter character name: ");
        String characterName = scanner.nextLine();

        System.out.print("Enter character role (DAMAGE, TANK, HEALER): ");
        String roleString = scanner.nextLine();
        CharacterRole role = null;

        try {
            role = CharacterRole.valueOf(roleString.toUpperCase());
        } catch (IllegalArgumentException e) {
            System.out.println("Error: Invalid role name. Please enter DAMAGE, TANK, or HEALER.");
            return;
        }

        System.out.print("Enter the Party to which the Character should be added (0 or 1): ");
        int partyChoice = scanner.nextInt();
        scanner.nextLine();

        Character character = null;
        try {
             character = new Character(characterName, role);
        } catch (InvalidCharacterNameException e){
            System.out.println("Error: " + e.getMessage());
            return;
        }

        try {
            if (partyChoice == 0) {
                party0.add(character);
            } else if (partyChoice == 1) {
                party1.add(character);
            } else {
                System.out.println("Error: Invalid party choice. Please enter 0 or 1.");
            }
        } catch (Party.PartyFullException | Party.InvalidRoleException | Party.CharacterAlreadyInPartyException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void viewParty(Scanner scanner, Party party0, Party party1) {
        System.out.print("Enter the Party to show (0 or 1): ");
        int partyChoice = scanner.nextInt();
        scanner.nextLine();

        if (partyChoice == 0) {
            System.out.println(party0);
        } else if (partyChoice == 1) {
            System.out.println(party1);
        } else {
            System.out.println("Error: Invalid party choice. Please enter 0 or 1.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol5/MainP.java" startline="1" endline="99" pcid="133">
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Party party0 = new Party();
        Party party1 = new Party();
        int choice;

        do {
            System.out.println("\n--- Final Fantasy Party Manager ---");
            System.out.println("0 - Exit the program");
            System.out.println("1 - Create a new character");
            System.out.println("2 - Choose a Party to view");
            System.out.print("Enter your choice: ");

            try {
                choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 0:
                        System.out.println("Exiting program.");
                        break;
                    case 1:
                        createCharacter(scanner, party0, party1);
                        break;
                    case 2:
                        viewParty(scanner, party0, party1);
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Error: Invalid input type. Please enter an integer.");
                scanner.nextLine();
                choice = -1;
            }
        } while (choice != 0);

        scanner.close();
    }

    private static void createCharacter(Scanner scanner, Party party0, Party party1) {
        System.out.print("Enter character name: ");
        String characterName = scanner.nextLine();

        System.out.print("Enter character role (DAMAGE, TANK, HEALER): ");
        String roleString = scanner.nextLine();
        CharacterRole role = null;

        try {
            role = CharacterRole.valueOf(roleString.toUpperCase());
        } catch (IllegalArgumentException e) {
            System.out.println("Error: Invalid role name. Please enter DAMAGE, TANK, or HEALER.");
            return;
        }

        System.out.print("Enter the Party to which the Character should be added (0 or 1): ");
        int partyChoice = scanner.nextInt();
        scanner.nextLine();

        Character character = null;
        try {
             character = new Character(characterName, role);
        } catch (InvalidCharacterNameException e){
            System.out.println("Error: " + e.getMessage());
            return;
        }

        try {
            if (partyChoice == 0) {
                party0.add(character);
            } else if (partyChoice == 1) {
                party1.add(character);
            } else {
                System.out.println("Error: Invalid party choice. Please enter 0 or 1.");
            }
        } catch (Party.PartyFullException | Party.InvalidRoleException | Party.CharacterAlreadyInPartyException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void viewParty(Scanner scanner, Party party0, Party party1) {
        System.out.print("Enter the Party to show (0 or 1): ");
        int partyChoice = scanner.nextInt();
        scanner.nextLine();

        if (partyChoice == 0) {
            System.out.println(party0);
        } else if (partyChoice == 1) {
            System.out.println(party1);
        } else {
            System.out.println("Error: Invalid party choice. Please enter 0 or 1.");
        }
    }
}

</source>
</class>

<class classid="8" nclones="2" nlines="50" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol1/PartyP.java" startline="1" endline="55" pcid="104">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;
    private static final int MAX_PARTY_SIZE = 4;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        StringBuilder characterList = new StringBuilder();
        for (Character character : characters) {
            characterList.append("- ").append(character).append("\n");
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList.toString();
    }

    public void add(Character character) throws PartyFullException, InvalidRoleException, CharacterAlreadyInPartyException {
        if (characters.size() >= MAX_PARTY_SIZE) {
            throw new PartyFullException("Party is full. Cannot add more characters.");
        }

        if (characters.contains(character)) {
             throw new CharacterAlreadyInPartyException("Character " + character.getName() + " is already in this party.");
        }

        int healerCount = 0;
        int tankCount = 0;
        int damageCount = 0;
        for (Character c : characters) {
            if (c.getRole() == CharacterRole.HEALER) {
                healerCount++;
            } else if (c.getRole() == CharacterRole.TANK) {
                tankCount++;
            } else if (c.getRole() == CharacterRole.DAMAGE) {
                damageCount++;
            }
        }

        if (character.getRole() == CharacterRole.HEALER && healerCount >= 1) {
            throw new InvalidRoleException("Party already has a Healer.");
        } else if (character.getRole() == CharacterRole.TANK && tankCount >= 1) {
            throw new InvalidRoleException("Party already has a Tank.");
        } else if (character.getRole() == CharacterRole.DAMAGE && damageCount >= 2) {
            throw new InvalidRoleException("Party already has two Damage characters.");
        }

        characters.add(character);
        System.out.println("Character " + character.getName() + " added to party.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol5/PartyP.java" startline="1" endline="55" pcid="135">
import java.util.ArrayList;
import java.util.List;

public class Party {
    private List<Character> characters;
    private static final int MAX_PARTY_SIZE = 4;

    Party() {
        characters = new ArrayList<>();
    }

    @Override
    public String toString() {
        StringBuilder characterList = new StringBuilder();
        for (Character character : characters) {
            characterList.append("- ").append(character).append("\n");
        }
        return "\nParty (" + characters.size() + " members):\n" + characterList.toString();
    }

    public void add(Character character) throws PartyFullException, InvalidRoleException, CharacterAlreadyInPartyException {
        if (characters.size() >= MAX_PARTY_SIZE) {
            throw new PartyFullException("Party is full. Cannot add more characters.");
        }

        if (characters.contains(character)) {
             throw new CharacterAlreadyInPartyException("Character " + character.getName() + " is already in this party.");
        }

        int healerCount = 0;
        int tankCount = 0;
        int damageCount = 0;
        for (Character c : characters) {
            if (c.getRole() == CharacterRole.HEALER) {
                healerCount++;
            } else if (c.getRole() == CharacterRole.TANK) {
                tankCount++;
            } else if (c.getRole() == CharacterRole.DAMAGE) {
                damageCount++;
            }
        }

        if (character.getRole() == CharacterRole.HEALER && healerCount >= 1) {
            throw new InvalidRoleException("Party already has a Healer.");
        } else if (character.getRole() == CharacterRole.TANK && tankCount >= 1) {
            throw new InvalidRoleException("Party already has a Tank.");
        } else if (character.getRole() == CharacterRole.DAMAGE && damageCount >= 2) {
            throw new InvalidRoleException("Party already has two Damage characters.");
        }

        characters.add(character);
        System.out.println("Character " + character.getName() + " added to party.");
    }
}

</source>
</class>

<class classid="9" nclones="3" nlines="32" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol2/CharacterP.java" startline="1" endline="39" pcid="107">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new IllegalArgumentException("Character name must not be empty and must not exceed 20 characters.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "Character{name='" + name + "', role=" + role + "}";
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Character other = (Character) obj;
        return name.equals(other.name) && role == other.role;
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(name, role);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol4/CharacterP.java" startline="1" endline="39" pcid="123">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new IllegalArgumentException("Character name must not be empty and must not exceed 20 characters.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "Character{name='" + name + "', role=" + role + "}";
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Character other = (Character) obj;
        return name.equals(other.name) && role == other.role;
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(name, role);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol3/CharacterP.java" startline="1" endline="39" pcid="118">
public class Character {
    private String name;
    private CharacterRole role;

    public Character(String name, CharacterRole role) {
        if (name == null || name.isEmpty() || name.length() > 20) {
            throw new IllegalArgumentException("Character name must not be empty and must not exceed 20 characters.");
        }
        this.name = name;
        this.role = role;
    }

    public String getName() {
        return name;
    }

    public CharacterRole getRole() {
        return role;
    }

    @Override
    public String toString() {
        return "Character{name='" + name + "', role=" + role + "}";
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Character other = (Character) obj;
        return name.equals(other.name) && role == other.role;
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(name, role);
    }
}

</source>
</class>

<class classid="10" nclones="3" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol2/CharacterRoleP.java" startline="1" endline="13" pcid="108">
public enum CharacterRole {
    DAMAGE, TANK, HEALER;

    public static CharacterRole fromString(String text) {
        for (CharacterRole role : CharacterRole.values()) {
            if (role.name().equalsIgnoreCase(text)) {
                return role;
            }
        }
        throw new IllegalArgumentException("Invalid role name: " + text);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol3/CharacterRoleP.java" startline="1" endline="13" pcid="119">
public enum CharacterRole {
    DAMAGE, TANK, HEALER;

    public static CharacterRole fromString(String text) {
        for (CharacterRole role : CharacterRole.values()) {
            if (role.name().equalsIgnoreCase(text)) {
                return role;
            }
        }
        throw new IllegalArgumentException("Invalid role name: " + text);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 1/gemini/sol4/CharacterRoleP.java" startline="1" endline="13" pcid="124">
public enum CharacterRole {
    DAMAGE, TANK, HEALER;

    public static CharacterRole fromString(String text) {
        for (CharacterRole role : CharacterRole.values()) {
            if (role.name().equalsIgnoreCase(text)) {
                return role;
            }
        }
        throw new IllegalArgumentException("Invalid role name: " + text);
    }
}

</source>
</class>

<class classid="11" nclones="3" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol3/AngelObstacleP.java" startline="1" endline="18" pcid="151">
public class AngelObstacle extends Obstacle {
    private final int mentalToll;

    public AngelObstacle(int toll) {
        this.mentalToll = toll;
    }

    @Override
    public int getMentalToll() {
        return mentalToll;
    }

    @Override
    public String toString() {
        return "Angel Obstacle (" + mentalToll + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol5/AngelObstacleP.java" startline="1" endline="18" pcid="167">
public class AngelObstacle extends Obstacle {
    private final int mentalToll;

    public AngelObstacle(int toll) {
        this.mentalToll = toll;
    }

    @Override
    public int getMentalToll() {
        return mentalToll;
    }

    @Override
    public String toString() {
        return "Angel Obstacle (" + mentalToll + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol4/AngelObstacleP.java" startline="1" endline="18" pcid="159">
public class AngelObstacle extends Obstacle {
    private final int mentalToll;

    public AngelObstacle(int toll) {
        this.mentalToll = toll;
    }

    @Override
    public int getMentalToll() {
        return mentalToll;
    }

    @Override
    public String toString() {
        return "Angel Obstacle (" + mentalToll + ")";
    }
}

</source>
</class>

<class classid="12" nclones="2" nlines="22" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol3/DummyPilotP.java" startline="1" endline="28" pcid="152">
import java.util.Random;

public class DummyPilot extends Pilot {
    public DummyPilot(String name, int compatibility) {
        super(name, compatibility);
        this.compatibility -= new Random().nextInt(6);
    }

    @Override
    public boolean canStart() {
        return true;
    }

    @Override
    public void afterStart() {
    }

    @Override
    public boolean tryDodge(Obstacle obs) {
        return new Random().nextInt(101) >= 50;
    }

    @Override
    public String toString() {
        return "(Dummy) " + name + " (" + compatibility + " compatibility)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol4/DummyPilotP.java" startline="1" endline="28" pcid="160">
import java.util.Random;

public class DummyPilot extends Pilot {
    public DummyPilot(String name, int compatibility) {
        super(name, compatibility);
        this.compatibility -= new Random().nextInt(6);
    }

    @Override
    public boolean canStart() {
        return true;
    }

    @Override
    public void afterStart() {
    }

    @Override
    public boolean tryDodge(Obstacle obs) {
        return new Random().nextInt(101) >= 50;
    }

    @Override
    public String toString() {
        return "(Dummy) " + name + " (" + compatibility + " compatibility)";
    }
}

</source>
</class>

<class classid="13" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol3/HumanPilotP.java" startline="1" endline="38" pcid="154">
import java.util.Random;

public class HumanPilot extends Pilot {
    private int sanity = 100;

    public HumanPilot(String name, int compatibility) {
        super(name, compatibility);
    }

    @Override
    public boolean canStart() {
        return sanity > 0;
    }

    @Override
    public void afterStart() {
        sanity -= 5;
    }

    @Override
    public boolean tryDodge(Obstacle obs) {
        if (sanity == 0) {
            System.out.println(this + " has lost their sanity.");
            return false;
        }

        sanity -= obs.getMentalToll();
        int roll = new Random().nextInt(101);
        roll += 20;
        return roll >= 50;
    }

    @Override
    public String toString() {
        return "(Human) " + name + " (" + compatibility + " compatibility) (" + sanity + " sanity)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol4/HumanPilotP.java" startline="1" endline="38" pcid="162">
import java.util.Random;

public class HumanPilot extends Pilot {
    private int sanity = 100;

    public HumanPilot(String name, int compatibility) {
        super(name, compatibility);
    }

    @Override
    public boolean canStart() {
        return sanity > 0;
    }

    @Override
    public void afterStart() {
        sanity -= 5;
    }

    @Override
    public boolean tryDodge(Obstacle obs) {
        if (sanity == 0) {
            System.out.println(this + " has lost their sanity.");
            return false;
        }

        sanity -= obs.getMentalToll();
        int roll = new Random().nextInt(101);
        roll += 20;
        return roll >= 50;
    }

    @Override
    public String toString() {
        return "(Human) " + name + " (" + compatibility + " compatibility) (" + sanity + " sanity)";
    }
}

</source>
</class>

<class classid="14" nclones="3" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol3/ObjectObstacleP.java" startline="1" endline="12" pcid="156">
public class ObjectObstacle extends Obstacle {
    @Override
    public int getMentalToll() {
        return 0;
    }

    @Override
    public String toString() {
        return "Object Obstacle (0)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol5/ObjectObstacleP.java" startline="1" endline="12" pcid="172">
public class ObjectObstacle extends Obstacle {
    @Override
    public int getMentalToll() {
        return 0;
    }

    @Override
    public String toString() {
        return "Object Obstacle (0)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/chatgpt/sol4/ObjectObstacleP.java" startline="1" endline="12" pcid="164">
public class ObjectObstacle extends Obstacle {
    @Override
    public int getMentalToll() {
        return 0;
    }

    @Override
    public String toString() {
        return "Object Obstacle (0)";
    }
}

</source>
</class>

<class classid="15" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/copilot/sol1/LauncherP.java" startline="1" endline="32" pcid="179">
import java.util.Scanner;

public class Launcher {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        EvaUnit<HumanPilot> evaUnit01 = new EvaUnit<>(1, 80);
        EvaUnit<DummyPilot> evaUnit02 = new EvaUnit<>(2, 70);

        HumanPilot shinji = new HumanPilot("Shinji", 85);
        DummyPilot dummy = new DummyPilot("Dummy", 75);

        evaUnit01.setPilot(shinji);
        evaUnit02.setPilot(dummy);

        System.out.println("Starting Eva Units...");
        evaUnit01.start();
        evaUnit02.start();

        Obstacle objectObstacle = new ObjectObstacle();
        Obstacle angelObstacle = new AngelObstacle(30);

        System.out.println("Maneuvering Eva Units...");
        evaUnit01.maneuver(objectObstacle);
        evaUnit01.maneuver(angelObstacle);
        evaUnit02.maneuver(objectObstacle);
        evaUnit02.maneuver(angelObstacle);

        scanner.close();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/copilot/sol2/LauncherP.java" startline="1" endline="32" pcid="187">
import java.util.Scanner;

public class Launcher {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        EvaUnit<HumanPilot> evaUnit01 = new EvaUnit<>(1, 80);
        EvaUnit<DummyPilot> evaUnit02 = new EvaUnit<>(2, 70);

        HumanPilot shinji = new HumanPilot("Shinji", 85);
        DummyPilot dummy = new DummyPilot("Dummy", 75);

        evaUnit01.setPilot(shinji);
        evaUnit02.setPilot(dummy);

        System.out.println("Starting Eva Units...");
        evaUnit01.start();
        evaUnit02.start();

        Obstacle objectObstacle = new ObjectObstacle();
        Obstacle angelObstacle = new AngelObstacle(30);

        System.out.println("Maneuvering Eva Units...");
        evaUnit01.maneuver(objectObstacle);
        evaUnit01.maneuver(angelObstacle);
        evaUnit02.maneuver(objectObstacle);
        evaUnit02.maneuver(angelObstacle);

        scanner.close();
    }
}

</source>
</class>

<class classid="16" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/copilot/sol1/ObstacleP.java" startline="1" endline="17" pcid="181">
public abstract class Obstacle {
    private int mentalToll;

    public Obstacle(int mentalToll) {
        this.mentalToll = mentalToll;
    }

    public int getMentalToll() {
        return mentalToll;
    }

    @Override
    public String toString() {
        return "Obstacle (Mental Toll: " + mentalToll + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/copilot/sol2/ObstacleP.java" startline="1" endline="17" pcid="189">
public abstract class Obstacle {
    private int mentalToll;

    public Obstacle(int mentalToll) {
        this.mentalToll = mentalToll;
    }

    public int getMentalToll() {
        return mentalToll;
    }

    @Override
    public String toString() {
        return "Obstacle (Mental Toll: " + mentalToll + ")";
    }
}

</source>
</class>

<class classid="17" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol1/AngelObstacleP.java" startline="1" endline="14" pcid="247">
import java.util.Random;

public class AngelObstacle extends Obstacle {
    private final Random random = new Random();

    public AngelObstacle(String name) {
        super(name, new Random().nextInt(101));
    }

    public AngelObstacle(String name, int mentalToll) {
        super(name, mentalToll);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol2/AngelObstacleP.java" startline="1" endline="14" pcid="255">
import java.util.Random;

public class AngelObstacle extends Obstacle {
    private final Random random = new Random();

    public AngelObstacle(String name) {
        super(name, new Random().nextInt(101));
    }

    public AngelObstacle(String name, int mentalToll) {
        super(name, mentalToll);
    }
}

</source>
</class>

<class classid="18" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol1/ObstacleP.java" startline="1" endline="21" pcid="253">
public abstract class Obstacle {
    private String name;
    private int mentalToll;

    public Obstacle(String name, int mentalToll) {
        if (mentalToll < 0 || mentalToll > 100) {
            throw new IllegalArgumentException("Mental toll must be between 0 and 100 (inclusive).");
        }
        this.name = name;
        this.mentalToll = mentalToll;
    }

    public String getName() {
        return name;
    }

    public int getMentalToll() {
        return mentalToll;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol2/ObstacleP.java" startline="1" endline="21" pcid="261">
public abstract class Obstacle {
    private String name;
    private int mentalToll;

    public Obstacle(String name, int mentalToll) {
        if (mentalToll < 0 || mentalToll > 100) {
            throw new IllegalArgumentException("Mental toll must be between 0 and 100 (inclusive).");
        }
        this.name = name;
        this.mentalToll = mentalToll;
    }

    public String getName() {
        return name;
    }

    public int getMentalToll() {
        return mentalToll;
    }
}

</source>
</class>

<class classid="19" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol1/PilotP.java" startline="1" endline="27" pcid="254">
import java.util.Random;

public abstract class Pilot {
    private String name;
    private int compatibility;

    public Pilot(String name, int compatibility) {
        if (compatibility < 0 || compatibility > 100) {
            throw new IllegalArgumentException("Compatibility must be between 0 and 100 (inclusive).");
        }
        this.name = name;
        this.compatibility = compatibility;
    }

    public String getName() {
        return name;
    }

    public int getCompatibility() {
        return compatibility;
    }

    protected void reduceCompatibility(int amount) {
        this.compatibility = Math.max(0, this.compatibility - amount);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 2/gemini/sol2/PilotP.java" startline="1" endline="27" pcid="262">
import java.util.Random;

public abstract class Pilot {
    private String name;
    private int compatibility;

    public Pilot(String name, int compatibility) {
        if (compatibility < 0 || compatibility > 100) {
            throw new IllegalArgumentException("Compatibility must be between 0 and 100 (inclusive).");
        }
        this.name = name;
        this.compatibility = compatibility;
    }

    public String getName() {
        return name;
    }

    public int getCompatibility() {
        return compatibility;
    }

    protected void reduceCompatibility(int amount) {
        this.compatibility = Math.max(0, this.compatibility - amount);
    }
}

</source>
</class>

<class classid="20" nclones="15" nlines="49" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol1/DiskP.java" startline="1" endline="59" pcid="282">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol5/DiskP.java" startline="1" endline="59" pcid="451">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol4/DiskP.java" startline="1" endline="59" pcid="309">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol3/DiskP.java" startline="1" endline="59" pcid="431">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol3/DiskP.java" startline="1" endline="59" pcid="300">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol2/DiskP.java" startline="1" endline="59" pcid="371">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol4/DiskP.java" startline="1" endline="59" pcid="390">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol5/DiskP.java" startline="1" endline="59" pcid="400">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol1/DiskP.java" startline="1" endline="59" pcid="362">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol2/DiskP.java" startline="1" endline="59" pcid="291">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol2/DiskP.java" startline="1" endline="59" pcid="419">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol5/DiskP.java" startline="1" endline="59" pcid="350">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol3/DiskP.java" startline="1" endline="59" pcid="334">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol1/DiskP.java" startline="1" endline="59" pcid="410">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol3/DiskP.java" startline="1" endline="59" pcid="381">
import java.util.ArrayList;
import java.util.List;

public class Disk {
    private int maximumSize;
    private final User user;
    private List<Software> installedSoftware;
    private OperatingSystem operatingSystem;

    public Disk(int maximumSize, User user, OperatingSystem operatingSystem) {
        this.maximumSize = Math.max(1, Math.min(1024, maximumSize));
        this.user = user;
        installedSoftware = new ArrayList<>();
        this.operatingSystem = operatingSystem;
    }

    public int getMaximumSize() {
        return maximumSize;
    }

    public int getAvailableSize() {
        int installedSize = 0;
        for (Software software : installedSoftware) {
            installedSize += software.getSize();
        }
        return maximumSize - installedSize;
    }

    public OperatingSystem getOperatingSystem() {
        return operatingSystem;
    }

    private boolean isInstalled(Software software) {
        return installedSoftware.contains(software);
    }

    public InstallStatus install(Software software) {
        if (!isInstalled(software)) {
            if (getAvailableSize() - software.getSize() >= 0) {
                installedSoftware.add(software);
                return InstallStatus.SUCCESS;
            } else {
                return InstallStatus.INSUFFICIENTSPACE;
            }
        }
        return InstallStatus.ALREADYINSTALLED;

    }

    public User getUser() {
        return user;
    }

    @Override
    public String toString() {
        return "Disk (" + getAvailableSize() + "GB available / " + maximumSize + "GB capacity) - " + user;
    }
}

</source>
</class>

<class classid="21" nclones="15" nlines="49" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol1/SoftwareP.java" startline="1" endline="61" pcid="287">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol1/SoftwareP.java" startline="1" endline="61" pcid="416">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol5/SoftwareP.java" startline="1" endline="61" pcid="407">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol1/SoftwareP.java" startline="1" endline="61" pcid="367">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol3/SoftwareP.java" startline="1" endline="61" pcid="341">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol5/Software copyP.java" startline="1" endline="61" pcid="461">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol4/SoftwareP.java" startline="1" endline="61" pcid="314">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol2/SoftwareP.java" startline="1" endline="61" pcid="377">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol3/SoftwareP.java" startline="1" endline="61" pcid="305">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol2/SoftwareP.java" startline="1" endline="61" pcid="427">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol4/SoftwareP.java" startline="1" endline="61" pcid="396">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol2/SoftwareP.java" startline="1" endline="61" pcid="296">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol3/SoftwareP.java" startline="1" endline="61" pcid="440">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol3/SoftwareP.java" startline="1" endline="61" pcid="386">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol5/SoftwareP.java" startline="1" endline="61" pcid="358">
public abstract class Software {
    private String name;
    private int size;

    public Software(String name, int size) {
        this.name = name;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public void install(Disk disk) throws Exception {
        switch (disk.install(this)) {
        case ALREADYINSTALLED:
            System.out.println("Can't install " + name + " to " + disk + ": already installed.");
            break;
        case INSUFFICIENTSPACE:
            System.out.println("Can't install " + this + " to " + disk + ": insufficient space.");
            break;
        case SUCCESS:
            System.out.println("Installed " + this + " to " + disk);
        }
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Software other = (Software) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return name + " (" + size + "GB)";
    }
}

</source>
</class>

<class classid="22" nclones="15" nlines="43" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol1/UserP.java" startline="1" endline="56" pcid="290">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol3/UserP.java" startline="1" endline="56" pcid="343">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol3/UserP.java" startline="1" endline="56" pcid="443">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol5/UserP.java" startline="1" endline="56" pcid="409">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol1/UserP.java" startline="1" endline="56" pcid="418">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol3/UserP.java" startline="1" endline="56" pcid="389">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol5/UserP.java" startline="1" endline="56" pcid="464">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol2/UserP.java" startline="1" endline="56" pcid="380">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol4/UserP.java" startline="1" endline="56" pcid="399">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol3/UserP.java" startline="1" endline="56" pcid="308">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol4/UserP.java" startline="1" endline="56" pcid="317">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol2/UserP.java" startline="1" endline="56" pcid="299">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol5/UserP.java" startline="1" endline="56" pcid="361">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/deepseek/sol1/UserP.java" startline="1" endline="56" pcid="370">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol2/UserP.java" startline="1" endline="56" pcid="430">
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class User {
    private String name;
    private List<UUID> ownedGameLicenses;

    public User(String name) {
        this.name = name;
        ownedGameLicenses = new ArrayList<>();
    }

    public boolean ownsGameLicense(UUID license) {
        return ownedGameLicenses.contains(license);
    }

    public void addGameLicense(UUID license) {
        if (!ownsGameLicense(license)) {
            ownedGameLicenses.add(license);
            System.out.println(this + " now owns the license " + license);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
</class>

<class classid="23" nclones="2" nlines="12" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol3/ToolP.java" startline="1" endline="15" pcid="307">
public class Tool extends Software {

    public Tool(String name) {
        super(name);
    }

    @Override
    public InstallStatus install(User user, Disk disk) throws ToolInstallException {
        if (disk.getOperatingSystem() == OperatingSystem.MACOS) {
            throw new ToolInstallException(this, disk);
        }
        return disk.installSoftware(this);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/chatgpt/sol4/ToolP.java" startline="1" endline="15" pcid="316">
public class Tool extends Software {

    public Tool(String name) {
        super(name);
    }

    @Override
    public InstallStatus install(User user, Disk disk) throws ToolInstallException {
        if (disk.getOperatingSystem() == OperatingSystem.MACOS) {
            throw new ToolInstallException(this, disk);
        }
        return disk.installSoftware(this);
    }
}

</source>
</class>

<class classid="24" nclones="4" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol1/LicenseExceptionP.java" startline="1" endline="19" pcid="323">
public class LicenseException extends Exception {
    private Game game;
    private User user;

    public LicenseException(Game game, User user) {
        super("User " + user.getName() + " does not own the license for game " + game.getName());
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol3/LicenseExceptionP.java" startline="1" endline="19" pcid="337">
public class LicenseException extends Exception {
    private Game game;
    private User user;

    public LicenseException(Game game, User user) {
        super("User " + user.getName() + " does not own the license for game " + game.getName());
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol4/LicenseExceptionP.java" startline="1" endline="19" pcid="345">
public class LicenseException extends Exception {
    private Game game;
    private User user;

    public LicenseException(Game game, User user) {
        super("User " + user.getName() + " does not own the license for game " + game.getName());
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol5/LicenseExceptionP.java" startline="1" endline="19" pcid="355">
public class LicenseException extends Exception {
    private Game game;
    private User user;

    public LicenseException(Game game, User user) {
        super("User " + user.getName() + " does not own the license for game " + game.getName());
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
</class>

<class classid="25" nclones="4" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol1/OperatingSystemExceptionP.java" startline="1" endline="19" pcid="325">
public class OperatingSystemException extends Exception {
    private Tool tool;
    private Disk disk;

    public OperatingSystemException(Tool tool, Disk disk) {
        super("Tool " + tool.getName() + " cannot be installed on disk with OS " + disk.getOperatingSystem());
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol5/OperatingSystemExceptionP.java" startline="1" endline="19" pcid="356">
public class OperatingSystemException extends Exception {
    private Tool tool;
    private Disk disk;

    public OperatingSystemException(Tool tool, Disk disk) {
        super("Tool " + tool.getName() + " cannot be installed on disk with OS " + disk.getOperatingSystem());
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol4/OperatingSystemExceptionP.java" startline="1" endline="19" pcid="347">
public class OperatingSystemException extends Exception {
    private Tool tool;
    private Disk disk;

    public OperatingSystemException(Tool tool, Disk disk) {
        super("Tool " + tool.getName() + " cannot be installed on disk with OS " + disk.getOperatingSystem());
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/copilot/sol3/OperatingSystemExceptionP.java" startline="1" endline="19" pcid="339">
public class OperatingSystemException extends Exception {
    private Tool tool;
    private Disk disk;

    public OperatingSystemException(Tool tool, Disk disk) {
        super("Tool " + tool.getName() + " cannot be installed on disk with OS " + disk.getOperatingSystem());
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
</class>

<class classid="26" nclones="5" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol1/GameLicenseExceptionP.java" startline="1" endline="19" pcid="411">
public class GameLicenseException extends InstallationException {
    private Game game;
    private User user;

    public GameLicenseException(String message, Game game, User user) {
        super(message);
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol3/GameLicenseExceptionP.java" startline="1" endline="19" pcid="432">
public class GameLicenseException extends InstallationException {
    private Game game;
    private User user;

    public GameLicenseException(String message, Game game, User user) {
        super(message);
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol4/GameLicenseExceptionP.java" startline="1" endline="19" pcid="445">
public class GameLicenseException extends InstallationException {
    private Game game;
    private User user;

    public GameLicenseException(String message, Game game, User user) {
        super(message);
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol5/GameLicenseExceptionP.java" startline="1" endline="19" pcid="452">
public class GameLicenseException extends InstallationException {
    private Game game;
    private User user;

    public GameLicenseException(String message, Game game, User user) {
        super(message);
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol2/GameLicenseExceptionP.java" startline="1" endline="19" pcid="420">
public class GameLicenseException extends InstallationException {
    private Game game;
    private User user;

    public GameLicenseException(String message, Game game, User user) {
        super(message);
        this.game = game;
        this.user = user;
    }

    public Game getGame() {
        return game;
    }

    public User getUser() {
        return user;
    }
}

</source>
</class>

<class classid="27" nclones="5" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol1/MacOSNotSupportedExceptionP.java" startline="1" endline="19" pcid="414">
public class MacOSNotSupportedException extends InstallationException {
    private Tool tool;
    private Disk disk;

    public MacOSNotSupportedException(String message, Tool tool, Disk disk) {
        super(message);
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol5/MacOSNotSupportedExceptionP.java" startline="1" endline="19" pcid="458">
public class MacOSNotSupportedException extends InstallationException {
    private Tool tool;
    private Disk disk;

    public MacOSNotSupportedException(String message, Tool tool, Disk disk) {
        super(message);
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol4/MacOSNotSupportedExceptionP.java" startline="1" endline="19" pcid="447">
public class MacOSNotSupportedException extends InstallationException {
    private Tool tool;
    private Disk disk;

    public MacOSNotSupportedException(String message, Tool tool, Disk disk) {
        super(message);
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol3/MacOSNotSupportedExceptionP.java" startline="1" endline="19" pcid="438">
public class MacOSNotSupportedException extends InstallationException {
    private Tool tool;
    private Disk disk;

    public MacOSNotSupportedException(String message, Tool tool, Disk disk) {
        super(message);
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab10/Ex. 3/gemini/sol2/MacOSNotSupportedExceptionP.java" startline="1" endline="19" pcid="424">
public class MacOSNotSupportedException extends InstallationException {
    private Tool tool;
    private Disk disk;

    public MacOSNotSupportedException(String message, Tool tool, Disk disk) {
        super(message);
        this.tool = tool;
        this.disk = disk;
    }

    public Tool getTool() {
        return tool;
    }

    public Disk getDisk() {
        return disk;
    }
}

</source>
</class>

<class classid="28" nclones="2" nlines="12" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 3/deepseek/sol2/SpeedLimitCheckP.java" startline="1" endline="17" pcid="567">
import java.util.Scanner;

public class SpeedLimitCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter road type ID (1: motorway, 2: ordinary, 3: town, 4: calmed): ");
        int roadTypeId = scanner.nextInt();

        System.out.print("Enter driver's speed: ");
        int speed = scanner.nextInt();

        SpeedLimitChecker checker = new SpeedLimitChecker();
        checker.checkSpeedLimit(roadTypeId, speed);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 3/deepseek/sol4/SpeedLimitCheckP.java" startline="1" endline="17" pcid="571">
import java.util.Scanner;

public class SpeedLimitCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter road type ID (1: motorway, 2: ordinary, 3: town, 4: calmed): ");
        int roadTypeId = scanner.nextInt();

        System.out.print("Enter driver's speed: ");
        int speed = scanner.nextInt();

        SpeedLimitChecker checker = new SpeedLimitChecker();
        checker.checkSpeedLimit(roadTypeId, speed);
    }
}

</source>
</class>

<class classid="29" nclones="2" nlines="26" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 5/chatgpt/sol4/SortWithoutNestedIfP.java" startline="1" endline="27" pcid="612">
import java.util.Scanner;

public class SortWithoutNestedIf {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter three integers:");
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();

        if (a > b) {
            int temp = a; a = b; b = temp;
        }

        if (b > c) {
            int temp = b; b = c; c = temp;
        }

        if (a > b) {
            int temp = a; a = b; b = temp;
        }

        System.out.println("Sorted: " + a + " " + b + " " + c);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 5/chatgpt/sol5/SortWithoutNestedIfP.java" startline="1" endline="24" pcid="614">
import java.util.Scanner;

public class SortWithoutNestedIf {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter three integers:");
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();

        if (a > b) {
            int temp = a; a = b; b = temp;
        }
        if (b > c) {
            int temp = b; b = c; c = temp;
        }
        if (a > b) {
            int temp = a; a = b; b = temp;
        }

        System.out.println("Sorted: " + a + " " + b + " " + c);
    }
}

</source>
</class>

<class classid="30" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 5/copilot/sol4/NonNestedSortingP.java" startline="1" endline="18" pcid="621">
import java.util.Scanner;
import java.util.Arrays;

public class NonNestedSorting {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter three integers:");
        int[] numbers = new int[3];
        numbers[0] = scanner.nextInt();
        numbers[1] = scanner.nextInt();
        numbers[2] = scanner.nextInt();

        Arrays.sort(numbers);

        System.out.println("Sorted order: " + numbers[0] + " " + numbers[1] + " " + numbers[2]);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 5/copilot/sol5/NonNestedSortingP.java" startline="1" endline="18" pcid="623">
import java.util.Scanner;
import java.util.Arrays;

public class NonNestedSorting {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter three integers:");
        int[] numbers = new int[3];
        numbers[0] = scanner.nextInt();
        numbers[1] = scanner.nextInt();
        numbers[2] = scanner.nextInt();

        Arrays.sort(numbers);

        System.out.println("Sorted order: " + numbers[0] + " " + numbers[1] + " " + numbers[2]);
    }
}

</source>
</class>

<class classid="31" nclones="2" nlines="53" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 6/copilot/sol4/TimeP.java" startline="1" endline="59" pcid="658">
public class Time {
    private int hours;
    private int minutes;
    private int seconds;
    private int format;
    private String period;

    public Time(int hours, int minutes, int seconds, int format, String period) {
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.format = format;
        this.period = period;
    }

    public int getHours() {
        return hours;
    }

    public int getMinutes() {
        return minutes;
    }

    public int getSeconds() {
        return seconds;
    }

    public int getFormat() {
        return format;
    }

    public String getPeriod() {
        return period;
    }

    public void advanceByFiveSeconds() {
        seconds += 5;
        if (seconds >= 60) {
            seconds -= 60;
            minutes++;
            if (minutes >= 60) {
                minutes -= 60;
                hours++;
                if (format == 12) {
                    if (hours > 12) {
                        hours -= 12;
                    } else if (hours == 12) {
                        period = period.equals("AM") ? "PM" : "AM";
                    }
                } else {
                    if (hours >= 24) {
                        hours -= 24;
                    }
                }
            }
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 6/copilot/sol5/TimeP.java" startline="1" endline="59" pcid="661">
public class Time {
    private int hours;
    private int minutes;
    private int seconds;
    private int format;
    private String period;

    public Time(int hours, int minutes, int seconds, int format, String period) {
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.format = format;
        this.period = period;
    }

    public int getHours() {
        return hours;
    }

    public int getMinutes() {
        return minutes;
    }

    public int getSeconds() {
        return seconds;
    }

    public int getFormat() {
        return format;
    }

    public String getPeriod() {
        return period;
    }

    public void advanceByFiveSeconds() {
        seconds += 5;
        if (seconds >= 60) {
            seconds -= 60;
            minutes++;
            if (minutes >= 60) {
                minutes -= 60;
                hours++;
                if (format == 12) {
                    if (hours > 12) {
                        hours -= 12;
                    } else if (hours == 12) {
                        period = period.equals("AM") ? "PM" : "AM";
                    }
                } else {
                    if (hours >= 24) {
                        hours -= 24;
                    }
                }
            }
        }
    }
}

</source>
</class>

<class classid="32" nclones="3" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 7/chatgpt/sol5/PointP.java" startline="1" endline="18" pcid="681">
public class Point {
    private double x;
    private double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 7/copilot/sol4/PointP.java" startline="1" endline="18" pcid="688">
public class Point {
    private double x;
    private double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab2/Ex. 7/deepseek/sol4/PointP.java" startline="1" endline="18" pcid="698">
public class Point {
    private double x;
    private double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }
}

</source>
</class>

<class classid="33" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/copilot/sol1/NtoMP.java" startline="1" endline="17" pcid="780">
package exercise1;

import java.util.Scanner;

public class NtoM {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter n: ");
        int n = scanner.nextInt();
        System.out.print("Enter m: ");
        int m = scanner.nextInt();
        for (int i = n; i <= m; i++) {
            System.out.println(i);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/deepseek/sol1/NtoMP.java" startline="1" endline="18" pcid="797">
package exercise1;

import java.util.Scanner;

public class NtoM {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter n: ");
        int n = scanner.nextInt();
        System.out.print("Enter m: ");
        int m = scanner.nextInt();

        for (int i = n; i <= m; i++) {
            System.out.println(i);
        }
    }
}

</source>
</class>

<class classid="34" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/copilot/sol4/NtoMP.java" startline="1" endline="16" pcid="789">
import java.util.Scanner;

public class NtoM {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the starting number (n):");
        int n = scanner.nextInt();
        System.out.println("Enter the ending number (m):");
        int m = scanner.nextInt();

        for (int i = n; i <= m; i++) {
            System.out.println(i);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/copilot/sol5/NtoMP.java" startline="1" endline="16" pcid="793">
import java.util.Scanner;

public class NtoM {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the starting number (n):");
        int n = scanner.nextInt();
        System.out.println("Enter the ending number (m):");
        int m = scanner.nextInt();

        for (int i = n; i <= m; i++) {
            System.out.println(i);
        }
    }
}

</source>
</class>

<class classid="35" nclones="2" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/copilot/sol4/XtoYP.java" startline="1" endline="18" pcid="792">
import java.util.Scanner;

public class XtoY {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the starting decimal number (x):");
        double x = scanner.nextDouble();
        System.out.println("Enter the ending decimal number (y):");
        double y = scanner.nextDouble();
        System.out.println("Enter the step size (d):");
        double d = scanner.nextDouble();

        for (double i = x; i <= y; i += d) {
            System.out.println(i);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 1/copilot/sol5/XtoYP.java" startline="1" endline="18" pcid="796">
import java.util.Scanner;

public class XtoY {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the starting decimal number (x):");
        double x = scanner.nextDouble();
        System.out.println("Enter the ending decimal number (y):");
        double y = scanner.nextDouble();
        System.out.println("Enter the step size (d):");
        double d = scanner.nextDouble();

        for (double i = x; i <= y; i += d) {
            System.out.println(i);
        }
    }
}

</source>
</class>

<class classid="36" nclones="2" nlines="35" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 2/copilot/sol1/SumP.java" startline="1" endline="41" pcid="830">
package exercise2;

import java.util.Scanner;

public class Sum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n;
        do {
            System.out.print("Enter a positive integer: ");
            n = scanner.nextInt();
        } while (n <= 0);

        int sumFor = 0;
        for (int i = 1; i <= n; i++) {
            sumFor += i;
        }

        int sumWhile = 0;
        int i = 1;
        while (i <= n) {
            sumWhile += i;
            i++;
        }

        int sumDoWhile = 0;
        i = 1;
        do {
            sumDoWhile += i;
            i++;
        } while (i <= n);

        int formulaSum = n * (n + 1) / 2;

        System.out.println("Sum using for loop: " + sumFor);
        System.out.println("Sum using while loop: " + sumWhile);
        System.out.println("Sum using do-while loop: " + sumDoWhile);
        System.out.println("Sum using formula: " + formulaSum);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 2/deepseek/sol1/SumP.java" startline="1" endline="42" pcid="834">
package exercise2;

import java.util.Scanner;

public class Sum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n;

        do {
            System.out.print("Enter a positive integer: ");
            n = scanner.nextInt();
        } while (n <= 0);

        int sumFor = 0;
        for (int i = 1; i <= n; i++) {
            sumFor += i;
        }

        int sumWhile = 0;
        int i = 1;
        while (i <= n) {
            sumWhile += i;
            i++;
        }

        int sumDoWhile = 0;
        i = 1;
        do {
            sumDoWhile += i;
            i++;
        } while (i <= n);

        int formulaSum = n * (n + 1) / 2;

        System.out.println("Sum using for loop: " + sumFor);
        System.out.println("Sum using while loop: " + sumWhile);
        System.out.println("Sum using do-while loop: " + sumDoWhile);
        System.out.println("Sum using formula: " + formulaSum);
    }
}

</source>
</class>

<class classid="37" nclones="2" nlines="40" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 2/copilot/sol4/SumP.java" startline="1" endline="46" pcid="832">
import java.util.Scanner;

public class Sum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n;

        do {
            System.out.println("Enter a positive integer:");
            n = scanner.nextInt();
        } while (n <= 0);

        int sumFor = 0;
        for (int i = 1; i <= n; i++) {
            sumFor += i;
        }

        int sumWhile = 0;
        int i = 1;
        while (i <= n) {
            sumWhile += i;
            i++;
        }

        int sumDoWhile = 0;
        i = 1;
        do {
            sumDoWhile += i;
            i++;
        } while (i <= n);

        int sumFormula = n * (n + 1) / 2;

        System.out.println("Sum using for loop: " + sumFor);
        System.out.println("Sum using while loop: " + sumWhile);
        System.out.println("Sum using do-while loop: " + sumDoWhile);
        System.out.println("Sum using formula: " + sumFormula);

        if (sumFor == sumWhile && sumWhile == sumDoWhile && sumDoWhile == sumFormula) {
            System.out.println("All methods produce the same result.");
        } else {
            System.out.println("There is a discrepancy between the methods.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 2/copilot/sol5/SumP.java" startline="1" endline="46" pcid="833">
import java.util.Scanner;

public class Sum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n;

        do {
            System.out.println("Enter a positive integer:");
            n = scanner.nextInt();
        } while (n <= 0);

        int sumFor = 0;
        for (int i = 1; i <= n; i++) {
            sumFor += i;
        }

        int sumWhile = 0;
        int i = 1;
        while (i <= n) {
            sumWhile += i;
            i++;
        }

        int sumDoWhile = 0;
        i = 1;
        do {
            sumDoWhile += i;
            i++;
        } while (i <= n);

        int sumFormula = n * (n + 1) / 2;

        System.out.println("Sum using for loop: " + sumFor);
        System.out.println("Sum using while loop: " + sumWhile);
        System.out.println("Sum using do-while loop: " + sumDoWhile);
        System.out.println("Sum using formula: " + sumFormula);

        if (sumFor == sumWhile && sumWhile == sumDoWhile && sumDoWhile == sumFormula) {
            System.out.println("All methods produce the same result.");
        } else {
            System.out.println("There is a discrepancy between the methods.");
        }
    }
}

</source>
</class>

<class classid="38" nclones="2" nlines="35" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 3/copilot/sol4/StatisticsP.java" startline="1" endline="39" pcid="848">
import java.util.Scanner;

public class Statistics {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number;
        int sum = 0;
        int count = 0;
        int smallest = Integer.MAX_VALUE;
        int largest = Integer.MIN_VALUE;

        System.out.println("Enter a sequence of integers (0 to stop):");

        while (true) {
            number = scanner.nextInt();
            if (number == 0) {
                break;
            }
            sum += number;
            count++;
            if (number < smallest) {
                smallest = number;
            }
            if (number > largest) {
                largest = number;
            }
        }

        if (count > 0) {
            double average = (double) sum / count;
            System.out.println("Smallest number: " + smallest);
            System.out.println("Largest number: " + largest);
            System.out.println("Average of all numbers: " + average);
        } else {
            System.out.println("No numbers were entered.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 3/copilot/sol5/StatisticsP.java" startline="1" endline="39" pcid="849">
import java.util.Scanner;

public class Statistics {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number;
        int sum = 0;
        int count = 0;
        int smallest = Integer.MAX_VALUE;
        int largest = Integer.MIN_VALUE;

        System.out.println("Enter a sequence of integers (0 to stop):");

        while (true) {
            number = scanner.nextInt();
            if (number == 0) {
                break;
            }
            sum += number;
            count++;
            if (number < smallest) {
                smallest = number;
            }
            if (number > largest) {
                largest = number;
            }
        }

        if (count > 0) {
            double average = (double) sum / count;
            System.out.println("Smallest number: " + smallest);
            System.out.println("Largest number: " + largest);
            System.out.println("Average of all numbers: " + average);
        } else {
            System.out.println("No numbers were entered.");
        }
    }
}

</source>
</class>

<class classid="39" nclones="2" nlines="31" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/copilot/sol4/DivThreeCeptionP.java" startline="1" endline="35" pcid="867">
import java.util.Scanner;

public class DivThreeCeption {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a long value:");
        long number = scanner.nextLong();

        long sum = number;
        do {
            sum = sumDigits(sum);
        } while (sum >= 10);

        switch ((int) sum) {
            case 3:
            case 6:
            case 9:
                System.out.println("The sum of the digits is divisible by 3.");
                break;
            default:
                System.out.println("The sum of the digits is not divisible by 3.");
                break;
        }
    }

    private static long sumDigits(long number) {
        long sum = 0;
        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/copilot/sol5/DivThreeCeptionP.java" startline="1" endline="35" pcid="869">
import java.util.Scanner;

public class DivThreeCeption {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a long value:");
        long number = scanner.nextLong();

        long sum = number;
        do {
            sum = sumDigits(sum);
        } while (sum >= 10);

        switch ((int) sum) {
            case 3:
            case 6:
            case 9:
                System.out.println("The sum of the digits is divisible by 3.");
                break;
            default:
                System.out.println("The sum of the digits is not divisible by 3.");
                break;
        }
    }

    private static long sumDigits(long number) {
        long sum = 0;
        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }
        return sum;
    }
}

</source>
</class>

<class classid="40" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/copilot/sol4/DivThreeMoreDigitsP.java" startline="1" endline="22" pcid="868">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a long value:");
        long number = scanner.nextLong();

        long sum = 0;
        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }

        if (sum % 3 == 0) {
            System.out.println("The sum of the digits is divisible by 3.");
        } else {
            System.out.println("The sum of the digits is not divisible by 3.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/copilot/sol5/DivThreeMoreDigitsP.java" startline="1" endline="22" pcid="870">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a long value:");
        long number = scanner.nextLong();

        long sum = 0;
        while (number != 0) {
            sum += number % 10;
            number /= 10;
        }

        if (sum % 3 == 0) {
            System.out.println("The sum of the digits is divisible by 3.");
        } else {
            System.out.println("The sum of the digits is not divisible by 3.");
        }
    }
}

</source>
</class>

<class classid="41" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/deepseek/sol3/DivThreeMoreDigitsP.java" startline="1" endline="23" pcid="874">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        long number = scanner.nextLong();

        long sum = 0;
        long temp = Math.abs(number);

        while (temp > 0) {
            sum += temp % 10;
            temp /= 10;
        }

        boolean divisible = (sum % 3 == 0);
        System.out.println(number + " is " + (divisible ? "" : "not ") + "divisible by 3");

        scanner.close();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 4/deepseek/sol5/DivThreeMoreDigitsP.java" startline="1" endline="22" pcid="878">
import java.util.Scanner;

public class DivThreeMoreDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        long number = scanner.nextLong();

        long sum = 0;
        long temp = Math.abs(number);

        while (temp > 0) {
            sum += temp % 10;
            temp /= 10;
        }

        boolean divisible = (sum % 3 == 0);
        System.out.println(number + " is " + (divisible ? "" : "not ") + "divisible by 3");
        scanner.close();
    }
}

</source>
</class>

<class classid="42" nclones="3" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 5/chatgpt/sol3/CoinsP.java" startline="1" endline="21" pcid="884">
public class Coins {
    public static void main(String[] args) {
        int totalValue = 100;

        int count = 0;

        for (int twenty = 0; twenty <= totalValue / 20; twenty++) {
            for (int ten = 0; ten <= (totalValue - twenty * 20) / 10; ten++) {
                for (int five = 0; five <= (totalValue - twenty * 20 - ten * 10) / 5; five++) {
                    if (twenty * 20 + ten * 10 + five * 5 == totalValue) {
                        System.out.println("20c: " + twenty + ", 10c: " + ten + ", 5c: " + five);
                        count++;
                    }
                }
            }
        }

        System.out.println("Total number of possibilities: " + count);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 5/chatgpt/sol5/CoinsP.java" startline="1" endline="21" pcid="886">
public class Coins {
    public static void main(String[] args) {
        int totalValue = 100;

        int count = 0;

        for (int twenty = 0; twenty <= totalValue / 20; twenty++) {
            for (int ten = 0; ten <= (totalValue - twenty * 20) / 10; ten++) {
                for (int five = 0; five <= (totalValue - twenty * 20 - ten * 10) / 5; five++) {
                    if (twenty * 20 + ten * 10 + five * 5 == totalValue) {
                        System.out.println("20c: " + twenty + ", 10c: " + ten + ", 5c: " + five);
                        count++;
                    }
                }
            }
        }

        System.out.println("Total number of possibilities: " + count);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 5/chatgpt/sol4/CoinsP.java" startline="1" endline="21" pcid="885">
public class Coins {
    public static void main(String[] args) {
        int totalValue = 100;

        int count = 0;

        for (int twenty = 0; twenty <= totalValue / 20; twenty++) {
            for (int ten = 0; ten <= (totalValue - twenty * 20) / 10; ten++) {
                for (int five = 0; five <= (totalValue - twenty * 20 - ten * 10) / 5; five++) {
                    if (twenty * 20 + ten * 10 + five * 5 == totalValue) {
                        System.out.println("20c: " + twenty + ", 10c: " + ten + ", 5c: " + five);
                        count++;
                    }
                }
            }
        }

        System.out.println("Total number of possibilities: " + count);
    }
}

</source>
</class>

<class classid="43" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 5/copilot/sol4/CoinsP.java" startline="1" endline="22" pcid="889">
public class Coins {
    public static void main(String[] args) {
        int totalCents = 100;
        int count = 0;

        System.out.println("Possible decompositions of 1 euro into 20, 10, and 5 cent coins:");

        for (int twentyCent = 0; twentyCent <= totalCents / 20; twentyCent++) {
            for (int tenCent = 0; tenCent <= (totalCents - twentyCent * 20) / 10; tenCent++) {
                for (int fiveCent = 0; fiveCent <= (totalCents - twentyCent * 20 - tenCent * 10) / 5; fiveCent++) {
                    if (twentyCent * 20 + tenCent * 10 + fiveCent * 5 == totalCents) {
                        System.out.println(twentyCent + " x 20 cent, " + tenCent + " x 10 cent, " + fiveCent + " x 5 cent");
                        count++;
                    }
                }
            }
        }

        System.out.println("Total number of possibilities: " + count);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 5/copilot/sol5/CoinsP.java" startline="1" endline="22" pcid="890">
public class Coins {
    public static void main(String[] args) {
        int totalCents = 100;
        int count = 0;

        System.out.println("Possible decompositions of 1 euro into 20, 10, and 5 cent coins:");

        for (int twentyCent = 0; twentyCent <= totalCents / 20; twentyCent++) {
            for (int tenCent = 0; tenCent <= (totalCents - twentyCent * 20) / 10; tenCent++) {
                for (int fiveCent = 0; fiveCent <= (totalCents - twentyCent * 20 - tenCent * 10) / 5; fiveCent++) {
                    if (twentyCent * 20 + tenCent * 10 + fiveCent * 5 == totalCents) {
                        System.out.println(twentyCent + " x 20 cent, " + tenCent + " x 10 cent, " + fiveCent + " x 5 cent");
                        count++;
                    }
                }
            }
        }

        System.out.println("Total number of possibilities: " + count);
    }
}

</source>
</class>

<class classid="44" nclones="2" nlines="29" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 6/chatgpt/sol4/GuessItP.java" startline="1" endline="39" pcid="901">
import java.util.Random;
import java.util.Scanner;

public class GuessIt {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Random random = new Random();

        int targetNumber = random.nextInt(100) + 1;

        int userGuess = 0;

        int attempts = 0;

        System.out.println("Welcome to the Guessing Game!");
        System.out.println("I have selected a number between 1 and 100. Try to guess it.");

        while (userGuess != targetNumber) {
            System.out.print("Enter your guess: ");
            userGuess = scanner.nextInt();

            attempts++;

            if (userGuess < targetNumber) {
                System.out.println("Your guess is too low. Try again.");
            } else if (userGuess > targetNumber) {
                System.out.println("Your guess is too high. Try again.");
            } else {
                System.out.println("Congratulations! You've guessed the correct number.");
            }
        }

        System.out.println("It took you " + attempts + " attempts to guess the correct number.");

        scanner.close();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 6/chatgpt/sol5/GuessItP.java" startline="1" endline="39" pcid="902">
import java.util.Random;
import java.util.Scanner;

public class GuessIt {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Random random = new Random();

        int targetNumber = random.nextInt(100) + 1;

        int userGuess = 0;

        int attempts = 0;

        System.out.println("Welcome to the Guessing Game!");
        System.out.println("I have selected a number between 1 and 100. Try to guess it.");

        while (userGuess != targetNumber) {
            System.out.print("Enter your guess: ");
            userGuess = scanner.nextInt();

            attempts++;

            if (userGuess < targetNumber) {
                System.out.println("Your guess is too low. Try again.");
            } else if (userGuess > targetNumber) {
                System.out.println("Your guess is too high. Try again.");
            } else {
                System.out.println("Congratulations! You've guessed the correct number.");
            }
        }

        System.out.println("It took you " + attempts + " attempts to guess the correct number.");

        scanner.close();
    }
}

</source>
</class>

<class classid="45" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 6/copilot/sol4/GuessItP.java" startline="1" endline="32" pcid="906">
import java.util.Scanner;
import java.util.Random;

public class GuessIt {
    public static void main(String[] args) {
        Random rand = new Random();
        int numberToGuess = rand.nextInt(100) + 1;
        int numberOfTries = 0;
        boolean hasGuessedCorrectly = false;
        Scanner input = new Scanner(System.in);

        System.out.println("Guess a number between 1 and 100:");

        while (!hasGuessedCorrectly) {
            int guess = input.nextInt();
            numberOfTries++;

            if (guess < numberToGuess) {
                System.out.println("Your guess is too low.");
            } else if (guess > numberToGuess) {
                System.out.println("Your guess is too high.");
            } else {
                hasGuessedCorrectly = true;
                System.out.println("Congratulations! You've guessed the right number.");
                System.out.println("It took you " + numberOfTries + " tries.");
            }
        }

        input.close();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 6/copilot/sol5/GuessItP.java" startline="1" endline="32" pcid="907">
import java.util.Scanner;
import java.util.Random;

public class GuessIt {
    public static void main(String[] args) {
        Random rand = new Random();
        int numberToGuess = rand.nextInt(100) + 1;
        int numberOfTries = 0;
        boolean hasGuessedCorrectly = false;
        Scanner input = new Scanner(System.in);

        System.out.println("Guess a number between 1 and 100:");

        while (!hasGuessedCorrectly) {
            int guess = input.nextInt();
            numberOfTries++;

            if (guess < numberToGuess) {
                System.out.println("Your guess is too low.");
            } else if (guess > numberToGuess) {
                System.out.println("Your guess is too high.");
            } else {
                hasGuessedCorrectly = true;
                System.out.println("Congratulations! You've guessed the right number.");
                System.out.println("It took you " + numberOfTries + " tries.");
            }
        }

        input.close();
    }
}

</source>
</class>

<class classid="46" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 7/copilot/sol4/KellacciP.java" startline="1" endline="30" pcid="923">
import java.util.Scanner;

public class Kellacci {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the value of n: ");
        int n = input.nextInt();

        if (n <= 0) {
            System.out.println("Please enter a positive integer.");
            return;
        }

        int[] kellacci = new int[n];
        kellacci[0] = 1;
        if (n > 1) {
            kellacci[1] = 1;
        }

        for (int i = 2; i < n; i++) {
            kellacci[i] = (kellacci[i - 1] - 1) + (kellacci[i - 2] * 2);
        }

        System.out.println("Kellacci sequence up to term " + n + ":");
        for (int i = 0; i < n; i++) {
            System.out.print(kellacci[i] + " ");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 7/copilot/sol5/KellacciP.java" startline="1" endline="30" pcid="924">
import java.util.Scanner;

public class Kellacci {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the value of n: ");
        int n = input.nextInt();

        if (n <= 0) {
            System.out.println("Please enter a positive integer.");
            return;
        }

        int[] kellacci = new int[n];
        kellacci[0] = 1;
        if (n > 1) {
            kellacci[1] = 1;
        }

        for (int i = 2; i < n; i++) {
            kellacci[i] = (kellacci[i - 1] - 1) + (kellacci[i - 2] * 2);
        }

        System.out.println("Kellacci sequence up to term " + n + ":");
        for (int i = 0; i < n; i++) {
            System.out.print(kellacci[i] + " ");
        }
    }
}

</source>
</class>

<class classid="47" nclones="3" nlines="12" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 8/copilot/sol3/VariablesExtractedP.java" startline="1" endline="16" pcid="940">
public class VariablesExtracted {

    public static void main(String[] args) {
        String platform = "macOS Sierra";
        String browser = "Safari";
        double zoomLevel = 1.5;

        boolean isMacPlatform = platform.toUpperCase().indexOf("MAC") > -1;
        boolean isSafariBrowser = browser.equals("Safari");
        boolean isZoomLevelHighEnough = zoomLevel >= 1.5;

        if (isMacPlatform && isSafariBrowser && isZoomLevelHighEnough) {
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 8/copilot/sol4/VariablesExtractedP.java" startline="1" endline="16" pcid="941">
public class VariablesExtracted {

    public static void main(String[] args) {
        String platform = "macOS Sierra";
        String browser = "Safari";
        double zoomLevel = 1.5;

        boolean isMacPlatform = platform.toUpperCase().indexOf("MAC") > -1;
        boolean isSafariBrowser = browser.equals("Safari");
        boolean isZoomLevelHighEnough = zoomLevel >= 1.5;

        if (isMacPlatform && isSafariBrowser && isZoomLevelHighEnough) {
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab3/Ex. 8/copilot/sol5/VariablesExtractedP.java" startline="1" endline="16" pcid="942">
public class VariablesExtracted {

    public static void main(String[] args) {
        String platform = "macOS Sierra";
        String browser = "Safari";
        double zoomLevel = 1.5;

        boolean isMacPlatform = platform.toUpperCase().indexOf("MAC") > -1;
        boolean isSafariBrowser = browser.equals("Safari");
        boolean isZoomLevelHighEnough = zoomLevel >= 1.5;

        if (isMacPlatform && isSafariBrowser && isZoomLevelHighEnough) {
        }
    }
}

</source>
</class>

<class classid="48" nclones="15" nlines="51" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/chatgpt/sol2/BeveragesP.java" startline="1" endline="53" pcid="954">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/deepseek/sol3/BeveragesP.java" startline="1" endline="53" pcid="970">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/deepseek/sol4/BeveragesP.java" startline="1" endline="53" pcid="972">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/chatgpt/sol5/BeveragesP.java" startline="1" endline="53" pcid="960">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/copilot/sol1/BeveragesP.java" startline="1" endline="53" pcid="961">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/deepseek/sol2/BeveragesP.java" startline="1" endline="53" pcid="969">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/deepseek/sol1/BeveragesP.java" startline="1" endline="53" pcid="967">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/chatgpt/sol4/BeveragesP.java" startline="1" endline="53" pcid="958">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/copilot/sol5/BeveragesP.java" startline="1" endline="53" pcid="965">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/chatgpt/sol3/BeveragesP.java" startline="1" endline="53" pcid="956">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/copilot/sol4/BeveragesP.java" startline="1" endline="53" pcid="963">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/copilot/sol2/BeveragesP.java" startline="1" endline="53" pcid="962">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/deepseek/sol5/BeveragesP.java" startline="1" endline="53" pcid="974">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/gemini/sol1/BeveragesP.java" startline="1" endline="53" pcid="975">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 1/gemini/sol2/BeveragesP.java" startline="1" endline="53" pcid="977">
class Beverages {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Please enter the selected menu id:");
        int menu = scanner.nextInt();

        System.out.print("Please enter whether the client is an adult: (true/false)");
        boolean adult = scanner.nextBoolean();

        scanner.close();

        if ((menu < 1) || (menu > 5)) {
            System.out.println("The restaurant does not have such a menu!");
        } else {
            System.out.print("The restaurant suggests: ");
        }

        if (menu == 1) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        } else if ((menu <= 2) && (menu >= 2)) {
            if (adult) {
                System.out.println("Red wine");
            } else {
                System.out.println("Cola");
            }
        }

        if (menu == 3) {
            if (adult) {
                System.out.println("White wine");
            } else {
                System.out.println("Lemonade");
            }
        } else if (menu + 1 == 5) {
            if (!adult) {
                System.out.println("Still Water");
            } else {
                System.out.println("Port wine");
            }
        }

        if (5 == menu) {
            System.out.println("The restaurant suggests: Sparkling Water");
        }
    }

}

</source>
</class>

<class classid="49" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 3/copilot/sol3/PalindromeP.java" startline="1" endline="37" pcid="998">
import java.util.Scanner;

public class Palindrome {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder inputSequence = new StringBuilder();

        System.out.println("Enter characters one-by-one. Enter '0' to finish:");

        while (true) {
            char ch = scanner.next().charAt(0);
            if (ch == '0') {
                break;
            }
            inputSequence.append(ch);
        }

        scanner.close();

        String input = inputSequence.toString();
        boolean isPalindrome = true;

        for (int i = 0; i < input.length() / 2; i++) {
            if (input.charAt(i) != input.charAt(input.length() - 1 - i)) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome) {
            System.out.println("The input sequence is a palindrome.");
        } else {
            System.out.println("The input sequence is not a palindrome.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 3/copilot/sol4/PalindromeP.java" startline="1" endline="37" pcid="1000">
import java.util.Scanner;

public class Palindrome {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder inputSequence = new StringBuilder();

        System.out.println("Enter characters one-by-one. Enter '0' to finish:");

        while (true) {
            char ch = scanner.next().charAt(0);
            if (ch == '0') {
                break;
            }
            inputSequence.append(ch);
        }

        scanner.close();

        String input = inputSequence.toString();
        boolean isPalindrome = true;

        for (int i = 0; i < input.length() / 2; i++) {
            if (input.charAt(i) != input.charAt(input.length() - 1 - i)) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome) {
            System.out.println("The input sequence is a palindrome.");
        } else {
            System.out.println("The input sequence is not a palindrome.");
        }
    }
}

</source>
</class>

<class classid="50" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 3/copilot/sol4/PalindromeCaseInsensitiveP.java" startline="1" endline="37" pcid="999">
import java.util.Scanner;

public class PalindromeCaseInsensitive {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder inputSequence = new StringBuilder();

        System.out.println("Enter characters one-by-one. Enter '0' to finish:");

        while (true) {
            char ch = scanner.next().charAt(0);
            if (ch == '0') {
                break;
            }
            inputSequence.append(ch);
        }

        scanner.close();

        String input = inputSequence.toString().toLowerCase();
        boolean isPalindrome = true;

        for (int i = 0; i < input.length() / 2; i++) {
            if (input.charAt(i) != input.charAt(input.length() - 1 - i)) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome) {
            System.out.println("The input sequence is a palindrome.");
        } else {
            System.out.println("The input sequence is not a palindrome.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 3/copilot/sol5/PalindromeCaseInsensitiveP.java" startline="1" endline="37" pcid="1001">
import java.util.Scanner;

public class PalindromeCaseInsensitive {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder inputSequence = new StringBuilder();

        System.out.println("Enter characters one-by-one. Enter '0' to finish:");

        while (true) {
            char ch = scanner.next().charAt(0);
            if (ch == '0') {
                break;
            }
            inputSequence.append(ch);
        }

        scanner.close();

        String input = inputSequence.toString().toLowerCase();
        boolean isPalindrome = true;

        for (int i = 0; i < input.length() / 2; i++) {
            if (input.charAt(i) != input.charAt(input.length() - 1 - i)) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome) {
            System.out.println("The input sequence is a palindrome.");
        } else {
            System.out.println("The input sequence is not a palindrome.");
        }
    }
}

</source>
</class>

<class classid="51" nclones="3" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol3/DotProductP.java" startline="1" endline="29" pcid="1040">
import java.util.Scanner;

public class DotProduct {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector1 = new double[N];
        double[] vector2 = new double[N];

        System.out.println("Enter the elements of the first vector:");
        for (int i = 0; i < N; i++) {
            vector1[i] = scanner.nextDouble();
        }

        System.out.println("Enter the elements of the second vector:");
        for (int i = 0; i < N; i++) {
            vector2[i] = scanner.nextDouble();
        }

        double dotProduct = 0;
        for (int i = 0; i < N; i++) {
            dotProduct += vector1[i] * vector2[i];
        }

        System.out.println("Dot product: " + dotProduct);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol4/DotProductP.java" startline="1" endline="29" pcid="1044">
import java.util.Scanner;

public class DotProduct {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector1 = new double[N];
        double[] vector2 = new double[N];

        System.out.println("Enter the elements of the first vector:");
        for (int i = 0; i < N; i++) {
            vector1[i] = scanner.nextDouble();
        }

        System.out.println("Enter the elements of the second vector:");
        for (int i = 0; i < N; i++) {
            vector2[i] = scanner.nextDouble();
        }

        double dotProduct = 0;
        for (int i = 0; i < N; i++) {
            dotProduct += vector1[i] * vector2[i];
        }

        System.out.println("Dot product: " + dotProduct);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol5/DotProductP.java" startline="1" endline="29" pcid="1048">
import java.util.Scanner;

public class DotProduct {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector1 = new double[N];
        double[] vector2 = new double[N];

        System.out.println("Enter the elements of the first vector:");
        for (int i = 0; i < N; i++) {
            vector1[i] = scanner.nextDouble();
        }

        System.out.println("Enter the elements of the second vector:");
        for (int i = 0; i < N; i++) {
            vector2[i] = scanner.nextDouble();
        }

        double dotProduct = 0;
        for (int i = 0; i < N; i++) {
            dotProduct += vector1[i] * vector2[i];
        }

        System.out.println("Dot product: " + dotProduct);
    }
}

</source>
</class>

<class classid="52" nclones="3" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol3/InverseP.java" startline="1" endline="26" pcid="1041">
import java.util.Scanner;

public class Inverse {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] inverseVector = new double[N];
        for (int i = 0; i < N; i++) {
            inverseVector[i] = -vector[i];
        }

        System.out.println("Inverse vector:");
        for (double v : inverseVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol5/InverseP.java" startline="1" endline="26" pcid="1049">
import java.util.Scanner;

public class Inverse {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] inverseVector = new double[N];
        for (int i = 0; i < N; i++) {
            inverseVector[i] = -vector[i];
        }

        System.out.println("Inverse vector:");
        for (double v : inverseVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol4/InverseP.java" startline="1" endline="26" pcid="1045">
import java.util.Scanner;

public class Inverse {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] inverseVector = new double[N];
        for (int i = 0; i < N; i++) {
            inverseVector[i] = -vector[i];
        }

        System.out.println("Inverse vector:");
        for (double v : inverseVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
</class>

<class classid="53" nclones="3" nlines="30" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol3/MatrixVectorMultiplicationP.java" startline="1" endline="36" pcid="1042">
import java.util.Scanner;

public class MatrixVectorMultiplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[][] matrix = new double[N][N];
        double[] vector = new double[N];

        System.out.println("Enter the matrix elements:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                matrix[i][j] = scanner.nextDouble();
            }
        }

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] resultVector = new double[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                resultVector[i] += matrix[i][j] * vector[j];
            }
        }

        System.out.println("Result of matrix-vector multiplication:");
        for (double v : resultVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol5/MatrixVectorMultiplicationP.java" startline="1" endline="36" pcid="1050">
import java.util.Scanner;

public class MatrixVectorMultiplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[][] matrix = new double[N][N];
        double[] vector = new double[N];

        System.out.println("Enter the matrix elements:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                matrix[i][j] = scanner.nextDouble();
            }
        }

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] resultVector = new double[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                resultVector[i] += matrix[i][j] * vector[j];
            }
        }

        System.out.println("Result of matrix-vector multiplication:");
        for (double v : resultVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol4/MatrixVectorMultiplicationP.java" startline="1" endline="36" pcid="1046">
import java.util.Scanner;

public class MatrixVectorMultiplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[][] matrix = new double[N][N];
        double[] vector = new double[N];

        System.out.println("Enter the matrix elements:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                matrix[i][j] = scanner.nextDouble();
            }
        }

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double[] resultVector = new double[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                resultVector[i] += matrix[i][j] * vector[j];
            }
        }

        System.out.println("Result of matrix-vector multiplication:");
        for (double v : resultVector) {
            System.out.print(v + " ");
        }
    }
}

</source>
</class>

<class classid="54" nclones="3" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol3/NormP.java" startline="1" endline="24" pcid="1043">
import java.util.Scanner;

public class Norm {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double norm = 0;
        for (int i = 0; i < N; i++) {
            norm += vector[i] * vector[i];
        }
        norm = Math.sqrt(norm);

        System.out.println("Euclidean norm: " + norm);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol4/NormP.java" startline="1" endline="24" pcid="1047">
import java.util.Scanner;

public class Norm {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double norm = 0;
        for (int i = 0; i < N; i++) {
            norm += vector[i] * vector[i];
        }
        norm = Math.sqrt(norm);

        System.out.println("Euclidean norm: " + norm);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab4/Ex. 4/copilot/sol5/NormP.java" startline="1" endline="24" pcid="1051">
import java.util.Scanner;

public class Norm {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the dimension N: ");
        int N = scanner.nextInt();
        double[] vector = new double[N];

        System.out.println("Enter the vector elements:");
        for (int i = 0; i < N; i++) {
            vector[i] = scanner.nextDouble();
        }

        double norm = 0;
        for (int i = 0; i < N; i++) {
            norm += vector[i] * vector[i];
        }
        norm = Math.sqrt(norm);

        System.out.println("Euclidean norm: " + norm);
    }
}

</source>
</class>

<class classid="55" nclones="2" nlines="34" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 1/chatgpt/sol2/QuadraticP.java" startline="1" endline="42" pcid="1139">
public class Quadratic {
    private double a, b, c;

    public Quadratic(double a, double b, double c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    public double getA() {
        return a;
    }

    public double getB() {
        return b;
    }

    public double getC() {
        return c;
    }

    public double getDiscriminant() {
        return (b * b) - (4 * a * c);
    }

    public double getRoot1() {
        double discriminant = getDiscriminant();
        if (discriminant < 0) {
            return Double.NaN;
        }
        return (-b + Math.sqrt(discriminant)) / (2 * a);
    }

    public double getRoot2() {
        double discriminant = getDiscriminant();
        if (discriminant < 0) {
            return Double.NaN;
        }
        return (-b - Math.sqrt(discriminant)) / (2 * a);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 1/chatgpt/sol3/QuadraticP.java" startline="1" endline="42" pcid="1141">
public class Quadratic {
    private double a, b, c;

    public Quadratic(double a, double b, double c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    public double getA() {
        return a;
    }

    public double getB() {
        return b;
    }

    public double getC() {
        return c;
    }

    public double getDiscriminant() {
        return (b * b) - (4 * a * c);
    }

    public double getRoot1() {
        double discriminant = getDiscriminant();
        if (discriminant < 0) {
            return Double.NaN;
        }
        return (-b + Math.sqrt(discriminant)) / (2 * a);
    }

    public double getRoot2() {
        double discriminant = getDiscriminant();
        if (discriminant < 0) {
            return Double.NaN;
        }
        return (-b - Math.sqrt(discriminant)) / (2 * a);
    }
}

</source>
</class>

<class classid="56" nclones="2" nlines="57" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 2/chatgpt/sol1/StudentListTestP.java" startline="1" endline="62" pcid="1168">
import java.util.Scanner;

public class StudentListTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the maximum number of students: ");
        int maxStudents = scanner.nextInt();
        scanner.nextLine();

        StudentList studentList = new StudentList(maxStudents);

        while (true) {
            System.out.println("\nChoose an action:");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Report Students");
            System.out.println("5. Clear List");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter student name: ");
                    String name = scanner.nextLine();
                    studentList.addStudent(name);
                    break;
                case 2:
                    System.out.print("Enter student name to remove: ");
                    name = scanner.nextLine();
                    studentList.removeStudent(name);
                    break;
                case 3:
                    System.out.print("Enter student name to search: ");
                    name = scanner.nextLine();
                    int index = studentList.searchStudent(name);
                    if (index == -1) {
                        System.out.println(name + " is not on the list.");
                    } else {
                        System.out.println(name + " is at position " + (index + 1));
                    }
                    break;
                case 4:
                    studentList.reportStudents();
                    break;
                case 5:
                    studentList.clearList();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 2/chatgpt/sol2/StudentListTestP.java" startline="1" endline="62" pcid="1170">
import java.util.Scanner;

public class StudentListTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the maximum number of students: ");
        int maxStudents = scanner.nextInt();
        scanner.nextLine();

        StudentList studentList = new StudentList(maxStudents);

        while (true) {
            System.out.println("\nChoose an action:");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Report Students");
            System.out.println("5. Clear List");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter student name: ");
                    String name = scanner.nextLine();
                    studentList.addStudent(name);
                    break;
                case 2:
                    System.out.print("Enter student name to remove: ");
                    name = scanner.nextLine();
                    studentList.removeStudent(name);
                    break;
                case 3:
                    System.out.print("Enter student name to search: ");
                    name = scanner.nextLine();
                    int index = studentList.searchStudent(name);
                    if (index == -1) {
                        System.out.println(name + " is not on the list.");
                    } else {
                        System.out.println(name + " is at position " + (index + 1));
                    }
                    break;
                case 4:
                    studentList.reportStudents();
                    break;
                case 5:
                    studentList.clearList();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}

</source>
</class>

<class classid="57" nclones="2" nlines="58" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 2/deepseek/sol1/StudentListTestP.java" startline="1" endline="64" pcid="1185">
package exercise2;

import java.util.Scanner;

public class StudentListTest {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the maximum number of students: ");
        int size = input.nextInt();
        input.nextLine();

        StudentList list = new StudentList(size);

        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Add a student");
            System.out.println("2. Remove a student");
            System.out.println("3. Search for a student");
            System.out.println("4. Report registered students");
            System.out.println("5. Clear the list");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = input.nextInt();
            input.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter the student's full name: ");
                    String name = input.nextLine();
                    list.addStudent(name);
                    break;
                case 2:
                    System.out.print("Enter the student's full name to remove: ");
                    String removeName = input.nextLine();
                    list.removeStudent(removeName);
                    break;
                case 3:
                    System.out.print("Enter the student's full name to search: ");
                    String searchName = input.nextLine();
                    int index = list.searchStudent(searchName);
                    if (index != -1) {
                        System.out.println("Student found at position: " + (index + 1));
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 4:
                    list.reportStudents();
                    break;
                case 5:
                    list.clearList();
                    break;
                case 6:
                    System.out.println("Exiting the program.");
                    input.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 2/deepseek/sol2/StudentListTestP.java" startline="1" endline="64" pcid="1187">
package exercise2;

import java.util.Scanner;

public class StudentListTest {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the maximum number of students: ");
        int size = input.nextInt();
        input.nextLine();

        StudentList list = new StudentList(size);

        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Add a student");
            System.out.println("2. Remove a student");
            System.out.println("3. Search for a student");
            System.out.println("4. Report registered students");
            System.out.println("5. Clear the list");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = input.nextInt();
            input.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter the student's full name: ");
                    String name = input.nextLine();
                    list.addStudent(name);
                    break;
                case 2:
                    System.out.print("Enter the student's full name to remove: ");
                    String removeName = input.nextLine();
                    list.removeStudent(removeName);
                    break;
                case 3:
                    System.out.print("Enter the student's full name to search: ");
                    String searchName = input.nextLine();
                    int index = list.searchStudent(searchName);
                    if (index != -1) {
                        System.out.println("Student found at position: " + (index + 1));
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 4:
                    list.reportStudents();
                    break;
                case 5:
                    list.clearList();
                    break;
                case 6:
                    System.out.println("Exiting the program.");
                    input.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

</source>
</class>

<class classid="58" nclones="12" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/chatgpt/sol1/PersonP.java" startline="1" endline="18" pcid="1202">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/gemini/sol2/PersonP.java" startline="1" endline="18" pcid="1247">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol4/PersonP.java" startline="1" endline="18" pcid="1226">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/chatgpt/sol5/PersonP.java" startline="1" endline="18" pcid="1214">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol3/PersonP.java" startline="1" endline="18" pcid="1223">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol4/PersonP.java" startline="1" endline="18" pcid="1239">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol2/BankAccountP.java" startline="1" endline="18" pcid="1218">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol1/PersonP.java" startline="1" endline="18" pcid="1217">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol5/PersonP.java" startline="1" endline="18" pcid="1229">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol2/PersonP.java" startline="1" endline="18" pcid="1220">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/chatgpt/sol4/PersonP.java" startline="1" endline="18" pcid="1211">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/chatgpt/sol3/PersonP.java" startline="1" endline="18" pcid="1208">
public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
</class>

<class classid="59" nclones="4" nlines="48" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol1/BankAccountP.java" startline="1" endline="54" pcid="1215">
import java.time.LocalDateTime;

public class BankAccount {
    private Person holder;
    private double balance;

    public BankAccount(Person holder, double balance) {
        this.holder = holder;
        this.balance = Math.max(balance, 0);
    }

    public Person getHolder() {
        return holder;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    public void printBalance() {
        System.out.println("Current balance: " + balance);
    }

    public void transfer(BankAccount beneficiary, double amount) {
        if (withdraw(amount)) {
            beneficiary.deposit(amount);
            System.out.println("Transferred " + amount + " to " + beneficiary.getHolder().getName() + " on " + LocalDateTime.now());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol3/BankAccountP.java" startline="1" endline="54" pcid="1221">
import java.time.LocalDateTime;

public class BankAccount {
    private Person holder;
    private double balance;

    public BankAccount(Person holder, double balance) {
        this.holder = holder;
        this.balance = Math.max(balance, 0);
    }

    public Person getHolder() {
        return holder;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    public void printBalance() {
        System.out.println("Current balance: " + balance);
    }

    public void transfer(BankAccount beneficiary, double amount) {
        if (withdraw(amount)) {
            beneficiary.deposit(amount);
            System.out.println("Transferred " + amount + " to " + beneficiary.getHolder().getName() + " on " + LocalDateTime.now());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol4/BankAccountP.java" startline="1" endline="54" pcid="1224">
import java.time.LocalDateTime;

public class BankAccount {
    private Person holder;
    private double balance;

    public BankAccount(Person holder, double balance) {
        this.holder = holder;
        this.balance = Math.max(balance, 0);
    }

    public Person getHolder() {
        return holder;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    public void printBalance() {
        System.out.println("Current balance: " + balance);
    }

    public void transfer(BankAccount beneficiary, double amount) {
        if (withdraw(amount)) {
            beneficiary.deposit(amount);
            System.out.println("Transferred " + amount + " to " + beneficiary.getHolder().getName() + " on " + LocalDateTime.now());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol5/BankAccountP.java" startline="1" endline="54" pcid="1227">
import java.time.LocalDateTime;

public class BankAccount {
    private Person holder;
    private double balance;

    public BankAccount(Person holder, double balance) {
        this.holder = holder;
        this.balance = Math.max(balance, 0);
    }

    public Person getHolder() {
        return holder;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                return true;
            } else {
                System.out.println("Insufficient funds.");
                return false;
            }
        } else {
            System.out.println("Withdrawal amount must be positive.");
            return false;
        }
    }

    public void printBalance() {
        System.out.println("Current balance: " + balance);
    }

    public void transfer(BankAccount beneficiary, double amount) {
        if (withdraw(amount)) {
            beneficiary.deposit(amount);
            System.out.println("Transferred " + amount + " to " + beneficiary.getHolder().getName() + " on " + LocalDateTime.now());
        }
    }
}

</source>
</class>

<class classid="60" nclones="5" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol1/MainP.java" startline="1" endline="20" pcid="1216">
public class Main {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000);
        BankAccount account2 = new BankAccount(person2, 500);

        account1.deposit(200);
        account1.printBalance();

        account1.withdraw(300);
        account1.printBalance();

        account1.transfer(account2, 400);
        account1.printBalance();
        account2.printBalance();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol3/MainP.java" startline="1" endline="20" pcid="1222">
public class Main {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000);
        BankAccount account2 = new BankAccount(person2, 500);

        account1.deposit(200);
        account1.printBalance();

        account1.withdraw(300);
        account1.printBalance();

        account1.transfer(account2, 400);
        account1.printBalance();
        account2.printBalance();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol4/MainP.java" startline="1" endline="20" pcid="1225">
public class Main {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000);
        BankAccount account2 = new BankAccount(person2, 500);

        account1.deposit(200);
        account1.printBalance();

        account1.withdraw(300);
        account1.printBalance();

        account1.transfer(account2, 400);
        account1.printBalance();
        account2.printBalance();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol5/MainP.java" startline="1" endline="20" pcid="1228">
public class Main {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000);
        BankAccount account2 = new BankAccount(person2, 500);

        account1.deposit(200);
        account1.printBalance();

        account1.withdraw(300);
        account1.printBalance();

        account1.transfer(account2, 400);
        account1.printBalance();
        account2.printBalance();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/copilot/sol2/MainP.java" startline="1" endline="20" pcid="1219">
public class Main {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000);
        BankAccount account2 = new BankAccount(person2, 500);

        account1.deposit(200);
        account1.printBalance();

        account1.withdraw(300);
        account1.printBalance();

        account1.transfer(account2, 400);
        account1.printBalance();
        account2.printBalance();
    }
}

</source>
</class>

<class classid="61" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol1/BankAccountTestP.java" startline="1" endline="25" pcid="1231">
package exercise3;

public class BankAccountTest {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000.0);
        BankAccount account2 = new BankAccount(person2, 500.0);

        account1.deposit(200.0);
        account1.printBalance();

        account2.withdraw(100.0);
        account2.printBalance();

        account1.transfer(account2, 300.0);
        account1.printBalance();
        account2.printBalance();

        account2.withdraw(1000.0);
        account2.printBalance();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol3/BankAccountTestP.java" startline="1" endline="25" pcid="1235">
package exercise3;

public class BankAccountTest {
    public static void main(String[] args) {
        Person person1 = new Person(1, "Alice");
        Person person2 = new Person(2, "Bob");

        BankAccount account1 = new BankAccount(person1, 1000.0);
        BankAccount account2 = new BankAccount(person2, 500.0);

        account1.deposit(200.0);
        account1.printBalance();

        account2.withdraw(100.0);
        account2.printBalance();

        account1.transfer(account2, 300.0);
        account1.printBalance();
        account2.printBalance();

        account2.withdraw(1000.0);
        account2.printBalance();
    }
}

</source>
</class>

<class classid="62" nclones="3" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol1/PersonP.java" startline="1" endline="20" pcid="1232">
package exercise3;

public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol2/PersonP.java" startline="1" endline="20" pcid="1234">
package exercise3;

public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 3/deepseek/sol3/PersonP.java" startline="1" endline="20" pcid="1236">
package exercise3;

public class Person {
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

</source>
</class>

<class classid="63" nclones="4" nlines="16" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/chatgpt/sol2/DateTimeP.java" startline="1" endline="20" pcid="1259">
public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/copilot/sol5/DateTimeP.java" startline="1" endline="20" pcid="1289">
public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/copilot/sol2/DateTimeP.java" startline="1" endline="20" pcid="1278">
public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/chatgpt/sol3/DateTimeP.java" startline="1" endline="20" pcid="1263">
public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
</class>

<class classid="64" nclones="2" nlines="60" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/chatgpt/sol4/MainP.java" startline="1" endline="63" pcid="1267">
package exercise4;

public class Date {
    private int day;
    private int month;
    private int year;

    public Date(int day, int month, int year) {
        if (isValidDate(day, month, year)) {
            this.day = day;
            this.month = month;
            this.year = year;
        } else {
            this.day = 1;
            this.month = 1;
            this.year = 2000;
        }
    }

    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    public int daysInMonth() {
        switch (month) {
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return isLeapYear() ? 29 : 28;
            default:
                return 31;
        }
    }

    public void advance() {
        day++;
        if (day > daysInMonth()) {
            day = 1;
            month++;
            if (month > 12) {
                month = 1;
                year++;
            }
        }
    }

    public String format(boolean us, String delimiter) {
        String formattedDay = String.format("%02d", day);
        String formattedMonth = String.format("%02d", month);
        if (us) {
            return formattedMonth + delimiter + formattedDay + delimiter + year;
        } else {
            return formattedDay + delimiter + formattedMonth + delimiter + year;
        }
    }

    private boolean isValidDate(int day, int month, int year) {
        if (month < 1 || month > 12) return false;
        if (day < 1 || day > daysInMonth()) return false;
        return true;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/copilot/sol1/DateP.java" startline="1" endline="63" pcid="1273">
package exercise4;

public class Date {
    private int day;
    private int month;
    private int year;

    public Date(int day, int month, int year) {
        if (isValidDate(day, month, year)) {
            this.day = day;
            this.month = month;
            this.year = year;
        } else {
            this.day = 1;
            this.month = 1;
            this.year = 2000;
        }
    }

    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    public int daysInMonth() {
        switch (month) {
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return isLeapYear() ? 29 : 28;
            default:
                return 31;
        }
    }

    public void advance() {
        day++;
        if (day > daysInMonth()) {
            day = 1;
            month++;
            if (month > 12) {
                month = 1;
                year++;
            }
        }
    }

    public String format(boolean us, String delimiter) {
        String formattedDay = String.format("%02d", day);
        String formattedMonth = String.format("%02d", month);
        if (us) {
            return formattedMonth + delimiter + formattedDay + delimiter + year;
        } else {
            return formattedDay + delimiter + formattedMonth + delimiter + year;
        }
    }

    private boolean isValidDate(int day, int month, int year) {
        if (month < 1 || month > 12) return false;
        if (day < 1 || day > daysInMonth()) return false;
        return true;
    }
}

</source>
</class>

<class classid="65" nclones="3" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/copilot/sol1/DateTimeP.java" startline="1" endline="22" pcid="1274">
package exercise4;

public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol1/DateTimeP.java" startline="1" endline="22" pcid="1293">
package exercise4;

public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol2/DateTimeP.java" startline="1" endline="22" pcid="1297">
package exercise4;

public class DateTime {
    private Date date;
    private Time time;

    public DateTime(Date date, Time time) {
        this.date = date;
        this.time = time;
    }

    public void tick() {
        if (time.tick()) {
            date.advance();
        }
    }

    public void print(boolean us, String delimiter) {
        System.out.println(date.format(us, delimiter) + " " + time.format(us));
    }
}

</source>
</class>

<class classid="66" nclones="2" nlines="69" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol1/DateP.java" startline="1" endline="69" pcid="1292">
package exercise4;

public class Date {
    private int day;
    private int month;
    private int year;

    public Date(int day, int month, int year) {
        if (!isValidDate(day, month, year)) {
            throw new IllegalArgumentException("Invalid date.");
        }
        this.day = day;
        this.month = month;
        this.year = year;
    }

    private boolean isValidDate(int day, int month, int year) {
        if (year < 1 || month < 1 || month > 12 || day < 1) {
            return false;
        }
        return day <= daysInMonth(month, year);
    }

    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    public int daysInMonth() {
        return daysInMonth(month, year);
    }

    private int daysInMonth(int month, int year) {
        switch (month) {
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return isLeapYear() ? 29 : 28;
            default:
                return 31;
        }
    }

    public void advance() {
        day++;
        if (day > daysInMonth()) {
            day = 1;
            month++;
            if (month > 12) {
                month = 1;
                year++;
            }
        }
    }

    public String format(boolean us, String delimiter) {
        String formattedDay = String.format("%02d", day);
        String formattedMonth = String.format("%02d", month);
        if (us) {
            return formattedMonth + delimiter + formattedDay + delimiter + year;
        } else {
            return formattedDay + delimiter + formattedMonth + delimiter + year;
        }
    }

    public int getDay() { return day; }
    public int getMonth() { return month; }
    public int getYear() { return year; }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol2/DateP.java" startline="1" endline="69" pcid="1296">
package exercise4;

public class Date {
    private int day;
    private int month;
    private int year;

    public Date(int day, int month, int year) {
        if (!isValidDate(day, month, year)) {
            throw new IllegalArgumentException("Invalid date.");
        }
        this.day = day;
        this.month = month;
        this.year = year;
    }

    private boolean isValidDate(int day, int month, int year) {
        if (year < 1 || month < 1 || month > 12 || day < 1) {
            return false;
        }
        return day <= daysInMonth(month, year);
    }

    public boolean isLeapYear() {
        return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    public int daysInMonth() {
        return daysInMonth(month, year);
    }

    private int daysInMonth(int month, int year) {
        switch (month) {
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return isLeapYear() ? 29 : 28;
            default:
                return 31;
        }
    }

    public void advance() {
        day++;
        if (day > daysInMonth()) {
            day = 1;
            month++;
            if (month > 12) {
                month = 1;
                year++;
            }
        }
    }

    public String format(boolean us, String delimiter) {
        String formattedDay = String.format("%02d", day);
        String formattedMonth = String.format("%02d", month);
        if (us) {
            return formattedMonth + delimiter + formattedDay + delimiter + year;
        } else {
            return formattedDay + delimiter + formattedMonth + delimiter + year;
        }
    }

    public int getDay() { return day; }
    public int getMonth() { return month; }
    public int getYear() { return year; }
}

</source>
</class>

<class classid="67" nclones="3" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol1/DateTimeTestP.java" startline="1" endline="23" pcid="1294">
package exercise4;

public class DateTimeTest {
    public static void main(String[] args) {
        Date date = new Date(31, 12, 2022);
        Time time = new Time(23, 59, 59);
        DateTime dateTime = new DateTime(date, time);

        dateTime.print(false, "-");
        dateTime.tick();
        dateTime.print(false, "-");

        dateTime.print(true, "/");

        Date leapDate = new Date(28, 2, 2020);
        System.out.println("Is 2020 a leap year? " + leapDate.isLeapYear());

        Time testTime = new Time(12, 30, 45);
        System.out.println("Seconds since midnight: " + testTime.secondsSinceMidnight());
        System.out.println("Seconds until midnight: " + testTime.secondsUntilMidnight());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol2/DateTimeTestP.java" startline="1" endline="23" pcid="1298">
package exercise4;

public class DateTimeTest {
    public static void main(String[] args) {
        Date date = new Date(31, 12, 2022);
        Time time = new Time(23, 59, 59);
        DateTime dateTime = new DateTime(date, time);

        dateTime.print(false, "-");
        dateTime.tick();
        dateTime.print(false, "-");

        dateTime.print(true, "/");

        Date leapDate = new Date(28, 2, 2020);
        System.out.println("Is 2020 a leap year? " + leapDate.isLeapYear());

        Time testTime = new Time(12, 30, 45);
        System.out.println("Seconds since midnight: " + testTime.secondsSinceMidnight());
        System.out.println("Seconds until midnight: " + testTime.secondsUntilMidnight());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol3/DateTimeTestP.java" startline="1" endline="23" pcid="1302">
package exercise4;

public class DateTimeTest {
    public static void main(String[] args) {
        Date date = new Date(31, 12, 2022);
        Time time = new Time(23, 59, 59);
        DateTime dateTime = new DateTime(date, time);

        dateTime.print(false, "-");
        dateTime.tick();
        dateTime.print(false, "-");

        dateTime.print(true, "/");

        Date leapDate = new Date(28, 2, 2020);
        System.out.println("Is 2020 a leap year? " + leapDate.isLeapYear());

        Time testTime = new Time(12, 30, 45);
        System.out.println("Seconds since midnight: " + testTime.secondsSinceMidnight());
        System.out.println("Seconds until midnight: " + testTime.secondsUntilMidnight());
    }
}

</source>
</class>

<class classid="68" nclones="2" nlines="61" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol1/TimeP.java" startline="1" endline="63" pcid="1295">
package exercise4;

public class Time {
    private int hours;
    private int minutes;
    private int seconds;

    public Time(int hours, int minutes, int seconds) {
        if (!isValidTime(hours, minutes, seconds)) {
            throw new IllegalArgumentException("Invalid time.");
        }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
    }

    private boolean isValidTime(int hours, int minutes, int seconds) {
        return hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60 && seconds >= 0 && seconds < 60;
    }

    public boolean tick() {
        seconds++;
        if (seconds == 60) {
            seconds = 0;
            minutes++;
            if (minutes == 60) {
                minutes = 0;
                hours++;
                if (hours == 24) {
                    hours = 0;
                    return true;
                }
            }
        }
        return false;
    }

    public String format(boolean us) {
        String formattedHours = String.format("%02d", hours);
        String formattedMinutes = String.format("%02d", minutes);
        String formattedSeconds = String.format("%02d", seconds);
        if (us) {
            int usHours = hours % 12 == 0 ? 12 : hours % 12;
            String suffix = hours < 12 ? "AM" : "PM";
            return String.format("%02d:%s:%s %s", usHours, formattedMinutes, formattedSeconds, suffix);
        } else {
            return formattedHours + ":" + formattedMinutes + ":" + formattedSeconds;
        }
    }

    public int secondsSinceMidnight() {
        return hours * 3600 + minutes * 60 + seconds;
    }

    public int secondsUntilMidnight() {
        return 86400 - secondsSinceMidnight();
    }

    public int getHours() { return hours; }
    public int getMinutes() { return minutes; }
    public int getSeconds() { return seconds; }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 4/deepseek/sol2/TimeP.java" startline="1" endline="63" pcid="1299">
package exercise4;

public class Time {
    private int hours;
    private int minutes;
    private int seconds;

    public Time(int hours, int minutes, int seconds) {
        if (!isValidTime(hours, minutes, seconds)) {
            throw new IllegalArgumentException("Invalid time.");
        }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
    }

    private boolean isValidTime(int hours, int minutes, int seconds) {
        return hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60 && seconds >= 0 && seconds < 60;
    }

    public boolean tick() {
        seconds++;
        if (seconds == 60) {
            seconds = 0;
            minutes++;
            if (minutes == 60) {
                minutes = 0;
                hours++;
                if (hours == 24) {
                    hours = 0;
                    return true;
                }
            }
        }
        return false;
    }

    public String format(boolean us) {
        String formattedHours = String.format("%02d", hours);
        String formattedMinutes = String.format("%02d", minutes);
        String formattedSeconds = String.format("%02d", seconds);
        if (us) {
            int usHours = hours % 12 == 0 ? 12 : hours % 12;
            String suffix = hours < 12 ? "AM" : "PM";
            return String.format("%02d:%s:%s %s", usHours, formattedMinutes, formattedSeconds, suffix);
        } else {
            return formattedHours + ":" + formattedMinutes + ":" + formattedSeconds;
        }
    }

    public int secondsSinceMidnight() {
        return hours * 3600 + minutes * 60 + seconds;
    }

    public int secondsUntilMidnight() {
        return 86400 - secondsSinceMidnight();
    }

    public int getHours() { return hours; }
    public int getMinutes() { return minutes; }
    public int getSeconds() { return seconds; }
}

</source>
</class>

<class classid="69" nclones="4" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/copilot/sol1/ItemP.java" startline="1" endline="14" pcid="1337">
package exercise5;

public class Item {
    private double price;

    public Item(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/deepseek/sol2/ItemP.java" startline="1" endline="14" pcid="1347">
package exercise5;

public class Item {
    private double price;

    public Item(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/deepseek/sol5/ItemP.java" startline="1" endline="14" pcid="1356">
package exercise5;

public class Item {
    private double price;

    public Item(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/deepseek/sol4/ItemP.java" startline="1" endline="14" pcid="1352">
package exercise5;

public class Item {
    private double price;

    public Item(double price) {
        this.price = price;
    }

    public double getPrice() {
        return price;
    }
}

</source>
</class>

<class classid="70" nclones="2" nlines="35" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/deepseek/sol1/ShopTestP.java" startline="1" endline="44" pcid="1346">
package exercise5;

import java.util.Random;

public class ShopTest {
    public static void main(String[] args) {
        int totalGiveaways = 30;
        Shop.setMaxNumberOfGiveaways(totalGiveaways);

        Shop shop1 = new Shop(totalGiveaways / 3);
        Shop shop2 = new Shop(totalGiveaways / 3);
        Shop shop3 = new Shop(totalGiveaways / 3);

        Random random = new Random();

        while (Shop.getMaxNumberOfGiveaways() > 0) {
            Shop shop = null;
            int shopNumber = random.nextInt(3) + 1;
            switch (shopNumber) {
                case 1:
                    shop = shop1;
                    break;
                case 2:
                    shop = shop2;
                    break;
                case 3:
                    shop = shop3;
                    break;
            }

            double price = random.nextDouble() * 120;
            Item item = new Item(price);

            shop.buy(item);
        }

        System.out.println("\nRemaining giveaways:");
        System.out.println("Shop 1: " + shop1.getLocalNumberOfGiveaways());
        System.out.println("Shop 2: " + shop2.getLocalNumberOfGiveaways());
        System.out.println("Shop 3: " + shop3.getLocalNumberOfGiveaways());
        System.out.println("National level: " + Shop.getMaxNumberOfGiveaways());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab5/Ex. 5/deepseek/sol3/ShopTestP.java" startline="1" endline="44" pcid="1350">
package exercise5;

import java.util.Random;

public class ShopTest {
    public static void main(String[] args) {
        int totalGiveaways = 30;
        Shop.setMaxNumberOfGiveaways(totalGiveaways);

        Shop shop1 = new Shop(totalGiveaways / 3);
        Shop shop2 = new Shop(totalGiveaways / 3);
        Shop shop3 = new Shop(totalGiveaways / 3);

        Random random = new Random();

        while (Shop.getMaxNumberOfGiveaways() > 0) {
            Shop shop = null;
            int shopNumber = random.nextInt(3) + 1;
            switch (shopNumber) {
                case 1:
                    shop = shop1;
                    break;
                case 2:
                    shop = shop2;
                    break;
                case 3:
                    shop = shop3;
                    break;
            }

            double price = random.nextDouble() * 120;
            Item item = new Item(price);

            shop.buy(item);
        }

        System.out.println("\nRemaining giveaways:");
        System.out.println("Shop 1: " + shop1.getLocalNumberOfGiveaways());
        System.out.println("Shop 2: " + shop2.getLocalNumberOfGiveaways());
        System.out.println("Shop 3: " + shop3.getLocalNumberOfGiveaways());
        System.out.println("National level: " + Shop.getMaxNumberOfGiveaways());
    }
}

</source>
</class>

<class classid="71" nclones="7" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/chatgpt/sol1/PavilionP.java" startline="1" endline="20" pcid="1372">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol2/PavilionP.java" startline="1" endline="20" pcid="1396">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/chatgpt/sol2/PavilionP.java" startline="1" endline="20" pcid="1376">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol3/PavilionP.java" startline="1" endline="20" pcid="1400">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol4/PavilionP.java" startline="1" endline="20" pcid="1404">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol1/PavilionP.java" startline="1" endline="20" pcid="1392">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol5/PavilionP.java" startline="1" endline="20" pcid="1410">
package exercise5;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
</class>

<class classid="72" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol2/GroupTicketP.java" startline="1" endline="29" pcid="1394">
package exercise5;

import java.util.List;

public class GroupTicket extends Ticket {
    private int n;

    public GroupTicket(List<Pavilion> pavilions, int n) {
        super(pavilions);
        this.n = n;
    }

    @Override
    public double calculateCost() {
        double baseCost = super.calculateCost();
        if (n >= 6 && n <= 12) {
            return baseCost * 0.7;
        } else if (n > 12) {
            return baseCost * 0.6;
        }
        return baseCost;
    }

    @Override
    public String toString() {
        return super.toString() + "Number of Visitors: " + n + "\n";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol4/GroupTicketP.java" startline="1" endline="29" pcid="1402">
package exercise5;

import java.util.List;

public class GroupTicket extends Ticket {
    private int n;

    public GroupTicket(List<Pavilion> pavilions, int n) {
        super(pavilions);
        this.n = n;
    }

    @Override
    public double calculateCost() {
        double baseCost = super.calculateCost();
        if (n >= 6 && n <= 12) {
            return baseCost * 0.7;
        } else if (n > 12) {
            return baseCost * 0.6;
        }
        return baseCost;
    }

    @Override
    public String toString() {
        return super.toString() + "Number of Visitors: " + n + "\n";
    }
}

</source>
</class>

<class classid="73" nclones="2" nlines="47" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol2/TicketP.java" startline="1" endline="55" pcid="1397">
package exercise5;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public class Ticket {
    private UUID ticketID;
    private Date emissionDate;
    private List<Pavilion> pavilions;

    public Ticket(List<Pavilion> pavilions) {
        this.ticketID = UUID.randomUUID();
        this.emissionDate = new Date();
        this.pavilions = pavilions;
    }

    public UUID getTicketID() {
        return ticketID;
    }

    public Date getEmissionDate() {
        return emissionDate;
    }

    public List<Pavilion> getPavilions() {
        return pavilions;
    }

    public double calculateCost() {
        double totalCost = 0;
        for (int i = 0; i < pavilions.size(); i++) {
            if (i < 3) {
                totalCost += pavilions.get(i).getPrice();
            } else {
                totalCost += pavilions.get(i).getPrice() * 0.7;
            }
        }
        return totalCost;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Ticket ID: ").append(ticketID).append("\n");
        sb.append("Emission Date: ").append(emissionDate).append("\n");
        sb.append("Pavilions: \n");
        for (Pavilion pavilion : pavilions) {
            sb.append(" - ").append(pavilion.getName()).append(": ").append(pavilion.getPrice()).append(" EUR\n");
        }
        sb.append("Total Cost: ").append(calculateCost()).append(" EUR\n");
        return sb.toString();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/copilot/sol4/TicketP.java" startline="1" endline="55" pcid="1405">
package exercise5;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public class Ticket {
    private UUID ticketID;
    private Date emissionDate;
    private List<Pavilion> pavilions;

    public Ticket(List<Pavilion> pavilions) {
        this.ticketID = UUID.randomUUID();
        this.emissionDate = new Date();
        this.pavilions = pavilions;
    }

    public UUID getTicketID() {
        return ticketID;
    }

    public Date getEmissionDate() {
        return emissionDate;
    }

    public List<Pavilion> getPavilions() {
        return pavilions;
    }

    public double calculateCost() {
        double totalCost = 0;
        for (int i = 0; i < pavilions.size(); i++) {
            if (i < 3) {
                totalCost += pavilions.get(i).getPrice();
            } else {
                totalCost += pavilions.get(i).getPrice() * 0.7;
            }
        }
        return totalCost;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Ticket ID: ").append(ticketID).append("\n");
        sb.append("Emission Date: ").append(emissionDate).append("\n");
        sb.append("Pavilions: \n");
        for (Pavilion pavilion : pavilions) {
            sb.append(" - ").append(pavilion.getName()).append(": ").append(pavilion.getPrice()).append(" EUR\n");
        }
        sb.append("Total Cost: ").append(calculateCost()).append(" EUR\n");
        return sb.toString();
    }
}

</source>
</class>

<class classid="74" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol1/GroupTicketP.java" startline="1" endline="27" pcid="1413">
package museum;

public class GroupTicket extends Ticket {
    private int n;

    public GroupTicket(Pavilion[] pavilions, int n) {
        super(pavilions);
        this.n = n;
    }

    @Override
    public double calculateCost() {
        double totalCost = super.calculateCost();
        if (n >= 6 && n <= 12) {
            totalCost *= 0.7;
        } else if (n > 12) {
            totalCost *= 0.6;
        }
        return totalCost;
    }

    @Override
    public String toString() {
        return super.toString() + "Number of Visitors: " + n + "\n";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol4/GroupTicketP.java" startline="1" endline="27" pcid="1426">
package museum;

public class GroupTicket extends Ticket {
    private int n;

    public GroupTicket(Pavilion[] pavilions, int n) {
        super(pavilions);
        this.n = n;
    }

    @Override
    public double calculateCost() {
        double totalCost = super.calculateCost();
        if (n >= 6 && n <= 12) {
            totalCost *= 0.7;
        } else if (n > 12) {
            totalCost *= 0.6;
        }
        return totalCost;
    }

    @Override
    public String toString() {
        return super.toString() + "Number of Visitors: " + n + "\n";
    }
}

</source>
</class>

<class classid="75" nclones="4" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol1/PavilionP.java" startline="1" endline="20" pcid="1415">
package museum;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol3/PavilionP.java" startline="1" endline="20" pcid="1423">
package museum;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol2/PavilionP.java" startline="1" endline="20" pcid="1419">
package museum;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol4/PavilionP.java" startline="1" endline="20" pcid="1428">
package museum;

public class Pavilion {
    private String name;
    private double price;

    public Pavilion(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

</source>
</class>

<class classid="76" nclones="2" nlines="37" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol1/TicketP.java" startline="1" endline="42" pcid="1416">
package museum;

import java.util.Date;
import java.util.UUID;

public class Ticket {
    private UUID ticketID;
    private Date emissionDate;
    private Pavilion[] pavilions;

    public Ticket(Pavilion[] pavilions) {
        this.ticketID = UUID.randomUUID();
        this.emissionDate = new Date();
        this.pavilions = pavilions;
    }

    public double calculateCost() {
        double totalCost = 0;
        for (int i = 0; i < pavilions.length; i++) {
            if (i < 3) {
                totalCost += pavilions[i].getPrice();
            } else {
                totalCost += pavilions[i].getPrice() * 0.7;
            }
        }
        return totalCost;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Ticket ID: ").append(ticketID).append("\n");
        sb.append("Emission Date: ").append(emissionDate).append("\n");
        sb.append("Pavilions:\n");
        for (Pavilion pavilion : pavilions) {
            sb.append("  - ").append(pavilion.getName()).append(": ").append(pavilion.getPrice()).append(" EUR\n");
        }
        sb.append("Total Cost: ").append(calculateCost()).append(" EUR\n");
        return sb.toString();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/deepseek/sol4/TicketP.java" startline="1" endline="42" pcid="1430">
package museum;

import java.util.Date;
import java.util.UUID;

public class Ticket {
    private UUID ticketID;
    private Date emissionDate;
    private Pavilion[] pavilions;

    public Ticket(Pavilion[] pavilions) {
        this.ticketID = UUID.randomUUID();
        this.emissionDate = new Date();
        this.pavilions = pavilions;
    }

    public double calculateCost() {
        double totalCost = 0;
        for (int i = 0; i < pavilions.length; i++) {
            if (i < 3) {
                totalCost += pavilions[i].getPrice();
            } else {
                totalCost += pavilions[i].getPrice() * 0.7;
            }
        }
        return totalCost;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Ticket ID: ").append(ticketID).append("\n");
        sb.append("Emission Date: ").append(emissionDate).append("\n");
        sb.append("Pavilions:\n");
        for (Pavilion pavilion : pavilions) {
            sb.append("  - ").append(pavilion.getName()).append(": ").append(pavilion.getPrice()).append(" EUR\n");
        }
        sb.append("Total Cost: ").append(calculateCost()).append(" EUR\n");
        return sb.toString();
    }
}

</source>
</class>

<class classid="77" nclones="2" nlines="59" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/gemini/sol3/MainP.java" startline="1" endline="71" pcid="1444">
public class Main {
    public static void main(String[] args) {
        try {
            Pavilion pav1 = new Pavilion("pav1", 100.0);
            Pavilion pav2 = new Pavilion("pav2", 80.0);
            Pavilion pav3 = new Pavilion("pav3", 70.0);
            Pavilion pav4 = new Pavilion("pav4", 120.0);
            Pavilion pav5 = new Pavilion("pav5", 90.0);
            Pavilion pav6 = new Pavilion("pav6", 110.0);
            Pavilion pav7 = new Pavilion("pav7", 95.0);
            Pavilion pav8 = new Pavilion("pav8", 85.0);
            Pavilion pav9 = new Pavilion("pav9", 105.0);

            Pavilion[] pavilions1 = {pav2, pav3, pav4, pav1, pav5};
            Ticket ticket1 = new Ticket(pavilions1);
            System.out.println("Ticket 1: " + ticket1);
            System.out.println("Ticket 1 Cost: $" + String.format("%.2f", ticket1.calculateCost()));

            Pavilion[] pavilions2 = {pav4, pav8, pav7, pav6, pav9};
            GroupTicket groupTicket1 = new GroupTicket(pavilions2, 10);
            System.out.println("\nGroup Ticket 1: " + groupTicket1);
            System.out.println("Group Ticket 1 Cost: $" + String.format("%.2f", groupTicket1.calculateCost()));

            GroupTicket groupTicket2 = new GroupTicket(pavilions2, 15);
            System.out.println("\nGroup Ticket 2: " + groupTicket2);
            System.out.println("Group Ticket 2 Cost: $" + String.format("%.2f", groupTicket2.calculateCost()));

            Ticket ticket2 = new Ticket(new Pavilion[]{pav1, pav2});
            System.out.println("\nTicket 2: " + ticket2);
            System.out.println("Ticket 2 Cost: $" + String.format("%.2f", ticket2.calculateCost()));

            try {
                Ticket invalidTicket = new Ticket(null);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            try {
                GroupTicket invalidGroupTicket = new GroupTicket(new Pavilion[]{pav1, null}, 10);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

             try {
                Pavilion invalidPavilion = new Pavilion("Invalid", -10);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            try {
                 GroupTicket invalidGroupTicket2 = new GroupTicket(new Pavilion[]{pav1}, 0);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            Ticket ticket3 = new Ticket(pavilions1);
            System.out.println("\nTicket 1 equals Ticket 3: " + ticket1.equals(ticket3));
            System.out.println("Ticket 1 hashcode: " + ticket1.hashCode());
            System.out.println("Ticket 3 hashcode: " + ticket3.hashCode());

            GroupTicket groupTicket3 = new GroupTicket(pavilions2, 10);
            System.out.println("\nGroupTicket 1 equals GroupTicket 3: " + groupTicket1.equals(groupTicket3));
            System.out.println("GroupTicket 1 hashcode: " + groupTicket1.hashCode());
            System.out.println("GroupTicket 3 hashcode: " + groupTicket3.hashCode());

        } catch (IllegalArgumentException e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/gemini/sol5/MainP.java" startline="1" endline="71" pcid="1452">
public class Main {
    public static void main(String[] args) {
        try {
            Pavilion pav1 = new Pavilion("pav1", 100.0);
            Pavilion pav2 = new Pavilion("pav2", 80.0);
            Pavilion pav3 = new Pavilion("pav3", 70.0);
            Pavilion pav4 = new Pavilion("pav4", 120.0);
            Pavilion pav5 = new Pavilion("pav5", 90.0);
            Pavilion pav6 = new Pavilion("pav6", 110.0);
            Pavilion pav7 = new Pavilion("pav7", 95.0);
            Pavilion pav8 = new Pavilion("pav8", 85.0);
            Pavilion pav9 = new Pavilion("pav9", 105.0);

            Pavilion[] pavilions1 = {pav2, pav3, pav4, pav1, pav5};
            Ticket ticket1 = new Ticket(pavilions1);
            System.out.println("Ticket 1: " + ticket1);
            System.out.println("Ticket 1 Cost: $" + String.format("%.2f", ticket1.calculateCost()));

            Pavilion[] pavilions2 = {pav4, pav8, pav7, pav6, pav9};
            GroupTicket groupTicket1 = new GroupTicket(pavilions2, 10);
            System.out.println("\nGroup Ticket 1: " + groupTicket1);
            System.out.println("Group Ticket 1 Cost: $" + String.format("%.2f", groupTicket1.calculateCost()));

            GroupTicket groupTicket2 = new GroupTicket(pavilions2, 15);
            System.out.println("\nGroup Ticket 2: " + groupTicket2);
            System.out.println("Group Ticket 2 Cost: $" + String.format("%.2f", groupTicket2.calculateCost()));

            Ticket ticket2 = new Ticket(new Pavilion[]{pav1, pav2});
            System.out.println("\nTicket 2: " + ticket2);
            System.out.println("Ticket 2 Cost: $" + String.format("%.2f", ticket2.calculateCost()));

            try {
                Ticket invalidTicket = new Ticket(null);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            try {
                GroupTicket invalidGroupTicket = new GroupTicket(new Pavilion[]{pav1, null}, 10);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

             try {
                Pavilion invalidPavilion = new Pavilion("Invalid", -10);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            try {
                 GroupTicket invalidGroupTicket2 = new GroupTicket(new Pavilion[]{pav1}, 0);
            } catch (IllegalArgumentException e) {
                System.out.println("\nCaught Exception: " + e.getMessage());
            }

            Ticket ticket3 = new Ticket(pavilions1);
            System.out.println("\nTicket 1 equals Ticket 3: " + ticket1.equals(ticket3));
            System.out.println("Ticket 1 hashcode: " + ticket1.hashCode());
            System.out.println("Ticket 3 hashcode: " + ticket3.hashCode());

            GroupTicket groupTicket3 = new GroupTicket(pavilions2, 10);
            System.out.println("\nGroupTicket 1 equals GroupTicket 3: " + groupTicket1.equals(groupTicket3));
            System.out.println("GroupTicket 1 hashcode: " + groupTicket1.hashCode());
            System.out.println("GroupTicket 3 hashcode: " + groupTicket3.hashCode());

        } catch (IllegalArgumentException e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
}

</source>
</class>

<class classid="78" nclones="2" nlines="37" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/gemini/sol4/PavilionP.java" startline="1" endline="48" pcid="1449">
import java.util.Objects;

public class Pavilion {
    private final String name;
    private final double price;

    public Pavilion(String name, double price) {
        this.name = Objects.requireNonNull(name, "Pavilion name cannot be null");
        if (price < 0) {
            throw new IllegalArgumentException("Pavilion price cannot be negative (was " + price + ")");
        }
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pavilion other = (Pavilion) o;
        return Double.compare(other.price, price) == 0 && Objects.equals(name, other.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, price);
    }

    @Override
    public String toString() {
        return "Pavilion{" +
                "name='" + name + '\'' +
                ", price=" + price +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 1/gemini/sol5/PavilionP.java" startline="1" endline="48" pcid="1453">
import java.util.Objects;

public class Pavilion {
    private final String name;
    private final double price;

    public Pavilion(String name, double price) {
        this.name = Objects.requireNonNull(name, "Pavilion name cannot be null");
        if (price < 0) {
            throw new IllegalArgumentException("Pavilion price cannot be negative (was " + price + ")");
        }
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pavilion other = (Pavilion) o;
        return Double.compare(other.price, price) == 0 && Objects.equals(name, other.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, price);
    }

    @Override
    public String toString() {
        return "Pavilion{" +
                "name='" + name + '\'' +
                ", price=" + price +
                '}';
    }
}

</source>
</class>

<class classid="79" nclones="6" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol2/AirportP.java" startline="1" endline="18" pcid="1456">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() { return city; }
    public String getCountry() { return country; }
    public String getIataCode() { return iataCode; }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol3/AirportP.java" startline="1" endline="26" pcid="1555">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol3/AirportP.java" startline="1" endline="26" pcid="1494">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol1/AirportP.java" startline="1" endline="26" pcid="1511">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol2/AirportP.java" startline="1" endline="26" pcid="1487">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol1/AirportP.java" startline="1" endline="26" pcid="1480">
package exercise2;

public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
</class>

<class classid="80" nclones="6" nlines="11" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol2/PassengerP.java" startline="1" endline="13" pcid="1459">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() { return loyaltyCardNumber; }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol3/PassengerP.java" startline="1" endline="15" pcid="1558">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol1/PassengerP.java" startline="1" endline="15" pcid="1484">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol2/PassengerP.java" startline="1" endline="15" pcid="1491">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol3/PassengerP.java" startline="1" endline="15" pcid="1499">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol1/PassengerP.java" startline="1" endline="15" pcid="1515">
package exercise2;

public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
</class>

<class classid="81" nclones="5" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol3/AirportP.java" startline="1" endline="29" pcid="1462">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol4/AirportP.java" startline="1" endline="29" pcid="1561">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol4/AirportP.java" startline="1" endline="29" pcid="1468">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol5/AirportP.java" startline="1" endline="29" pcid="1474">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol5/AirportP.java" startline="1" endline="29" pcid="1569">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
</class>

<class classid="82" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol4/PersonP.java" startline="1" endline="27" pcid="1472">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    @Override
    public String toString() {
        return name + " [Passport: " + passportNumber + "]";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol5/PersonP.java" startline="1" endline="27" pcid="1478">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    @Override
    public String toString() {
        return name + " [Passport: " + passportNumber + "]";
    }
}

</source>
</class>

<class classid="83" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/chatgpt/sol5/PilotP.java" startline="1" endline="22" pcid="1479">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

    @Override
    public String toString() {
        return super.toString() + " [Airline: " + airline + "]";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol3/PilotP.java" startline="1" endline="22" pcid="1529">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

    @Override
    public String toString() {
        return super.toString() + " [Airline: " + airline + "]";
    }
}

</source>
</class>

<class classid="84" nclones="3" nlines="29" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol1/FlightP.java" startline="1" endline="38" pcid="1482">
package exercise2;

public class Flight {
    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol3/FlightP.java" startline="1" endline="38" pcid="1496">
package exercise2;

public class Flight {
    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol2/FlightP.java" startline="1" endline="38" pcid="1489">
package exercise2;

public class Flight {
    private String number;
    private Airport origin;
    private Airport destination;

    public Flight(String number, Airport origin, Airport destination) {
        this.number = number;
        this.origin = origin;
        this.destination = destination;
    }

    public String getNumber() {
        return number;
    }

    public Airport getOrigin() {
        return origin;
    }

    public Airport getDestination() {
        return destination;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public void setOrigin(Airport origin) {
        this.origin = origin;
    }

    public void setDestination(Airport destination) {
        this.destination = destination;
    }
}

</source>
</class>

<class classid="85" nclones="5" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol1/PersonP.java" startline="1" endline="24" pcid="1485">
package exercise2;

public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol1/PersonP.java" startline="1" endline="24" pcid="1516">
package exercise2;

public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol3/PersonP.java" startline="1" endline="24" pcid="1559">
package exercise2;

public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol3/PersonP.java" startline="1" endline="24" pcid="1500">
package exercise2;

public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol2/PersonP.java" startline="1" endline="24" pcid="1492">
package exercise2;

public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }
}

</source>
</class>

<class classid="86" nclones="5" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol1/PilotP.java" startline="1" endline="19" pcid="1486">
package exercise2;

public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol1/PilotP.java" startline="1" endline="19" pcid="1517">
package exercise2;

public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol3/PilotP.java" startline="1" endline="19" pcid="1560">
package exercise2;

public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol3/PilotP.java" startline="1" endline="19" pcid="1501">
package exercise2;

public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol2/PilotP.java" startline="1" endline="19" pcid="1493">
package exercise2;

public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
</class>

<class classid="87" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol4/AirportP.java" startline="1" endline="24" pcid="1502">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol5/AirportP.java" startline="1" endline="24" pcid="1507">
public class Airport {
    private String city;
    private String country;
    private String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }
}

</source>
</class>

<class classid="88" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol4/PassengerP.java" startline="1" endline="13" pcid="1505">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol5/PassengerP.java" startline="1" endline="13" pcid="1509">
public class Passenger extends Person {
    private int loyaltyCardNumber;

    public Passenger(String name, String passportNumber, int loyaltyCardNumber) {
        super(name, passportNumber);
        this.loyaltyCardNumber = loyaltyCardNumber;
    }

    public int getLoyaltyCardNumber() {
        return loyaltyCardNumber;
    }
}

</source>
</class>

<class classid="89" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol4/PilotP.java" startline="1" endline="17" pcid="1506">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/copilot/sol5/PilotP.java" startline="1" endline="17" pcid="1510">
public class Pilot extends Person {
    private String airline;

    public Pilot(String name, String passportNumber, String airline) {
        super(name, passportNumber);
        this.airline = airline;
    }

    public String getAirline() {
        return airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }
}

</source>
</class>

<class classid="90" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol2/AirportP.java" startline="1" endline="21" pcid="1518">
public class Airport {
    private final String city;
    private final String country;
    private final String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() { return city; }
    public String getCountry() { return country; }
    public String getIataCode() { return iataCode; }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/deepseek/sol3/AirportP.java" startline="1" endline="29" pcid="1524">
public class Airport {
    private final String city;
    private final String country;
    private final String iataCode;

    public Airport(String city, String country, String iataCode) {
        this.city = city;
        this.country = country;
        this.iataCode = iataCode;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getIataCode() {
        return iataCode;
    }

    @Override
    public String toString() {
        return iataCode + " (" + city + ", " + country + ")";
    }
}

</source>
</class>

<class classid="91" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol4/PersonP.java" startline="1" endline="27" pcid="1567">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    @Override
    public String toString() {
        return name + " (Passport: " + passportNumber + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 2/gemini/sol5/PersonP.java" startline="1" endline="27" pcid="1573">
public class Person {
    private String name;
    private String passportNumber;

    public Person(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    public String getName() {
        return name;
    }

    public String getPassportNumber() {
        return passportNumber;
    }

    public void setPassportNumber(String passportNumber) {
        this.passportNumber = passportNumber;
    }

    @Override
    public String toString() {
        return name + " (Passport: " + passportNumber + ")";
    }
}

</source>
</class>

<class classid="92" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol4/MainP.java" startline="1" endline="37" pcid="1595">
public class Main {
    public static void main(String[] args) {
        User user1 = new User("1", "Alice");
        User user2 = new User("2", "Bob");
        User user3 = new User("3", "Charlie");

        Page page1 = new Page("101", "Tech Page");
        Page page2 = new Page("102", "Travel Page");

        Post post1 = new Post("Alice's first post!");
        Post post2 = new Post("Bob's first post!");
        Post post3 = new Post("Tech Page is live!");
        Post post4 = new Post("Travel Page is exploring new destinations!");

        user1.addPost(post1);
        user2.addPost(post2);
        page1.addPost(post3);
        page2.addPost(post4);

        user1.addFriend(user2);
        user2.addFriend(user1);

        System.out.println("\n--- Alice's Timeline ---");
        user1.showTimeline(user2);

        System.out.println("\n--- Bob's Timeline ---");
        user2.showTimeline(user1);

        System.out.println("\n--- Page 1 Timeline ---");
        page1.showTimeline(user1);

        System.out.println("\n--- Liking Pages ---");
        page1.likePage();
        page2.likePage();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol5/MainP.java" startline="1" endline="37" pcid="1600">
public class Main {
    public static void main(String[] args) {
        User user1 = new User("1", "Alice");
        User user2 = new User("2", "Bob");
        User user3 = new User("3", "Charlie");

        Page page1 = new Page("101", "Tech Page");
        Page page2 = new Page("102", "Travel Page");

        Post post1 = new Post("Alice's first post!");
        Post post2 = new Post("Bob's first post!");
        Post post3 = new Post("Tech Page is live!");
        Post post4 = new Post("Travel Page is exploring new destinations!");

        user1.addPost(post1);
        user2.addPost(post2);
        page1.addPost(post3);
        page2.addPost(post4);

        user1.addFriend(user2);
        user2.addFriend(user1);

        System.out.println("\n--- Alice's Timeline ---");
        user1.showTimeline(user2);

        System.out.println("\n--- Bob's Timeline ---");
        user2.showTimeline(user1);

        System.out.println("\n--- Page 1 Timeline ---");
        page1.showTimeline(user1);

        System.out.println("\n--- Liking Pages ---");
        page1.likePage();
        page2.likePage();
    }
}

</source>
</class>

<class classid="93" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol4/PageP.java" startline="1" endline="26" pcid="1596">
public class Page extends Profile {
    private int likeCount;

    public Page(String id, String name) {
        super(id, name);
        this.likeCount = 0;
    }

    public int getLikeCount() {
        return likeCount;
    }

    public void likePage() {
        likeCount++;
        System.out.println(getName() + " has been liked! Current like count: " + likeCount);
    }

    @Override
    public void showTimeline(Profile viewer) {
        System.out.println("Page Timeline (Public):");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol5/PageP.java" startline="1" endline="26" pcid="1601">
public class Page extends Profile {
    private int likeCount;

    public Page(String id, String name) {
        super(id, name);
        this.likeCount = 0;
    }

    public int getLikeCount() {
        return likeCount;
    }

    public void likePage() {
        likeCount++;
        System.out.println(getName() + " has been liked! Current like count: " + likeCount);
    }

    @Override
    public void showTimeline(Profile viewer) {
        System.out.println("Page Timeline (Public):");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
</class>

<class classid="94" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol4/PostP.java" startline="1" endline="17" pcid="1597">
public class Post {
    private String content;

    public Post(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    @Override
    public String toString() {
        return content;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol5/PostP.java" startline="1" endline="17" pcid="1602">
public class Post {
    private String content;

    public Post(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    @Override
    public String toString() {
        return content;
    }
}

</source>
</class>

<class classid="95" nclones="2" nlines="29" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol4/ProfileP.java" startline="1" endline="38" pcid="1598">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    private String id;
    private String name;
    private List<Post> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(Post post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile viewer);

    @Override
    public String toString() {
        return "Profile: " + name;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol5/ProfileP.java" startline="1" endline="38" pcid="1603">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    private String id;
    private String name;
    private List<Post> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(Post post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile viewer);

    @Override
    public String toString() {
        return "Profile: " + name;
    }
}

</source>
</class>

<class classid="96" nclones="2" nlines="30" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol4/UserP.java" startline="1" endline="35" pcid="1599">
import java.util.HashSet;
import java.util.Set;

public class User extends Profile {
    private Set<User> friends;

    public User(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public Set<User> getFriends() {
        return friends;
    }

    public void addFriend(User friend) {
        if (friend != null) {
            friends.add(friend);
            System.out.println(getName() + " and " + friend.getName() + " are now friends!");
        }
    }

    @Override
    public void showTimeline(Profile viewer) {
        if (viewer instanceof User && friends.contains(viewer)) {
            System.out.println("Showing timeline to friend: " + viewer.getName());
            for (Post post : getPosts()) {
                System.out.println(post);
            }
        } else if (viewer instanceof Page) {
            System.out.println("Only friends can view each other's timelines.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/chatgpt/sol5/UserP.java" startline="1" endline="35" pcid="1604">
import java.util.HashSet;
import java.util.Set;

public class User extends Profile {
    private Set<User> friends;

    public User(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public Set<User> getFriends() {
        return friends;
    }

    public void addFriend(User friend) {
        if (friend != null) {
            friends.add(friend);
            System.out.println(getName() + " and " + friend.getName() + " are now friends!");
        }
    }

    @Override
    public void showTimeline(Profile viewer) {
        if (viewer instanceof User && friends.contains(viewer)) {
            System.out.println("Showing timeline to friend: " + viewer.getName());
            for (Post post : getPosts()) {
                System.out.println(post);
            }
        } else if (viewer instanceof Page) {
            System.out.println("Only friends can view each other's timelines.");
        }
    }
}

</source>
</class>

<class classid="97" nclones="3" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol1/MainP.java" startline="1" endline="33" pcid="1605">
package exercise3;

public class Main {
    public static void main(String[] args) {
        User user1 = new User("Alice");
        User user2 = new User("Bob");
        Page page1 = new Page("Tech News");

        user1.addFriend(user2);

        Post post1 = new Post("Hello, world!");
        Post post2 = new Post("Learning Java!");
        Post post3 = new Post("Latest tech updates!");

        user1.addPost(post1);
        user2.addPost(post2);
        page1.addPost(post3);

        System.out.println("User1's timeline as seen by User2:");
        user1.showTimeline(user2);

        System.out.println("\nUser2's timeline as seen by User1:");
        user2.showTimeline(user1);

        System.out.println("\nPage1's timeline as seen by User1:");
        page1.showTimeline(user1);

        System.out.println("\nPage1's like counter before liking: " + page1.getLikeCounter());
        page1.like();
        System.out.println("Page1's like counter after liking: " + page1.getLikeCounter());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol2/MainP.java" startline="1" endline="33" pcid="1610">
package exercise3;

public class Main {
    public static void main(String[] args) {
        User user1 = new User("Alice");
        User user2 = new User("Bob");
        Page page1 = new Page("Tech News");

        user1.addFriend(user2);

        Post post1 = new Post("Hello, world!");
        Post post2 = new Post("Learning Java!");
        Post post3 = new Post("Latest tech updates!");

        user1.addPost(post1);
        user2.addPost(post2);
        page1.addPost(post3);

        System.out.println("User1's timeline as seen by User2:");
        user1.showTimeline(user2);

        System.out.println("\nUser2's timeline as seen by User1:");
        user2.showTimeline(user1);

        System.out.println("\nPage1's timeline as seen by User1:");
        page1.showTimeline(user1);

        System.out.println("\nPage1's like counter before liking: " + page1.getLikeCounter());
        page1.like();
        System.out.println("Page1's like counter after liking: " + page1.getLikeCounter());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol3/MainP.java" startline="1" endline="33" pcid="1615">
package exercise3;

public class Main {
    public static void main(String[] args) {
        User user1 = new User("Alice");
        User user2 = new User("Bob");
        Page page1 = new Page("Tech News");

        user1.addFriend(user2);

        Post post1 = new Post("Hello, world!");
        Post post2 = new Post("Learning Java!");
        Post post3 = new Post("Latest tech updates!");

        user1.addPost(post1);
        user2.addPost(post2);
        page1.addPost(post3);

        System.out.println("User1's timeline as seen by User2:");
        user1.showTimeline(user2);

        System.out.println("\nUser2's timeline as seen by User1:");
        user2.showTimeline(user1);

        System.out.println("\nPage1's timeline as seen by User1:");
        page1.showTimeline(user1);

        System.out.println("\nPage1's like counter before liking: " + page1.getLikeCounter());
        page1.like();
        System.out.println("Page1's like counter after liking: " + page1.getLikeCounter());
    }
}

</source>
</class>

<class classid="98" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol1/PageP.java" startline="1" endline="27" pcid="1606">
package exercise3;

public class Page extends Profile {
    private int likeCounter;

    public Page(String name) {
        super(name);
        this.likeCounter = 0;
    }

    public int getLikeCounter() {
        return likeCounter;
    }

    public void like() {
        likeCounter++;
    }

    @Override
    public void showTimeline(Profile observer) {
        System.out.println("Timeline of " + getName() + ":");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol2/PageP.java" startline="1" endline="27" pcid="1611">
package exercise3;

public class Page extends Profile {
    private int likeCounter;

    public Page(String name) {
        super(name);
        this.likeCounter = 0;
    }

    public int getLikeCounter() {
        return likeCounter;
    }

    public void like() {
        likeCounter++;
    }

    @Override
    public void showTimeline(Profile observer) {
        System.out.println("Timeline of " + getName() + ":");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
</class>

<class classid="99" nclones="3" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol1/PostP.java" startline="1" endline="30" pcid="1607">
package exercise3;

import java.util.Date;

public class Post {
    private String content;
    private Date timestamp;

    public Post(String content) {
        this.content = content;
        this.timestamp = new Date();
    }

    public String getContent() {
        return content;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "Post{" +
                "content='" + content + '\'' +
                ", timestamp=" + timestamp +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol3/ProfileP.java" startline="1" endline="30" pcid="1619">
package exercise3;

import java.util.Date;

public class Post {
    private String content;
    private Date timestamp;

    public Post(String content) {
        this.content = content;
        this.timestamp = new Date();
    }

    public String getContent() {
        return content;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "Post{" +
                "content='" + content + '\'' +
                ", timestamp=" + timestamp +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol2/PostP.java" startline="1" endline="30" pcid="1612">
package exercise3;

import java.util.Date;

public class Post {
    private String content;
    private Date timestamp;

    public Post(String content) {
        this.content = content;
        this.timestamp = new Date();
    }

    public String getContent() {
        return content;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "Post{" +
                "content='" + content + '\'' +
                ", timestamp=" + timestamp +
                '}';
    }
}

</source>
</class>

<class classid="100" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol1/UserP.java" startline="1" endline="34" pcid="1609">
package exercise3;

import java.util.HashSet;
import java.util.Set;

public class User extends Profile {
    private Set<User> friends;

    public User(String name) {
        super(name);
        this.friends = new HashSet<>();
    }

    public Set<User> getFriends() {
        return friends;
    }

    public void addFriend(User friend) {
        friends.add(friend);
    }

    @Override
    public void showTimeline(Profile observer) {
        if (observer instanceof User && friends.contains(observer)) {
            System.out.println("Timeline of " + getName() + ":");
            for (Post post : getPosts()) {
                System.out.println(post);
            }
        } else {
            System.out.println("Access denied to the timeline of " + getName());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol2/UserP.java" startline="1" endline="34" pcid="1614">
package exercise3;

import java.util.HashSet;
import java.util.Set;

public class User extends Profile {
    private Set<User> friends;

    public User(String name) {
        super(name);
        this.friends = new HashSet<>();
    }

    public Set<User> getFriends() {
        return friends;
    }

    public void addFriend(User friend) {
        friends.add(friend);
    }

    @Override
    public void showTimeline(Profile observer) {
        if (observer instanceof User && friends.contains(observer)) {
            System.out.println("Timeline of " + getName() + ":");
            for (Post post : getPosts()) {
                System.out.println(post);
            }
        } else {
            System.out.println("Access denied to the timeline of " + getName());
        }
    }
}

</source>
</class>

<class classid="101" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol2/ProfileP.java" startline="1" endline="36" pcid="1613">
package exercise3;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public abstract class Profile {
    private UUID id;
    private String name;
    private List<Post> posts;

    public Profile(String name) {
        this.id = UUID.randomUUID();
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public UUID getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(Post post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile observer);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol3/PostP.java" startline="1" endline="36" pcid="1617">
package exercise3;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public abstract class Profile {
    private UUID id;
    private String name;
    private List<Post> posts;

    public Profile(String name) {
        this.id = UUID.randomUUID();
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public UUID getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(Post post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile observer);
}

</source>
</class>

<class classid="102" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol4/FacebookSimulationP.java" startline="1" endline="29" pcid="1621">
public class FacebookSimulation {
    public static void main(String[] args) {
        RegularUser user1 = new RegularUser("1", "Alice");
        RegularUser user2 = new RegularUser("2", "Bob");
        Page page1 = new Page("3", "Tech News");

        user1.addPost("Hello, this is Alice!");
        user2.addPost("Hi, I'm Bob!");
        page1.addPost("Latest tech news!");

        user1.addFriend(user2);

        System.out.println("User1's timeline viewed by User2:");
        user1.showTimeline(user2);

        System.out.println("User2's timeline viewed by User1:");
        user2.showTimeline(user1);

        System.out.println("Page1's timeline viewed by User1:");
        page1.showTimeline(user1);

        System.out.println("Page1's timeline viewed by User2:");
        page1.showTimeline(user2);

        page1.likePage();
        System.out.println("Page1's like count: " + page1.likeCounter);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol5/FacebookSimulationP.java" startline="1" endline="29" pcid="1625">
public class FacebookSimulation {
    public static void main(String[] args) {
        RegularUser user1 = new RegularUser("1", "Alice");
        RegularUser user2 = new RegularUser("2", "Bob");
        Page page1 = new Page("3", "Tech News");

        user1.addPost("Hello, this is Alice!");
        user2.addPost("Hi, I'm Bob!");
        page1.addPost("Latest tech news!");

        user1.addFriend(user2);

        System.out.println("User1's timeline viewed by User2:");
        user1.showTimeline(user2);

        System.out.println("User2's timeline viewed by User1:");
        user2.showTimeline(user1);

        System.out.println("Page1's timeline viewed by User1:");
        page1.showTimeline(user1);

        System.out.println("Page1's timeline viewed by User2:");
        page1.showTimeline(user2);

        page1.likePage();
        System.out.println("Page1's like count: " + page1.likeCounter);
    }
}

</source>
</class>

<class classid="103" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol4/PageP.java" startline="1" endline="18" pcid="1622">
public class Page extends Profile {
    private int likeCounter;

    public Page(String id, String name) {
        super(id, name);
        this.likeCounter = 0;
    }

    public void likePage() {
        likeCounter++;
    }

    @Override
    public void showTimeline(Profile observer) {
        System.out.println("Timeline of " + name + ": " + posts);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol5/PageP.java" startline="1" endline="18" pcid="1626">
public class Page extends Profile {
    private int likeCounter;

    public Page(String id, String name) {
        super(id, name);
        this.likeCounter = 0;
    }

    public void likePage() {
        likeCounter++;
    }

    @Override
    public void showTimeline(Profile observer) {
        System.out.println("Timeline of " + name + ": " + posts);
    }
}

</source>
</class>

<class classid="104" nclones="2" nlines="16" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol4/ProfileP.java" startline="1" endline="21" pcid="1623">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    protected String id;
    protected String name;
    protected List<String> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public void addPost(String post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile observer);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol5/ProfileP.java" startline="1" endline="21" pcid="1627">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    protected String id;
    protected String name;
    protected List<String> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public void addPost(String post) {
        posts.add(post);
    }

    public abstract void showTimeline(Profile observer);
}

</source>
</class>

<class classid="105" nclones="2" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol4/RegularUserP.java" startline="1" endline="25" pcid="1624">
import java.util.HashSet;
import java.util.Set;

public class RegularUser extends Profile {
    private Set<RegularUser> friends;

    public RegularUser(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public void addFriend(RegularUser friend) {
        friends.add(friend);
    }

    @Override
    public void showTimeline(Profile observer) {
        if (observer instanceof RegularUser && friends.contains(observer)) {
            System.out.println("Timeline of " + name + ": " + posts);
        } else {
            System.out.println("Access denied to timeline of " + name);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/copilot/sol5/RegularUserP.java" startline="1" endline="25" pcid="1628">
import java.util.HashSet;
import java.util.Set;

public class RegularUser extends Profile {
    private Set<RegularUser> friends;

    public RegularUser(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public void addFriend(RegularUser friend) {
        friends.add(friend);
    }

    @Override
    public void showTimeline(Profile observer) {
        if (observer instanceof RegularUser && friends.contains(observer)) {
            System.out.println("Timeline of " + name + ": " + posts);
        } else {
            System.out.println("Access denied to timeline of " + name);
        }
    }
}

</source>
</class>

<class classid="106" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/deepseek/sol1/FacebookAppP.java" startline="1" endline="23" pcid="1629">
package exercise3;

public class FacebookApp {
    public static void main(String[] args) {
        User user1 = new User("U1", "Alice");
        User user2 = new User("U2", "Bob");
        Page page = new Page("P1", "Tech News");

        user1.addFriend(user2);

        user1.addPost(new Post("Hello, world!"));
        user2.addPost(new Post("Having a great day!"));
        page.addPost(new Post("New tech update!"));

        user1.showTimeline(user2);
        user2.showTimeline(user1);
        page.showTimeline(user1);

        page.like();
        System.out.println("Page likes: " + page.getLikeCounter());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/deepseek/sol3/FacebookAppP.java" startline="1" endline="23" pcid="1639">
package exercise3;

public class FacebookApp {
    public static void main(String[] args) {
        User user1 = new User("U1", "Alice");
        User user2 = new User("U2", "Bob");
        Page page = new Page("P1", "Tech News");

        user1.addFriend(user2);

        user1.addPost(new Post("Hello, world!"));
        user2.addPost(new Post("Having a great day!"));
        page.addPost(new Post("New tech update!"));

        user1.showTimeline(user2);
        user2.showTimeline(user1);
        page.showTimeline(user1);

        page.like();
        System.out.println("Page likes: " + page.getLikeCounter());
    }
}

</source>
</class>

<class classid="107" nclones="3" nlines="41" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol3/MainP.java" startline="1" endline="57" pcid="1662">
public class Main {
    public static void main(String[] args) {
        UserProfile alice = new UserProfile("alice123", "Alice Smith");
        UserProfile bob = new UserProfile("bob456", "Bob Johnson");
        UserProfile charlie = new UserProfile("charlie789", "Charlie Brown");

        PageProfile coolPage = new PageProfile("coolpage1", "Cool Gadgets");
        PageProfile awesomeCafe = new PageProfile("cafe22", "Awesome Cafe");

        alice.addFriend(bob);
        bob.addFriend(charlie);

        alice.addPost("Just had a great morning!");
        bob.addPost("Coding session in progress...");
        coolPage.addPost("Check out our new SmartWatch!");
        awesomeCafe.addPost("Our new menu is out!");

        alice.likePage();
        alice.likePage();
        bob.likePage();
        charlie.likePage();
        coolPage.likePage();

        System.out.println("\n--- Showing Timelines ---");

        System.out.println("\nAlice's Timeline (viewed by Alice):");
        alice.showTimeline(alice);

        System.out.println("\nAlice's Timeline (viewed by Bob):");
        alice.showTimeline(bob);

        System.out.println("\nAlice's Timeline (viewed by Charlie):");
        alice.showTimeline(charlie);

        System.out.println("\nBob's Timeline (viewed by Alice):");
        bob.showTimeline(alice);

        System.out.println("\nBob's Timeline (viewed by Charlie):");
        bob.showTimeline(charlie);

        System.out.println("\nCharlie's Timeline (viewed by Bob):");
        charlie.showTimeline(bob);

        System.out.println("\nCool Gadgets' Timeline (viewed by Alice):");
        coolPage.showTimeline(alice);

        System.out.println("\nAwesome Cafe's Timeline (viewed by Bob):");
        awesomeCafe.showTimeline(bob);

        System.out.println("\nAlice tries to view Cool Gadgets' Timeline (as a User viewing a Page):");
        coolPage.showTimeline(alice);

        System.out.println("\nCool Gadgets tries to view Alice's Timeline (as a Page viewing a User):");
        alice.showTimeline(coolPage);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol4/MainP.java" startline="1" endline="57" pcid="1666">
public class Main {
    public static void main(String[] args) {
        UserProfile alice = new UserProfile("alice123", "Alice Smith");
        UserProfile bob = new UserProfile("bob456", "Bob Johnson");
        UserProfile charlie = new UserProfile("charlie789", "Charlie Brown");

        PageProfile coolPage = new PageProfile("coolpage1", "Cool Gadgets");
        PageProfile awesomeCafe = new PageProfile("cafe22", "Awesome Cafe");

        alice.addFriend(bob);
        bob.addFriend(charlie);

        alice.addPost("Just had a great morning!");
        bob.addPost("Coding session in progress...");
        coolPage.addPost("Check out our new SmartWatch!");
        awesomeCafe.addPost("Our new menu is out!");

        alice.likePage();
        alice.likePage();
        bob.likePage();
        charlie.likePage();
        coolPage.likePage();

        System.out.println("\n--- Showing Timelines ---");

        System.out.println("\nAlice's Timeline (viewed by Alice):");
        alice.showTimeline(alice);

        System.out.println("\nAlice's Timeline (viewed by Bob):");
        alice.showTimeline(bob);

        System.out.println("\nAlice's Timeline (viewed by Charlie):");
        alice.showTimeline(charlie);

        System.out.println("\nBob's Timeline (viewed by Alice):");
        bob.showTimeline(alice);

        System.out.println("\nBob's Timeline (viewed by Charlie):");
        bob.showTimeline(charlie);

        System.out.println("\nCharlie's Timeline (viewed by Bob):");
        charlie.showTimeline(bob);

        System.out.println("\nCool Gadgets' Timeline (viewed by Alice):");
        coolPage.showTimeline(alice);

        System.out.println("\nAwesome Cafe's Timeline (viewed by Bob):");
        awesomeCafe.showTimeline(bob);

        System.out.println("\nAlice tries to view Cool Gadgets' Timeline (as a User viewing a Page):");
        coolPage.showTimeline(alice);

        System.out.println("\nCool Gadgets tries to view Alice's Timeline (as a Page viewing a User):");
        alice.showTimeline(coolPage);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol5/MainP.java" startline="1" endline="57" pcid="1671">
public class Main {
    public static void main(String[] args) {
        UserProfile alice = new UserProfile("alice123", "Alice Smith");
        UserProfile bob = new UserProfile("bob456", "Bob Johnson");
        UserProfile charlie = new UserProfile("charlie789", "Charlie Brown");

        PageProfile coolPage = new PageProfile("coolpage1", "Cool Gadgets");
        PageProfile awesomeCafe = new PageProfile("cafe22", "Awesome Cafe");

        alice.addFriend(bob);
        bob.addFriend(charlie);

        alice.addPost("Just had a great morning!");
        bob.addPost("Coding session in progress...");
        coolPage.addPost("Check out our new SmartWatch!");
        awesomeCafe.addPost("Our new menu is out!");

        alice.likePage();
        alice.likePage();
        bob.likePage();
        charlie.likePage();
        coolPage.likePage();

        System.out.println("\n--- Showing Timelines ---");

        System.out.println("\nAlice's Timeline (viewed by Alice):");
        alice.showTimeline(alice);

        System.out.println("\nAlice's Timeline (viewed by Bob):");
        alice.showTimeline(bob);

        System.out.println("\nAlice's Timeline (viewed by Charlie):");
        alice.showTimeline(charlie);

        System.out.println("\nBob's Timeline (viewed by Alice):");
        bob.showTimeline(alice);

        System.out.println("\nBob's Timeline (viewed by Charlie):");
        bob.showTimeline(charlie);

        System.out.println("\nCharlie's Timeline (viewed by Bob):");
        charlie.showTimeline(bob);

        System.out.println("\nCool Gadgets' Timeline (viewed by Alice):");
        coolPage.showTimeline(alice);

        System.out.println("\nAwesome Cafe's Timeline (viewed by Bob):");
        awesomeCafe.showTimeline(bob);

        System.out.println("\nAlice tries to view Cool Gadgets' Timeline (as a User viewing a Page):");
        coolPage.showTimeline(alice);

        System.out.println("\nCool Gadgets tries to view Alice's Timeline (as a Page viewing a User):");
        alice.showTimeline(coolPage);
    }
}

</source>
</class>

<class classid="108" nclones="3" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol3/PageProfileP.java" startline="1" endline="26" pcid="1663">
public class PageProfile extends Profile {
    private int likeCount;

    public PageProfile(String id, String name) {
        super(id, name);
        this.likeCount = 0;
    }

    public int getLikeCount() {
        return likeCount;
    }

    public void likePage() {
        this.likeCount++;
        System.out.println(getName() + " now has " + likeCount + " likes.");
    }

    @Override
    public void showTimeline(Profile viewer) {
        System.out.println("--- " + getName() + "'s Timeline ---");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol4/PageProfileP.java" startline="1" endline="26" pcid="1667">
public class PageProfile extends Profile {
    private int likeCount;

    public PageProfile(String id, String name) {
        super(id, name);
        this.likeCount = 0;
    }

    public int getLikeCount() {
        return likeCount;
    }

    public void likePage() {
        this.likeCount++;
        System.out.println(getName() + " now has " + likeCount + " likes.");
    }

    @Override
    public void showTimeline(Profile viewer) {
        System.out.println("--- " + getName() + "'s Timeline ---");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol5/PageProfileP.java" startline="1" endline="26" pcid="1672">
public class PageProfile extends Profile {
    private int likeCount;

    public PageProfile(String id, String name) {
        super(id, name);
        this.likeCount = 0;
    }

    public int getLikeCount() {
        return likeCount;
    }

    public void likePage() {
        this.likeCount++;
        System.out.println(getName() + " now has " + likeCount + " likes.");
    }

    @Override
    public void showTimeline(Profile viewer) {
        System.out.println("--- " + getName() + "'s Timeline ---");
        for (Post post : getPosts()) {
            System.out.println(post);
        }
    }
}

</source>
</class>

<class classid="109" nclones="2" nlines="34" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol3/UserProfileP.java" startline="1" endline="38" pcid="1665">
import java.util.HashSet;
import java.util.Set;

public class UserProfile extends Profile {
    private Set<UserProfile> friends;

    public UserProfile(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public Set<UserProfile> getFriends() {
        return friends;
    }

    public void addFriend(UserProfile friend) {
        this.friends.add(friend);
        friend.getFriends().add(this);
    }

    @Override
    public void showTimeline(Profile viewer) {
        if (viewer instanceof UserProfile) {
            UserProfile userViewer = (UserProfile) viewer;
            if (this.equals(userViewer) || friends.contains(userViewer)) {
                System.out.println("--- " + getName() + "'s Timeline ---");
                for (Post post : getPosts()) {
                    System.out.println(post);
                }
            } else {
                System.out.println("Sorry, you are not friends with " + getName() + " to view their timeline.");
            }
        } else {
            System.out.println("Pages cannot view user timelines.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol5/UserProfileP.java" startline="1" endline="38" pcid="1675">
import java.util.HashSet;
import java.util.Set;

public class UserProfile extends Profile {
    private Set<UserProfile> friends;

    public UserProfile(String id, String name) {
        super(id, name);
        this.friends = new HashSet<>();
    }

    public Set<UserProfile> getFriends() {
        return friends;
    }

    public void addFriend(UserProfile friend) {
        this.friends.add(friend);
        friend.getFriends().add(this);
    }

    @Override
    public void showTimeline(Profile viewer) {
        if (viewer instanceof UserProfile) {
            UserProfile userViewer = (UserProfile) viewer;
            if (this.equals(userViewer) || friends.contains(userViewer)) {
                System.out.println("--- " + getName() + "'s Timeline ---");
                for (Post post : getPosts()) {
                    System.out.println(post);
                }
            } else {
                System.out.println("Sorry, you are not friends with " + getName() + " to view their timeline.");
            }
        } else {
            System.out.println("Pages cannot view user timelines.");
        }
    }
}

</source>
</class>

<class classid="110" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol4/PostP.java" startline="1" endline="23" pcid="1668">
public class Post {
    private String content;
    private String timestamp;

    public Post(String content) {
        this.content = content;
        this.timestamp = java.time.LocalDateTime.now().toString();
    }

    public String getContent() {
        return content;
    }

    public String getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "[" + timestamp + "] " + content;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol5/PostP.java" startline="1" endline="23" pcid="1673">
public class Post {
    private String content;
    private String timestamp;

    public Post(String content) {
        this.content = content;
        this.timestamp = java.time.LocalDateTime.now().toString();
    }

    public String getContent() {
        return content;
    }

    public String getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "[" + timestamp + "] " + content;
    }
}

</source>
</class>

<class classid="111" nclones="2" nlines="25" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol4/ProfileP.java" startline="1" endline="33" pcid="1669">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    private String id;
    private String name;
    private List<Post> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(String content) {
        this.posts.add(new Post(content));
    }

    public abstract void showTimeline(Profile viewer);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab6/Ex. 3/gemini/sol5/ProfileP.java" startline="1" endline="33" pcid="1674">
import java.util.ArrayList;
import java.util.List;

public abstract class Profile {
    private String id;
    private String name;
    private List<Post> posts;

    public Profile(String id, String name) {
        this.id = id;
        this.name = name;
        this.posts = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(String content) {
        this.posts.add(new Post(content));
    }

    public abstract void showTimeline(Profile viewer);
}

</source>
</class>

<class classid="112" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/chatgpt/sol3/ControllerP.java" startline="1" endline="16" pcid="1689">
public class Controller {
    public static void main(String[] args) {
        Robot robot = new Robot();
        Controller controller = new Controller();

        Action[] actions = { new GoForward(), new PickRock(), new GoForward() };
        controller.executeActions(robot, actions);
    }

    public void executeActions(Robot robot, Action[] actions) {
        for (Action action : actions) {
            robot.executeAction(action);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/chatgpt/sol4/ControllerP.java" startline="1" endline="16" pcid="1694">
public class Controller {
    public static void main(String[] args) {
        Robot robot = new Robot();
        Controller controller = new Controller();

        Action[] actions = { new GoForward(), new PickRock(), new GoForward() };
        controller.executeActions(robot, actions);
    }

    public void executeActions(Robot robot, Action[] actions) {
        for (Action action : actions) {
            robot.executeAction(action);
        }
    }
}

</source>
</class>

<class classid="113" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/ControllerP.java" startline="1" endline="27" pcid="1718">
import java.util.ArrayList;
import java.util.List;

public class Controller {
    private List<Action> actions;

    public Controller() {
        this.actions = new ArrayList<>();
    }

    public void addAction(Action action) {
        if (actions.size() < 10) {
            actions.add(action);
        } else {
            System.out.println("Action limit reached.");
        }
    }

    public void executeActions(Robot robot) {
        for (Action action : actions) {
            action.execute(robot);
        }
        System.out.println("Total actions performed: " + actions.size());
        System.out.println("Remaining battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/ControllerP.java" startline="1" endline="27" pcid="1725">
import java.util.ArrayList;
import java.util.List;

public class Controller {
    private List<Action> actions;

    public Controller() {
        this.actions = new ArrayList<>();
    }

    public void addAction(Action action) {
        if (actions.size() < 10) {
            actions.add(action);
        } else {
            System.out.println("Action limit reached.");
        }
    }

    public void executeActions(Robot robot) {
        for (Action action : actions) {
            action.execute(robot);
        }
        System.out.println("Total actions performed: " + actions.size());
        System.out.println("Remaining battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
</class>

<class classid="114" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/MissionMarsP.java" startline="1" endline="20" pcid="1719">
public class MissionMars {
    public static void main(String[] args) {
        Robot robot = new Robot();
        Controller controller = new Controller();

        controller.addAction(new MoveAction("forward"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new PickRockAction());
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new PhotoAction("high"));
        controller.addAction(new MoveAction("right"));

        controller.executeActions(robot);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/MissionMarsP.java" startline="1" endline="20" pcid="1726">
public class MissionMars {
    public static void main(String[] args) {
        Robot robot = new Robot();
        Controller controller = new Controller();

        controller.addAction(new MoveAction("forward"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("left"));
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new PickRockAction());
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new MoveAction("forward"));
        controller.addAction(new PhotoAction("high"));
        controller.addAction(new MoveAction("right"));

        controller.executeActions(robot);
    }
}

</source>
</class>

<class classid="115" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/MoveActionP.java" startline="1" endline="16" pcid="1720">
public class MoveAction extends Action {
    private String direction;

    public MoveAction(String direction) {
        this.direction = direction;
        this.batteryCost = 10;
    }

    @Override
    public void execute(Robot robot) {
        robot.move(direction);
        robot.decreaseBattery(batteryCost);
        System.out.println("Moved " + direction + ". Battery used: " + batteryCost + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/MoveActionP.java" startline="1" endline="16" pcid="1727">
public class MoveAction extends Action {
    private String direction;

    public MoveAction(String direction) {
        this.direction = direction;
        this.batteryCost = 10;
    }

    @Override
    public void execute(Robot robot) {
        robot.move(direction);
        robot.decreaseBattery(batteryCost);
        System.out.println("Moved " + direction + ". Battery used: " + batteryCost + " seconds.");
    }
}

</source>
</class>

<class classid="116" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/PhotoActionP.java" startline="1" endline="16" pcid="1721">
public class PhotoAction extends Action {
    private String resolution;

    public PhotoAction(String resolution) {
        this.resolution = resolution;
        this.batteryCost = resolution.equals("high") ? 60 : 40;
    }

    @Override
    public void execute(Robot robot) {
        robot.takePhoto(resolution);
        robot.decreaseBattery(batteryCost);
        System.out.println("Took " + resolution + " resolution photo. Battery used: " + batteryCost + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/PhotoActionP.java" startline="1" endline="16" pcid="1728">
public class PhotoAction extends Action {
    private String resolution;

    public PhotoAction(String resolution) {
        this.resolution = resolution;
        this.batteryCost = resolution.equals("high") ? 60 : 40;
    }

    @Override
    public void execute(Robot robot) {
        robot.takePhoto(resolution);
        robot.decreaseBattery(batteryCost);
        System.out.println("Took " + resolution + " resolution photo. Battery used: " + batteryCost + " seconds.");
    }
}

</source>
</class>

<class classid="117" nclones="2" nlines="11" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/PickRockActionP.java" startline="1" endline="13" pcid="1722">
public class PickRockAction extends Action {
    public PickRockAction() {
        this.batteryCost = 150;
    }

    @Override
    public void execute(Robot robot) {
        robot.pickRock();
        robot.decreaseBattery(batteryCost);
        System.out.println("Picked a rock. Battery used: " + batteryCost + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/PickRockActionP.java" startline="1" endline="13" pcid="1729">
public class PickRockAction extends Action {
    public PickRockAction() {
        this.batteryCost = 150;
    }

    @Override
    public void execute(Robot robot) {
        robot.pickRock();
        robot.decreaseBattery(batteryCost);
        System.out.println("Picked a rock. Battery used: " + batteryCost + " seconds.");
    }
}

</source>
</class>

<class classid="118" nclones="2" nlines="36" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol2/RobotP.java" startline="1" endline="43" pcid="1723">
public class Robot {
    private int batteryLife;
    private int x;
    private int y;

    public Robot() {
        this.batteryLife = 3000;
        this.x = 0;
        this.y = 0;
    }

    public void move(String direction) {
        switch (direction) {
            case "left":
                x -= 1;
                break;
            case "right":
                x += 1;
                break;
            case "forward":
                y += 1;
                break;
            case "back":
                y -= 1;
                break;
        }
    }

    public void takePhoto(String resolution) {
    }

    public void pickRock() {
    }

    public void decreaseBattery(int amount) {
        batteryLife -= amount;
    }

    public int getBatteryLife() {
        return batteryLife;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/copilot/sol3/RobotP.java" startline="1" endline="43" pcid="1730">
public class Robot {
    private int batteryLife;
    private int x;
    private int y;

    public Robot() {
        this.batteryLife = 3000;
        this.x = 0;
        this.y = 0;
    }

    public void move(String direction) {
        switch (direction) {
            case "left":
                x -= 1;
                break;
            case "right":
                x += 1;
                break;
            case "forward":
                y += 1;
                break;
            case "back":
                y -= 1;
                break;
        }
    }

    public void takePhoto(String resolution) {
    }

    public void pickRock() {
    }

    public void decreaseBattery(int amount) {
        batteryLife -= amount;
    }

    public int getBatteryLife() {
        return batteryLife;
    }
}

</source>
</class>

<class classid="119" nclones="5" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/ActionP.java" startline="1" endline="20" pcid="1785">
public abstract class Action {
    private String name;
    private int cost;

    public Action(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    public String getName() {
        return name;
    }

    public int getCost() {
        return cost;
    }

    public abstract void execute(Robot robot);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol5/ActionP.java" startline="1" endline="20" pcid="1818">
public abstract class Action {
    private String name;
    private int cost;

    public Action(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    public String getName() {
        return name;
    }

    public int getCost() {
        return cost;
    }

    public abstract void execute(Robot robot);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/ActionP.java" startline="1" endline="20" pcid="1808">
public abstract class Action {
    private String name;
    private int cost;

    public Action(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    public String getName() {
        return name;
    }

    public int getCost() {
        return cost;
    }

    public abstract void execute(Robot robot);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol3/ActionP.java" startline="1" endline="20" pcid="1800">
public abstract class Action {
    private String name;
    private int cost;

    public Action(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    public String getName() {
        return name;
    }

    public int getCost() {
        return cost;
    }

    public abstract void execute(Robot robot);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol2/ActionP.java" startline="1" endline="20" pcid="1795">
public abstract class Action {
    private String name;
    private int cost;

    public Action(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    public String getName() {
        return name;
    }

    public int getCost() {
        return cost;
    }

    public abstract void execute(Robot robot);
}

</source>
</class>

<class classid="120" nclones="5" nlines="21" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/ControllerP.java" startline="1" endline="22" pcid="1786">
import java.util.List;

public class Controller {
    public void executeActions(Robot robot, List<Action> actions) {
        System.out.println("\n--- Executing Sequence of Actions ---");
        int actionsPerformed = 0;
        for (Action action : actions) {
            if (robot.getBatteryLife() > 0) {
                robot.performAction(action);
                actionsPerformed++;
            } else {
                System.out.println("Robot stopped due to empty battery.");
                break;
            }
        }
        System.out.println("\n--- Execution Summary ---");
        System.out.println("Total actions attempted: " + actions.size());
        System.out.println("Number of actions successfully performed: " + actionsPerformed);
        System.out.println("Final battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol5/ControllerP.java" startline="1" endline="22" pcid="1819">
import java.util.List;

public class Controller {
    public void executeActions(Robot robot, List<Action> actions) {
        System.out.println("\n--- Executing Sequence of Actions ---");
        int actionsPerformed = 0;
        for (Action action : actions) {
            if (robot.getBatteryLife() > 0) {
                robot.performAction(action);
                actionsPerformed++;
            } else {
                System.out.println("Robot stopped due to empty battery.");
                break;
            }
        }
        System.out.println("\n--- Execution Summary ---");
        System.out.println("Total actions attempted: " + actions.size());
        System.out.println("Number of actions successfully performed: " + actionsPerformed);
        System.out.println("Final battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol2/ControllerP.java" startline="1" endline="22" pcid="1796">
import java.util.List;

public class Controller {
    public void executeActions(Robot robot, List<Action> actions) {
        System.out.println("\n--- Executing Sequence of Actions ---");
        int actionsPerformed = 0;
        for (Action action : actions) {
            if (robot.getBatteryLife() > 0) {
                robot.performAction(action);
                actionsPerformed++;
            } else {
                System.out.println("Robot stopped due to empty battery.");
                break;
            }
        }
        System.out.println("\n--- Execution Summary ---");
        System.out.println("Total actions attempted: " + actions.size());
        System.out.println("Number of actions successfully performed: " + actionsPerformed);
        System.out.println("Final battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol3/ControllerP.java" startline="1" endline="22" pcid="1801">
import java.util.List;

public class Controller {
    public void executeActions(Robot robot, List<Action> actions) {
        System.out.println("\n--- Executing Sequence of Actions ---");
        int actionsPerformed = 0;
        for (Action action : actions) {
            if (robot.getBatteryLife() > 0) {
                robot.performAction(action);
                actionsPerformed++;
            } else {
                System.out.println("Robot stopped due to empty battery.");
                break;
            }
        }
        System.out.println("\n--- Execution Summary ---");
        System.out.println("Total actions attempted: " + actions.size());
        System.out.println("Number of actions successfully performed: " + actionsPerformed);
        System.out.println("Final battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/ControllerP.java" startline="1" endline="22" pcid="1809">
import java.util.List;

public class Controller {
    public void executeActions(Robot robot, List<Action> actions) {
        System.out.println("\n--- Executing Sequence of Actions ---");
        int actionsPerformed = 0;
        for (Action action : actions) {
            if (robot.getBatteryLife() > 0) {
                robot.performAction(action);
                actionsPerformed++;
            } else {
                System.out.println("Robot stopped due to empty battery.");
                break;
            }
        }
        System.out.println("\n--- Execution Summary ---");
        System.out.println("Total actions attempted: " + actions.size());
        System.out.println("Number of actions successfully performed: " + actionsPerformed);
        System.out.println("Final battery life: " + robot.getBatteryLife() + " seconds.");
    }
}

</source>
</class>

<class classid="121" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/GoBackActionP.java" startline="1" endline="12" pcid="1787">
public class GoBackAction extends Action {
    public GoBackAction() {
        super("Go Back", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes back 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/GoBackActionP.java" startline="1" endline="12" pcid="1810">
public class GoBackAction extends Action {
    public GoBackAction() {
        super("Go Back", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes back 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="122" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/GoForwardActionP.java" startline="1" endline="12" pcid="1788">
public class GoForwardAction extends Action {
    public GoForwardAction() {
        super("Go Forward", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes forward 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/GoForwardActionP.java" startline="1" endline="12" pcid="1811">
public class GoForwardAction extends Action {
    public GoForwardAction() {
        super("Go Forward", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes forward 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="123" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/GoLeftActionP.java" startline="1" endline="12" pcid="1789">
public class GoLeftAction extends Action {
    public GoLeftAction() {
        super("Go Left", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes left 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/GoLeftActionP.java" startline="1" endline="12" pcid="1812">
public class GoLeftAction extends Action {
    public GoLeftAction() {
        super("Go Left", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes left 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="124" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/GoRightActionP.java" startline="1" endline="12" pcid="1790">
public class GoRightAction extends Action {
    public GoRightAction() {
        super("Go Right", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes right 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/GoRightActionP.java" startline="1" endline="12" pcid="1813">
public class GoRightAction extends Action {
    public GoRightAction() {
        super("Go Right", 10);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot goes right 20 cm.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="125" nclones="2" nlines="57" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/MainP.java" startline="1" endline="79" pcid="1791">
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        Robot marsRoverPrototype = new Robot(3000);
        Controller controller = new Controller();
        List<Action> missionActions = new ArrayList<>();

        System.out.println("--- Mission Mars Prototype Test Drive ---");

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new PickRockAction());

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new TakePhotoAction(true));

        missionActions.add(new GoRightAction());
        missionActions.add(new GoRightAction());
        missionActions.add(new GoForwardAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoForwardAction());

        controller.executeActions(marsRoverPrototype, missionActions);

        System.out.println("\n--- Attempting alternative path (right decision) ---");
        Robot marsRoverPrototype2 = new Robot(3000);
        List<Action> alternativeActions = new ArrayList<>();

        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new PickRockAction());
        alternativeActions.add(new GoForwardAction());

        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());
        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());

        controller.executeActions(marsRoverPrototype2, alternativeActions);

        System.out.println("\n--- Attempting another alternative path (right then back) ---");
        Robot marsRoverPrototype3 = new Robot(3000);
        List<Action> alternativeActions2 = new ArrayList<>();

        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new PickRockAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        controller.executeActions(marsRoverPrototype3, alternativeActions2);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/MainP.java" startline="1" endline="79" pcid="1814">
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        Robot marsRoverPrototype = new Robot(3000);
        Controller controller = new Controller();
        List<Action> missionActions = new ArrayList<>();

        System.out.println("--- Mission Mars Prototype Test Drive ---");

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new PickRockAction());

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new TakePhotoAction(true));

        missionActions.add(new GoRightAction());
        missionActions.add(new GoRightAction());
        missionActions.add(new GoForwardAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoForwardAction());

        controller.executeActions(marsRoverPrototype, missionActions);

        System.out.println("\n--- Attempting alternative path (right decision) ---");
        Robot marsRoverPrototype2 = new Robot(3000);
        List<Action> alternativeActions = new ArrayList<>();

        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new PickRockAction());
        alternativeActions.add(new GoForwardAction());

        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());
        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());

        controller.executeActions(marsRoverPrototype2, alternativeActions);

        System.out.println("\n--- Attempting another alternative path (right then back) ---");
        Robot marsRoverPrototype3 = new Robot(3000);
        List<Action> alternativeActions2 = new ArrayList<>();

        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new PickRockAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        controller.executeActions(marsRoverPrototype3, alternativeActions2);
    }
}

</source>
</class>

<class classid="126" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/PickRockActionP.java" startline="1" endline="12" pcid="1792">
public class PickRockAction extends Action {
    public PickRockAction() {
        super("Pick Up Rock", 150);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot picks up a rock.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/PickRockActionP.java" startline="1" endline="12" pcid="1815">
public class PickRockAction extends Action {
    public PickRockAction() {
        super("Pick Up Rock", 150);
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot picks up a rock.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="127" nclones="5" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/RobotP.java" startline="1" endline="33" pcid="1793">
import java.util.ArrayList;
import java.util.List;

public class Robot {
    private int batteryLife;

    public Robot(int initialBattery) {
        this.batteryLife = initialBattery;
    }

    public int getBatteryLife() {
        return batteryLife;
    }

    public void decreaseBattery(int amount) {
        this.batteryLife -= amount;
        if (this.batteryLife < 0) {
            System.out.println("Battery depleted! Robot cannot perform further actions.");
            this.batteryLife = 0;
        }
    }

    public void performAction(Action action) {
        if (batteryLife > 0) {
            System.out.println("Executing action: " + action.getName() + " (Cost: " + action.getCost() + " seconds)");
            action.execute(this);
            System.out.println("Remaining battery: " + getBatteryLife() + " seconds.");
        } else {
            System.out.println("Cannot perform action: " + action.getName() + ". Battery is empty.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/RobotP.java" startline="1" endline="33" pcid="1816">
import java.util.ArrayList;
import java.util.List;

public class Robot {
    private int batteryLife;

    public Robot(int initialBattery) {
        this.batteryLife = initialBattery;
    }

    public int getBatteryLife() {
        return batteryLife;
    }

    public void decreaseBattery(int amount) {
        this.batteryLife -= amount;
        if (this.batteryLife < 0) {
            System.out.println("Battery depleted! Robot cannot perform further actions.");
            this.batteryLife = 0;
        }
    }

    public void performAction(Action action) {
        if (batteryLife > 0) {
            System.out.println("Executing action: " + action.getName() + " (Cost: " + action.getCost() + " seconds)");
            action.execute(this);
            System.out.println("Remaining battery: " + getBatteryLife() + " seconds.");
        } else {
            System.out.println("Cannot perform action: " + action.getName() + ". Battery is empty.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol3/RobotP.java" startline="1" endline="33" pcid="1807">
import java.util.ArrayList;
import java.util.List;

public class Robot {
    private int batteryLife;

    public Robot(int initialBattery) {
        this.batteryLife = initialBattery;
    }

    public int getBatteryLife() {
        return batteryLife;
    }

    public void decreaseBattery(int amount) {
        this.batteryLife -= amount;
        if (this.batteryLife < 0) {
            System.out.println("Battery depleted! Robot cannot perform further actions.");
            this.batteryLife = 0;
        }
    }

    public void performAction(Action action) {
        if (batteryLife > 0) {
            System.out.println("Executing action: " + action.getName() + " (Cost: " + action.getCost() + " seconds)");
            action.execute(this);
            System.out.println("Remaining battery: " + getBatteryLife() + " seconds.");
        } else {
            System.out.println("Cannot perform action: " + action.getName() + ". Battery is empty.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol2/RobotP.java" startline="1" endline="33" pcid="1799">
import java.util.ArrayList;
import java.util.List;

public class Robot {
    private int batteryLife;

    public Robot(int initialBattery) {
        this.batteryLife = initialBattery;
    }

    public int getBatteryLife() {
        return batteryLife;
    }

    public void decreaseBattery(int amount) {
        this.batteryLife -= amount;
        if (this.batteryLife < 0) {
            System.out.println("Battery depleted! Robot cannot perform further actions.");
            this.batteryLife = 0;
        }
    }

    public void performAction(Action action) {
        if (batteryLife > 0) {
            System.out.println("Executing action: " + action.getName() + " (Cost: " + action.getCost() + " seconds)");
            action.execute(this);
            System.out.println("Remaining battery: " + getBatteryLife() + " seconds.");
        } else {
            System.out.println("Cannot perform action: " + action.getName() + ". Battery is empty.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol5/RobotP.java" startline="1" endline="33" pcid="1823">
import java.util.ArrayList;
import java.util.List;

public class Robot {
    private int batteryLife;

    public Robot(int initialBattery) {
        this.batteryLife = initialBattery;
    }

    public int getBatteryLife() {
        return batteryLife;
    }

    public void decreaseBattery(int amount) {
        this.batteryLife -= amount;
        if (this.batteryLife < 0) {
            System.out.println("Battery depleted! Robot cannot perform further actions.");
            this.batteryLife = 0;
        }
    }

    public void performAction(Action action) {
        if (batteryLife > 0) {
            System.out.println("Executing action: " + action.getName() + " (Cost: " + action.getCost() + " seconds)");
            action.execute(this);
            System.out.println("Remaining battery: " + getBatteryLife() + " seconds.");
        } else {
            System.out.println("Cannot perform action: " + action.getName() + ". Battery is empty.");
        }
    }
}

</source>
</class>

<class classid="128" nclones="2" nlines="12" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol1/TakePhotoActionP.java" startline="1" endline="15" pcid="1794">
public class TakePhotoAction extends Action {
    private boolean highResolution;

    public TakePhotoAction(boolean highResolution) {
        super(highResolution ? "Take High-Resolution Photo" : "Take Low-Resolution Photo", highResolution ? 60 : 40);
        this.highResolution = highResolution;
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot takes a " + (highResolution ? "high" : "low") + "-resolution photo.");
        robot.decreaseBattery(getCost());
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol4/TakePhotoActionP.java" startline="1" endline="15" pcid="1817">
public class TakePhotoAction extends Action {
    private boolean highResolution;

    public TakePhotoAction(boolean highResolution) {
        super(highResolution ? "Take High-Resolution Photo" : "Take Low-Resolution Photo", highResolution ? 60 : 40);
        this.highResolution = highResolution;
    }

    @Override
    public void execute(Robot robot) {
        System.out.println("Robot takes a " + (highResolution ? "high" : "low") + "-resolution photo.");
        robot.decreaseBattery(getCost());
    }
}

</source>
</class>

<class classid="129" nclones="2" nlines="59" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol3/MainP.java" startline="1" endline="81" pcid="1804">
import java.util.ArrayList;
import java.util.List;
import MovementActions.*;
import InteractionActions.*;

public class Main {
    public static void main(String[] args) {
        Robot marsRoverPrototype = new Robot(3000);
        Controller controller = new Controller();
        List<Action> missionActions = new ArrayList<>();

        System.out.println("--- Mission Mars Prototype Test Drive ---");

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new PickRockAction());

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new TakePhotoAction(true));

        missionActions.add(new GoRightAction());
        missionActions.add(new GoRightAction());
        missionActions.add(new GoForwardAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoForwardAction());

        controller.executeActions(marsRoverPrototype, missionActions);

        System.out.println("\n--- Attempting alternative path (right decision) ---");
        Robot marsRoverPrototype2 = new Robot(3000);
        List<Action> alternativeActions = new ArrayList<>();

        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new PickRockAction());
        alternativeActions.add(new GoForwardAction());

        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());
        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());

        controller.executeActions(marsRoverPrototype2, alternativeActions);

        System.out.println("\n--- Attempting another alternative path (right then back) ---");
        Robot marsRoverPrototype3 = new Robot(3000);
        List<Action> alternativeActions2 = new ArrayList<>();

        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new PickRockAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        controller.executeActions(marsRoverPrototype3, alternativeActions2);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 1/gemini/sol5/MainP.java" startline="1" endline="81" pcid="1821">
import java.util.ArrayList;
import java.util.List;
import MovementActions.*;
import InteractionActions.*;

public class Main {
    public static void main(String[] args) {
        Robot marsRoverPrototype = new Robot(3000);
        Controller controller = new Controller();
        List<Action> missionActions = new ArrayList<>();

        System.out.println("--- Mission Mars Prototype Test Drive ---");

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoLeftAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new PickRockAction());

        missionActions.add(new GoForwardAction());

        missionActions.add(new GoForwardAction());
        missionActions.add(new TakePhotoAction(true));

        missionActions.add(new GoRightAction());
        missionActions.add(new GoRightAction());
        missionActions.add(new GoForwardAction());
        missionActions.add(new GoLeftAction());
        missionActions.add(new GoForwardAction());

        controller.executeActions(marsRoverPrototype, missionActions);

        System.out.println("\n--- Attempting alternative path (right decision) ---");
        Robot marsRoverPrototype2 = new Robot(3000);
        List<Action> alternativeActions = new ArrayList<>();

        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoLeftAction());
        alternativeActions.add(new GoForwardAction());
        alternativeActions.add(new PickRockAction());
        alternativeActions.add(new GoForwardAction());

        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());
        alternativeActions.add(new GoRightAction());

        alternativeActions.add(new GoRightAction());

        controller.executeActions(marsRoverPrototype2, alternativeActions);

        System.out.println("\n--- Attempting another alternative path (right then back) ---");
        Robot marsRoverPrototype3 = new Robot(3000);
        List<Action> alternativeActions2 = new ArrayList<>();

        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoLeftAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new PickRockAction());
        alternativeActions2.add(new GoForwardAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());
        alternativeActions2.add(new GoRightAction());

        alternativeActions2.add(new GoBackAction());

        controller.executeActions(marsRoverPrototype3, alternativeActions2);
    }
}

</source>
</class>

<class classid="130" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol1/BankAccountP.java" startline="1" endline="30" pcid="1834">
public class BankAccount {
    protected double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }

    public double getBalance() {
        return balance;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol2/BankAccountP.java" startline="1" endline="30" pcid="1836">
public class BankAccount {
    protected double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }

    public double getBalance() {
        return balance;
    }
}

</source>
</class>

<class classid="131" nclones="2" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol1/OverdraftAccountP.java" startline="1" endline="23" pcid="1835">
public class OverdraftAccount extends BankAccount {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance - amount >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Overdraft limit exceeded or invalid amount.");
        }
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol2/OverdraftAccountP.java" startline="1" endline="23" pcid="1837">
public class OverdraftAccount extends BankAccount {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance - amount >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Overdraft limit exceeded or invalid amount.");
        }
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }
}

</source>
</class>

<class classid="132" nclones="3" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol3/AccountP.java" startline="1" endline="23" pcid="1838">
public abstract class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public abstract void withdraw(double amount);

    public double getBalance() {
        return balance;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol4/AccountP.java" startline="1" endline="23" pcid="1841">
public abstract class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public abstract void withdraw(double amount);

    public double getBalance() {
        return balance;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol5/AccountP.java" startline="1" endline="23" pcid="1844">
public abstract class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public abstract void withdraw(double amount);

    public double getBalance() {
        return balance;
    }
}

</source>
</class>

<class classid="133" nclones="3" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol3/BankAccountP.java" startline="1" endline="16" pcid="1839">
public class BankAccount extends Account {
    public BankAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol4/BankAccountP.java" startline="1" endline="16" pcid="1842">
public class BankAccount extends Account {
    public BankAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol5/BankAccountP.java" startline="1" endline="16" pcid="1845">
public class BankAccount extends Account {
    public BankAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

</source>
</class>

<class classid="134" nclones="3" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol3/OverdraftAccountP.java" startline="1" endline="23" pcid="1840">
public class OverdraftAccount extends Account {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance - amount >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Overdraft limit exceeded or invalid amount.");
        }
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol4/OverdraftAccountP.java" startline="1" endline="23" pcid="1843">
public class OverdraftAccount extends Account {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance - amount >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Overdraft limit exceeded or invalid amount.");
        }
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/copilot/sol5/OverdraftAccountP.java" startline="1" endline="23" pcid="1846">
public class OverdraftAccount extends Account {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance - amount >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrew: " + amount + ", New Balance: " + balance);
        } else {
            System.out.println("Overdraft limit exceeded or invalid amount.");
        }
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }
}

</source>
</class>

<class classid="135" nclones="2" nlines="27" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol2/AccountP.java" startline="1" endline="30" pcid="1864">
public class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Insufficient funds.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol3/AccountP.java" startline="1" endline="30" pcid="1866">
public class Account {
    protected double balance;

    public Account(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Insufficient funds.");
        }
    }
}

</source>
</class>

<class classid="136" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol2/OverdraftAccountP.java" startline="1" endline="27" pcid="1865">
public class OverdraftAccount extends Account {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }

    public void setAllowedOverdraft(double allowedOverdraft) {
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && (balance - amount) >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Cannot exceed allowed overdraft of " + allowedOverdraft + ".");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol3/OverdraftAccountP.java" startline="1" endline="27" pcid="1867">
public class OverdraftAccount extends Account {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }

    public void setAllowedOverdraft(double allowedOverdraft) {
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && (balance - amount) >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Cannot exceed allowed overdraft of " + allowedOverdraft + ".");
        }
    }
}

</source>
</class>

<class classid="137" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol4/BankAccountP.java" startline="1" endline="23" pcid="1868">
public abstract class BankAccount {
    protected double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public abstract void withdraw(double amount);
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol5/BankAccountP.java" startline="1" endline="23" pcid="1871">
public abstract class BankAccount {
    protected double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public abstract void withdraw(double amount);
}

</source>
</class>

<class classid="138" nclones="2" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol4/NormalAccountP.java" startline="1" endline="17" pcid="1869">
public class NormalAccount extends BankAccount {

    public NormalAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Insufficient funds.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol5/NormalAccountP.java" startline="1" endline="17" pcid="1872">
public class NormalAccount extends BankAccount {

    public NormalAccount(double initialBalance) {
        super(initialBalance);
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Insufficient funds.");
        }
    }
}

</source>
</class>

<class classid="139" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol4/OverdraftAccountP.java" startline="1" endline="27" pcid="1870">
public class OverdraftAccount extends BankAccount {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }

    public void setAllowedOverdraft(double allowedOverdraft) {
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && (balance - amount) >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Cannot exceed allowed overdraft of " + allowedOverdraft + ".");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 2/gemini/sol5/OverdraftAccountP.java" startline="1" endline="27" pcid="1873">
public class OverdraftAccount extends BankAccount {
    private double allowedOverdraft;

    public OverdraftAccount(double initialBalance, double allowedOverdraft) {
        super(initialBalance);
        this.allowedOverdraft = allowedOverdraft;
    }

    public double getAllowedOverdraft() {
        return allowedOverdraft;
    }

    public void setAllowedOverdraft(double allowedOverdraft) {
        this.allowedOverdraft = allowedOverdraft;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && (balance - amount) >= -allowedOverdraft) {
            balance -= amount;
            System.out.println("Withdrawal of " + amount + " successful. New balance: " + balance);
        } else {
            System.out.println("Withdrawal failed. Cannot exceed allowed overdraft of " + allowedOverdraft + ".");
        }
    }
}

</source>
</class>

<class classid="140" nclones="6" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol1/BankAccountP.java" startline="1" endline="20" pcid="1885">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/BankAccountP.java" startline="1" endline="20" pcid="1908">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/BankAccountP.java" startline="1" endline="20" pcid="1932">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/BankAccountP.java" startline="1" endline="20" pcid="1900">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/BankAccountP.java" startline="1" endline="20" pcid="1892">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/BankAccountP.java" startline="1" endline="20" pcid="1916">
public class BankAccount {
    private double balance;

    public BankAccount(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void withdraw(double amount) {
        balance -= amount;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

</source>
</class>

<class classid="141" nclones="6" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol1/CashPaymentP.java" startline="1" endline="23" pcid="1887">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/CashPaymentP.java" startline="1" endline="23" pcid="1895">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/CashPaymentP.java" startline="1" endline="23" pcid="1903">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/CashPaymentP.java" startline="1" endline="23" pcid="1935">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/CashPaymentP.java" startline="1" endline="23" pcid="1911">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/CashPaymentP.java" startline="1" endline="23" pcid="1919">
public class CashPayment extends Payment {
    private double givenMoney;

    public CashPayment(double amount, double givenMoney) {
        super(amount);
        this.givenMoney = givenMoney;
    }

    @Override
    public boolean canMakePayment() {
        return givenMoney >= amount;
    }

    @Override
    public double executePayment() {
        if (canMakePayment()) {
            return givenMoney - amount;
        } else {
            throw new IllegalArgumentException("Insufficient cash provided.");
        }
    }
}

</source>
</class>

<class classid="142" nclones="5" nlines="16" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/CardPaymentP.java" startline="1" endline="20" pcid="1894">
public class CardPayment extends Payment {
    private Card card;

    public CardPayment(double amount, Card card) {
        super(amount);
        this.card = card;
    }

    @Override
    public boolean canMakePayment() {
        return card.canMakePayment(amount);
    }

    @Override
    public double executePayment() {
        card.executePayment(amount);
        return 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/CardPaymentP.java" startline="1" endline="20" pcid="1934">
public class CardPayment extends Payment {
    private Card card;

    public CardPayment(double amount, Card card) {
        super(amount);
        this.card = card;
    }

    @Override
    public boolean canMakePayment() {
        return card.canMakePayment(amount);
    }

    @Override
    public double executePayment() {
        card.executePayment(amount);
        return 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/CardPaymentP.java" startline="1" endline="20" pcid="1902">
public class CardPayment extends Payment {
    private Card card;

    public CardPayment(double amount, Card card) {
        super(amount);
        this.card = card;
    }

    @Override
    public boolean canMakePayment() {
        return card.canMakePayment(amount);
    }

    @Override
    public double executePayment() {
        card.executePayment(amount);
        return 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/CardPaymentP.java" startline="1" endline="20" pcid="1918">
public class CardPayment extends Payment {
    private Card card;

    public CardPayment(double amount, Card card) {
        super(amount);
        this.card = card;
    }

    @Override
    public boolean canMakePayment() {
        return card.canMakePayment(amount);
    }

    @Override
    public double executePayment() {
        card.executePayment(amount);
        return 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/CardPaymentP.java" startline="1" endline="20" pcid="1910">
public class CardPayment extends Payment {
    private Card card;

    public CardPayment(double amount, Card card) {
        super(amount);
        this.card = card;
    }

    @Override
    public boolean canMakePayment() {
        return card.canMakePayment(amount);
    }

    @Override
    public double executePayment() {
        card.executePayment(amount);
        return 0;
    }
}

</source>
</class>

<class classid="143" nclones="5" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/CreditCardP.java" startline="1" endline="23" pcid="1896">
public class CreditCard extends Card {
    private double overdraftLimit;

    public CreditCard(BankAccount account, double overdraftLimit) {
        super(account);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() + overdraftLimit >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Payment exceeds overdraft limit.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/CreditCardP.java" startline="1" endline="23" pcid="1912">
public class CreditCard extends Card {
    private double overdraftLimit;

    public CreditCard(BankAccount account, double overdraftLimit) {
        super(account);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() + overdraftLimit >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Payment exceeds overdraft limit.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/CreditCardP.java" startline="1" endline="23" pcid="1920">
public class CreditCard extends Card {
    private double overdraftLimit;

    public CreditCard(BankAccount account, double overdraftLimit) {
        super(account);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() + overdraftLimit >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Payment exceeds overdraft limit.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/CreditCardP.java" startline="1" endline="23" pcid="1936">
public class CreditCard extends Card {
    private double overdraftLimit;

    public CreditCard(BankAccount account, double overdraftLimit) {
        super(account);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() + overdraftLimit >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Payment exceeds overdraft limit.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/CreditCardP.java" startline="1" endline="23" pcid="1904">
public class CreditCard extends Card {
    private double overdraftLimit;

    public CreditCard(BankAccount account, double overdraftLimit) {
        super(account);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() + overdraftLimit >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Payment exceeds overdraft limit.");
        }
    }
}

</source>
</class>

<class classid="144" nclones="5" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/DebitCardP.java" startline="1" endline="20" pcid="1897">
public class DebitCard extends Card {
    public DebitCard(BankAccount account) {
        super(account);
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Insufficient funds in the account.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/DebitCardP.java" startline="1" endline="20" pcid="1921">
public class DebitCard extends Card {
    public DebitCard(BankAccount account) {
        super(account);
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Insufficient funds in the account.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/DebitCardP.java" startline="1" endline="20" pcid="1937">
public class DebitCard extends Card {
    public DebitCard(BankAccount account) {
        super(account);
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Insufficient funds in the account.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/DebitCardP.java" startline="1" endline="20" pcid="1913">
public class DebitCard extends Card {
    public DebitCard(BankAccount account) {
        super(account);
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Insufficient funds in the account.");
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/DebitCardP.java" startline="1" endline="20" pcid="1905">
public class DebitCard extends Card {
    public DebitCard(BankAccount account) {
        super(account);
    }

    @Override
    public boolean canMakePayment(double amount) {
        return account.getBalance() >= amount;
    }

    @Override
    public void executePayment(double amount) {
        if (canMakePayment(amount)) {
            account.withdraw(amount);
        } else {
            throw new IllegalArgumentException("Insufficient funds in the account.");
        }
    }
}

</source>
</class>

<class classid="145" nclones="5" nlines="22" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol2/MainP.java" startline="1" endline="25" pcid="1898">
public class Main {
    public static void main(String[] args) {
        Payment cashPayment = new CashPayment(50, 100);
        if (cashPayment.canMakePayment()) {
            System.out.println("Cash Payment executed. Change: " + cashPayment.executePayment());
        }

        BankAccount debitAccount = new BankAccount(200);
        Card debitCard = new DebitCard(debitAccount);
        Payment debitPayment = new CardPayment(150, debitCard);
        if (debitPayment.canMakePayment()) {
            debitPayment.executePayment();
            System.out.println("Debit Card Payment executed. Remaining balance: " + debitAccount.getBalance());
        }

        BankAccount creditAccount = new BankAccount(100);
        Card creditCard = new CreditCard(creditAccount, 200);
        Payment creditPayment = new CardPayment(250, creditCard);
        if (creditPayment.canMakePayment()) {
            creditPayment.executePayment();
            System.out.println("Credit Card Payment executed. Remaining balance: " + creditAccount.getBalance());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/deepseek/sol3/MainP.java" startline="1" endline="25" pcid="1938">
public class Main {
    public static void main(String[] args) {
        Payment cashPayment = new CashPayment(50, 100);
        if (cashPayment.canMakePayment()) {
            System.out.println("Cash Payment executed. Change: " + cashPayment.executePayment());
        }

        BankAccount debitAccount = new BankAccount(200);
        Card debitCard = new DebitCard(debitAccount);
        Payment debitPayment = new CardPayment(150, debitCard);
        if (debitPayment.canMakePayment()) {
            debitPayment.executePayment();
            System.out.println("Debit Card Payment executed. Remaining balance: " + debitAccount.getBalance());
        }

        BankAccount creditAccount = new BankAccount(100);
        Card creditCard = new CreditCard(creditAccount, 200);
        Payment creditPayment = new CardPayment(250, creditCard);
        if (creditPayment.canMakePayment()) {
            creditPayment.executePayment();
            System.out.println("Credit Card Payment executed. Remaining balance: " + creditAccount.getBalance());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol5/MainP.java" startline="1" endline="25" pcid="1922">
public class Main {
    public static void main(String[] args) {
        Payment cashPayment = new CashPayment(50, 100);
        if (cashPayment.canMakePayment()) {
            System.out.println("Cash Payment executed. Change: " + cashPayment.executePayment());
        }

        BankAccount debitAccount = new BankAccount(200);
        Card debitCard = new DebitCard(debitAccount);
        Payment debitPayment = new CardPayment(150, debitCard);
        if (debitPayment.canMakePayment()) {
            debitPayment.executePayment();
            System.out.println("Debit Card Payment executed. Remaining balance: " + debitAccount.getBalance());
        }

        BankAccount creditAccount = new BankAccount(100);
        Card creditCard = new CreditCard(creditAccount, 200);
        Payment creditPayment = new CardPayment(250, creditCard);
        if (creditPayment.canMakePayment()) {
            creditPayment.executePayment();
            System.out.println("Credit Card Payment executed. Remaining balance: " + creditAccount.getBalance());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol3/MainP.java" startline="1" endline="25" pcid="1906">
public class Main {
    public static void main(String[] args) {
        Payment cashPayment = new CashPayment(50, 100);
        if (cashPayment.canMakePayment()) {
            System.out.println("Cash Payment executed. Change: " + cashPayment.executePayment());
        }

        BankAccount debitAccount = new BankAccount(200);
        Card debitCard = new DebitCard(debitAccount);
        Payment debitPayment = new CardPayment(150, debitCard);
        if (debitPayment.canMakePayment()) {
            debitPayment.executePayment();
            System.out.println("Debit Card Payment executed. Remaining balance: " + debitAccount.getBalance());
        }

        BankAccount creditAccount = new BankAccount(100);
        Card creditCard = new CreditCard(creditAccount, 200);
        Payment creditPayment = new CardPayment(250, creditCard);
        if (creditPayment.canMakePayment()) {
            creditPayment.executePayment();
            System.out.println("Credit Card Payment executed. Remaining balance: " + creditAccount.getBalance());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/copilot/sol4/MainP.java" startline="1" endline="25" pcid="1914">
public class Main {
    public static void main(String[] args) {
        Payment cashPayment = new CashPayment(50, 100);
        if (cashPayment.canMakePayment()) {
            System.out.println("Cash Payment executed. Change: " + cashPayment.executePayment());
        }

        BankAccount debitAccount = new BankAccount(200);
        Card debitCard = new DebitCard(debitAccount);
        Payment debitPayment = new CardPayment(150, debitCard);
        if (debitPayment.canMakePayment()) {
            debitPayment.executePayment();
            System.out.println("Debit Card Payment executed. Remaining balance: " + debitAccount.getBalance());
        }

        BankAccount creditAccount = new BankAccount(100);
        Card creditCard = new CreditCard(creditAccount, 200);
        Payment creditPayment = new CardPayment(250, creditCard);
        if (creditPayment.canMakePayment()) {
            creditPayment.executePayment();
            System.out.println("Credit Card Payment executed. Remaining balance: " + creditAccount.getBalance());
        }
    }
}

</source>
</class>

<class classid="146" nclones="3" nlines="49" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/gemini/sol3/BankAccountP.java" startline="1" endline="54" pcid="1971">
public class BankAccount {
    private double balance;
    private String accountNumber;

    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            this.balance += amount;
            System.out.println("Deposited " + amount + ". New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount);
            return false;
        }
    }

    public boolean withdraw(double amount, double overdraftLimit) {
        if (amount > 0 && (balance - amount) >= -overdraftLimit) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount + " (including overdraft).");
            return false;
        }
    }

    public void displayAccountInfo() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/gemini/sol5/BankAccountP.java" startline="1" endline="54" pcid="1988">
public class BankAccount {
    private double balance;
    private String accountNumber;

    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            this.balance += amount;
            System.out.println("Deposited " + amount + ". New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount);
            return false;
        }
    }

    public boolean withdraw(double amount, double overdraftLimit) {
        if (amount > 0 && (balance - amount) >= -overdraftLimit) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount + " (including overdraft).");
            return false;
        }
    }

    public void displayAccountInfo() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 3/gemini/sol4/BankAccountP.java" startline="1" endline="54" pcid="1979">
public class BankAccount {
    private double balance;
    private String accountNumber;

    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            this.balance += amount;
            System.out.println("Deposited " + amount + ". New balance: " + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount);
            return false;
        }
    }

    public boolean withdraw(double amount, double overdraftLimit) {
        if (amount > 0 && (balance - amount) >= -overdraftLimit) {
            this.balance -= amount;
            System.out.println("Withdrew " + amount + ". New balance: " + balance);
            return true;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount + " (including overdraft).");
            return false;
        }
    }

    public void displayAccountInfo() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }
}

</source>
</class>

<class classid="147" nclones="2" nlines="17" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol3/FilterUtilsP.java" startline="1" endline="21" pcid="2007">
import java.util.function.Predicate;

public class FilterUtils {
    public static Person[] filterByCondition(Person[] people, Predicate<Person> condition) {
        int count = 0;
        for (Person p : people) {
            if (condition.test(p)) count++;
        }

        Person[] result = new Person[count];
        int index = 0;
        for (Person p : people) {
            if (condition.test(p)) {
                result[index++] = p;
            }
        }

        return result;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol4/FilterUtilsP.java" startline="1" endline="21" pcid="2018">
import java.util.function.Predicate;

public class FilterUtils {
    public static Person[] filterByCondition(Person[] people, Predicate<Person> condition) {
        int count = 0;
        for (Person p : people) {
            if (condition.test(p)) count++;
        }

        Person[] result = new Person[count];
        int index = 0;
        for (Person p : people) {
            if (condition.test(p)) {
                result[index++] = p;
            }
        }

        return result;
    }
}

</source>
</class>

<class classid="148" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol3/MainP.java" startline="1" endline="40" pcid="2010">
public class Main {
    public static void main(String[] args) {
        Person[] people = {
            new Person("Alice", 22, true, false),
            new Person("Bob", 35, false, true),
            new Person("Charlie", 25, true, true),
            new Person("Diana", 60, false, true),
            new Person("Eve", 45, false, false),
            new Person("Frank", 19, true, false),
            new Person("Grace", 28, true, true),
        };

        Filter studentFilter = new StudentFilter();
        Filter lecturerFilter = new LecturerFilter();
        Filter taFilter = new TAFilter();
        Filter seniorFilter = new SeniorFilter();

        System.out.println("Students:");
        printPeople(studentFilter.apply(people));

        System.out.println("\nLecturers:");
        printPeople(lecturerFilter.apply(people));

        System.out.println("\nTAs:");
        printPeople(taFilter.apply(people));

        System.out.println("\nSeniors:");
        printPeople(seniorFilter.apply(people));

        System.out.println("\nSenior TAs:");
        printPeople(seniorFilter.apply(taFilter.apply(people)));
    }

    private static void printPeople(Person[] people) {
        for (Person p : people) {
            System.out.println(p);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol4/MainP.java" startline="1" endline="40" pcid="2019">
public class Main {
    public static void main(String[] args) {
        Person[] people = {
            new Person("Alice", 22, true, false),
            new Person("Bob", 35, false, true),
            new Person("Charlie", 25, true, true),
            new Person("Diana", 60, false, true),
            new Person("Eve", 45, false, false),
            new Person("Frank", 19, true, false),
            new Person("Grace", 28, true, true),
        };

        Filter studentFilter = new StudentFilter();
        Filter lecturerFilter = new LecturerFilter();
        Filter taFilter = new TAFilter();
        Filter seniorFilter = new SeniorFilter();

        System.out.println("Students:");
        printPeople(studentFilter.apply(people));

        System.out.println("\nLecturers:");
        printPeople(lecturerFilter.apply(people));

        System.out.println("\nTAs:");
        printPeople(taFilter.apply(people));

        System.out.println("\nSeniors:");
        printPeople(seniorFilter.apply(people));

        System.out.println("\nSenior TAs:");
        printPeople(seniorFilter.apply(taFilter.apply(people)));
    }

    private static void printPeople(Person[] people) {
        for (Person p : people) {
            System.out.println(p);
        }
    }
}

</source>
</class>

<class classid="149" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol3/PersonP.java" startline="1" endline="24" pcid="2012">
public class Person {
    private final String name;
    private final int age;
    private final boolean studies;
    private final boolean teaches;

    public Person(String name, int age, boolean studies, boolean teaches) {
        this.name = name;
        this.age = age;
        this.studies = studies;
        this.teaches = teaches;
    }

    public String getName() { return name; }
    public int getAge() { return age; }
    public boolean studies() { return studies; }
    public boolean teaches() { return teaches; }

    @Override
    public String toString() {
        return name + " (age " + age + ", studies=" + studies + ", teaches=" + teaches + ")";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/chatgpt/sol4/PersonP.java" startline="1" endline="24" pcid="2020">
public class Person {
    private final String name;
    private final int age;
    private final boolean studies;
    private final boolean teaches;

    public Person(String name, int age, boolean studies, boolean teaches) {
        this.name = name;
        this.age = age;
        this.studies = studies;
        this.teaches = teaches;
    }

    public String getName() { return name; }
    public int getAge() { return age; }
    public boolean studies() { return studies; }
    public boolean teaches() { return teaches; }

    @Override
    public String toString() {
        return name + " (age " + age + ", studies=" + studies + ", teaches=" + teaches + ")";
    }
}

</source>
</class>

<class classid="150" nclones="3" nlines="29" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol1/PersonP.java" startline="1" endline="36" pcid="2032">
public class Person {
    private String name;
    private int age;
    private boolean isLecturer;
    private boolean isStudent;
    private boolean isTA;

    public Person(String name, int age, boolean isLecturer, boolean isStudent, boolean isTA) {
        this.name = name;
        this.age = age;
        this.isLecturer = isLecturer;
        this.isStudent = isStudent;
        this.isTA = isTA;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isLecturer() {
        return isLecturer;
    }

    public boolean isStudent() {
        return isStudent;
    }

    public boolean isTA() {
        return isTA;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol2/PersonP.java" startline="1" endline="36" pcid="2040">
public class Person {
    private String name;
    private int age;
    private boolean isLecturer;
    private boolean isStudent;
    private boolean isTA;

    public Person(String name, int age, boolean isLecturer, boolean isStudent, boolean isTA) {
        this.name = name;
        this.age = age;
        this.isLecturer = isLecturer;
        this.isStudent = isStudent;
        this.isTA = isTA;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isLecturer() {
        return isLecturer;
    }

    public boolean isStudent() {
        return isStudent;
    }

    public boolean isTA() {
        return isTA;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol3/PersonP.java" startline="1" endline="36" pcid="2048">
public class Person {
    private String name;
    private int age;
    private boolean isLecturer;
    private boolean isStudent;
    private boolean isTA;

    public Person(String name, int age, boolean isLecturer, boolean isStudent, boolean isTA) {
        this.name = name;
        this.age = age;
        this.isLecturer = isLecturer;
        this.isStudent = isStudent;
        this.isTA = isTA;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isLecturer() {
        return isLecturer;
    }

    public boolean isStudent() {
        return isStudent;
    }

    public boolean isTA() {
        return isTA;
    }
}

</source>
</class>

<class classid="151" nclones="2" nlines="22" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol4/MainP.java" startline="1" endline="35" pcid="2056">
public class Main {
    public static void main(String[] args) {
        Person[] people = {
            new Person("Alice", 25, false, true),
            new Person("Bob", 30, true, false),
            new Person("Charlie", 60, true, false),
            new Person("Dave", 22, true, true),
            new Person("Eve", 45, false, true)
        };

        Filter lecturerFilter = new LecturerFilter();
        Filter seniorFilter = new SeniorFilter();
        Filter juniorFilter = new JuniorFilter();

        Person[] lecturers = lecturerFilter.apply(people);
        Person[] seniors = seniorFilter.apply(lecturers);
        Person[] juniors = juniorFilter.apply(people);

        System.out.println("Lecturers:");
        printPeople(lecturers);

        System.out.println("Seniors:");
        printPeople(seniors);

        System.out.println("Juniors:");
        printPeople(juniors);
    }

    private static void printPeople(Person[] people) {
        for (Person person : people) {
            System.out.println(person.getName() + ", Age: " + person.getAge());
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol5/MainP.java" startline="1" endline="35" pcid="2065">
public class Main {
    public static void main(String[] args) {
        Person[] people = {
            new Person("Alice", 25, false, true),
            new Person("Bob", 30, true, false),
            new Person("Charlie", 60, true, false),
            new Person("Dave", 22, true, true),
            new Person("Eve", 45, false, true)
        };

        Filter lecturerFilter = new LecturerFilter();
        Filter seniorFilter = new SeniorFilter();
        Filter juniorFilter = new JuniorFilter();

        Person[] lecturers = lecturerFilter.apply(people);
        Person[] seniors = seniorFilter.apply(lecturers);
        Person[] juniors = juniorFilter.apply(people);

        System.out.println("Lecturers:");
        printPeople(lecturers);

        System.out.println("Seniors:");
        printPeople(seniors);

        System.out.println("Juniors:");
        printPeople(juniors);
    }

    private static void printPeople(Person[] people) {
        for (Person person : people) {
            System.out.println(person.getName() + ", Age: " + person.getAge());
        }
    }
}

</source>
</class>

<class classid="152" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol4/PersonP.java" startline="1" endline="30" pcid="2058">
public class Person {
    private String name;
    private int age;
    private boolean teaches;
    private boolean studies;

    public Person(String name, int age, boolean teaches, boolean studies) {
        this.name = name;
        this.age = age;
        this.teaches = teaches;
        this.studies = studies;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isTeaches() {
        return teaches;
    }

    public boolean isStudies() {
        return studies;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab7/Ex. 4/copilot/sol5/PersonP.java" startline="1" endline="30" pcid="2066">
public class Person {
    private String name;
    private int age;
    private boolean teaches;
    private boolean studies;

    public Person(String name, int age, boolean teaches, boolean studies) {
        this.name = name;
        this.age = age;
        this.teaches = teaches;
        this.studies = studies;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public boolean isTeaches() {
        return teaches;
    }

    public boolean isStudies() {
        return studies;
    }
}

</source>
</class>

<class classid="153" nclones="2" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol1/CountryP.java" startline="1" endline="17" pcid="2150">
public enum Country {
    FRANCE(30),
    BELGIUM(50),
    GERMANY(40),
    LUXEMBOURG(0);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol3/CountryP.java" startline="1" endline="14" pcid="2202">
public enum Country {
    FRANCE(30), BELGIUM(50), GERMANY(40), LUXEMBOURG(0);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
</class>

<class classid="154" nclones="7" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol1/ShippingMethodP.java" startline="1" endline="23" pcid="2153">
public enum ShippingMethod {
    EXPRESS(100, 1),
    PRIORITY(50, 3),
    CLASSIC(10, 5),
    NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol3/ShippingMethodP.java" startline="1" endline="20" pcid="2185">
public enum ShippingMethod {
    EXPRESS(100, 1), PRIORITY(50, 3), CLASSIC(10, 5), NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol5/ShippingMethodP.java" startline="1" endline="20" pcid="2196">
public enum ShippingMethod {
    EXPRESS(100, 1), PRIORITY(50, 3), CLASSIC(10, 5), NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol2/ShippingMethodP.java" startline="1" endline="20" pcid="2180">
public enum ShippingMethod {
    EXPRESS(100, 1), PRIORITY(50, 3), CLASSIC(10, 5), NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol5/ShippingMethodP.java" startline="1" endline="23" pcid="2171">
public enum ShippingMethod {
    EXPRESS(100, 1),
    PRIORITY(50, 3),
    CLASSIC(10, 5),
    NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol1/ShippingMethodP.java" startline="1" endline="20" pcid="2175">
public enum ShippingMethod {
    EXPRESS(100, 1), PRIORITY(50, 3), CLASSIC(10, 5), NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol3/ShippingMethodP.java" startline="1" endline="20" pcid="2204">
public enum ShippingMethod {
    EXPRESS(100, 1), PRIORITY(50, 3), CLASSIC(10, 5), NORUSH(0, 8);

    private final int fee;
    private final int handlingTime;

    ShippingMethod(int fee, int handlingTime) {
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
</class>

<class classid="155" nclones="8" nlines="13" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol2/CountryP.java" startline="1" endline="17" pcid="2154">
public enum Country {
    LUXEMBOURG(0),
    FRANCE(30),
    BELGIUM(50),
    GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol5/CountryP.java" startline="1" endline="14" pcid="2193">
public enum Country {
    LUXEMBOURG(0), FRANCE(30), BELGIUM(50), GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol4/CountryP.java" startline="1" endline="17" pcid="2162">
public enum Country {
    LUXEMBOURG(0),
    FRANCE(30),
    BELGIUM(50),
    GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol1/CountryP.java" startline="1" endline="14" pcid="2172">
public enum Country {
    LUXEMBOURG(0), FRANCE(30), BELGIUM(50), GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol2/CountryP.java" startline="1" endline="14" pcid="2176">
public enum Country {
    LUXEMBOURG(0), FRANCE(30), BELGIUM(50), GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol5/CountryP.java" startline="1" endline="17" pcid="2167">
public enum Country {
    LUXEMBOURG(0),
    FRANCE(30),
    BELGIUM(50),
    GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol3/CountryP.java" startline="1" endline="14" pcid="2181">
public enum Country {
    LUXEMBOURG(0), FRANCE(30), BELGIUM(50), GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol4/CountryP.java" startline="1" endline="14" pcid="2187">
public enum Country {
    LUXEMBOURG(0), FRANCE(30), BELGIUM(50), GERMANY(40);

    private final int basePrice;

    Country(int basePrice) {
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
</class>

<class classid="156" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol4/RecipientP.java" startline="1" endline="24" pcid="2165">
public class Recipient {
    private final String name;
    private final String address;
    private final Country country;

    public Recipient(String name, String address, Country country) {
        this.name = name;
        this.address = address;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public Country getCountry() {
        return country;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/chatgpt/sol5/RecipientP.java" startline="1" endline="24" pcid="2170">
public class Recipient {
    private final String name;
    private final String address;
    private final Country country;

    public Recipient(String name, String address, Country country) {
        this.name = name;
        this.address = address;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public Country getCountry() {
        return country;
    }
}

</source>
</class>

<class classid="157" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol1/PackageP.java" startline="1" endline="28" pcid="2174">
public class Package {
    private String recipientName;
    private String recipientAddress;
    private String item;
    private Country country;
    private ShippingMethod shippingMethod;

    public Package(String recipientName, String recipientAddress, String item, Country country, ShippingMethod shippingMethod) {
        this.recipientName = recipientName;
        this.recipientAddress = recipientAddress;
        this.item = item;
        this.country = country;
        this.shippingMethod = shippingMethod;
    }

    public int calculateTotalCost() {
        return country.getBasePrice() + shippingMethod.getFee();
    }

    public void printPackageDetails() {
        System.out.println("Recipient: " + recipientName);
        System.out.println("Address: " + recipientAddress);
        System.out.println("Item: " + item);
        System.out.println("Shipping Method: " + shippingMethod.name() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Cost: " + calculateTotalCost() + " EUR");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol3/PackageP.java" startline="1" endline="28" pcid="2184">
public class Package {
    private String recipientName;
    private String recipientAddress;
    private String item;
    private Country country;
    private ShippingMethod shippingMethod;

    public Package(String recipientName, String recipientAddress, String item, Country country, ShippingMethod shippingMethod) {
        this.recipientName = recipientName;
        this.recipientAddress = recipientAddress;
        this.item = item;
        this.country = country;
        this.shippingMethod = shippingMethod;
    }

    public int calculateTotalCost() {
        return country.getBasePrice() + shippingMethod.getFee();
    }

    public void printPackageDetails() {
        System.out.println("Recipient: " + recipientName);
        System.out.println("Address: " + recipientAddress);
        System.out.println("Item: " + item);
        System.out.println("Shipping Method: " + shippingMethod.name() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Cost: " + calculateTotalCost() + " EUR");
    }
}

</source>
</class>

<class classid="158" nclones="2" nlines="22" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol2/PackageP.java" startline="1" endline="25" pcid="2179">
public class Package {
    private String recipientName;
    private String recipientAddress;
    private String item;
    private Country country;
    private ShippingMethod shippingMethod;

    public Package(String recipientName, String recipientAddress, String item, Country country, ShippingMethod shippingMethod) {
        this.recipientName = recipientName;
        this.recipientAddress = recipientAddress;
        this.item = item;
        this.country = country;
        this.shippingMethod = shippingMethod;
    }

    public void printDetails() {
        int totalCost = country.getBasePrice() + shippingMethod.getFee();
        System.out.println("Recipient: " + recipientName);
        System.out.println("Address: " + recipientAddress);
        System.out.println("Item: " + item);
        System.out.println("Shipping Method: " + shippingMethod.name() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Cost: " + totalCost + " EUR");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/copilot/sol5/PackageP.java" startline="1" endline="25" pcid="2195">
public class Package {
    private String recipientName;
    private String recipientAddress;
    private String item;
    private Country country;
    private ShippingMethod shippingMethod;

    public Package(String recipientName, String recipientAddress, String item, Country country, ShippingMethod shippingMethod) {
        this.recipientName = recipientName;
        this.recipientAddress = recipientAddress;
        this.item = item;
        this.country = country;
        this.shippingMethod = shippingMethod;
    }

    public void printDetails() {
        int totalCost = country.getBasePrice() + shippingMethod.getFee();
        System.out.println("Recipient: " + recipientName);
        System.out.println("Address: " + recipientAddress);
        System.out.println("Item: " + item);
        System.out.println("Shipping Method: " + shippingMethod.name() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Cost: " + totalCost + " EUR");
    }
}

</source>
</class>

<class classid="159" nclones="2" nlines="11" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol2/CountryP.java" startline="1" endline="14" pcid="2198">
public class Country {
    private String name;
    private int basePrice;

    public Country(String name, int basePrice) {
        this.name = name;
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol5/CountryP.java" startline="1" endline="14" pcid="2208">
public class Country {
    private String name;
    private int basePrice;

    public Country(String name, int basePrice) {
        this.name = name;
        this.basePrice = basePrice;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
</class>

<class classid="160" nclones="2" nlines="16" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol2/ShippingMethodP.java" startline="1" endline="20" pcid="2201">
public class ShippingMethod {
    private String name;
    private int fee;
    private int handlingTime;

    public ShippingMethod(String name, int fee, int handlingTime) {
        this.name = name;
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/deepseek/sol5/ShippingMethodP.java" startline="1" endline="20" pcid="2211">
public class ShippingMethod {
    private String name;
    private int fee;
    private int handlingTime;

    public ShippingMethod(String name, int fee, int handlingTime) {
        this.name = name;
        this.fee = fee;
        this.handlingTime = handlingTime;
    }

    public int getFee() {
        return fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }
}

</source>
</class>

<class classid="161" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol1/ShippingMethodP.java" startline="1" endline="23" pcid="2215">
public enum ShippingMethod {
    EXPRESS(1, 100),
    PRIORITY(3, 50),
    CLASSIC(5, 10),
    NORUSH(8, 0);

    private final int handlingTime;
    private final double fee;

    ShippingMethod(int handlingTime, double fee) {
        this.handlingTime = handlingTime;
        this.fee = fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }

    public double getFee() {
        return fee;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol2/ShippingMethodP.java" startline="1" endline="23" pcid="2221">
public enum ShippingMethod {
    EXPRESS(1, 100),
    PRIORITY(3, 50),
    CLASSIC(5, 10),
    NORUSH(8, 0);

    private final int handlingTime;
    private final double fee;

    ShippingMethod(int handlingTime, double fee) {
        this.handlingTime = handlingTime;
        this.fee = fee;
    }

    public int getHandlingTime() {
        return handlingTime;
    }

    public double getFee() {
        return fee;
    }
}

</source>
</class>

<class classid="162" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol3/CountryP.java" startline="1" endline="23" pcid="2222">
public enum Country {
    LUXEMBOURG("Luxembourg", 0),
    FRANCE("France", 30),
    BELGIUM("Belgium", 50),
    GERMANY("Germany", 40);

    private final String name;
    private final int basePrice;

    Country(String name, int basePrice) {
        this.name = name;
        this.basePrice = basePrice;
    }

    public String getName() {
        return name;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol4/CountryP.java" startline="1" endline="23" pcid="2227">
public enum Country {
    LUXEMBOURG("Luxembourg", 0),
    FRANCE("France", 30),
    BELGIUM("Belgium", 50),
    GERMANY("Germany", 40);

    private final String name;
    private final int basePrice;

    Country(String name, int basePrice) {
        this.name = name;
        this.basePrice = basePrice;
    }

    public String getName() {
        return name;
    }

    public int getBasePrice() {
        return basePrice;
    }
}

</source>
</class>

<class classid="163" nclones="3" nlines="20" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol3/MainP.java" startline="1" endline="23" pcid="2223">
public class Main {
    public static void main(String[] args) {
        Recipient recipient1 = new Recipient("John Doe", "123 Main Street, Luxembourg City", Country.LUXEMBOURG);
        Recipient recipient2 = new Recipient("Jean Dupont", "456 Rue de Paris, Paris", Country.FRANCE);
        Recipient recipient3 = new Recipient("Jan Van Damme", "789 Grote Markt, Brussels", Country.BELGIUM);
        Recipient recipient4 = new Recipient("Hans Müller", "101 Berliner Allee, Berlin", Country.GERMANY);

        Package package1 = new Package(recipient1, "Documents", ShippingMethod.EXPRESS);
        Package package2 = new Package(recipient2, "Electronics", ShippingMethod.PRIORITY);
        Package package3 = new Package(recipient3, "Books", ShippingMethod.CLASSIC);
        Package package4 = new Package(recipient4, "Clothes", ShippingMethod.NORUSH);
        Package package5 = new Package(recipient1, "Gift", ShippingMethod.NORUSH);
        Package package6 = new Package(recipient2, "Art", ShippingMethod.EXPRESS);

        package1.printShippingLabel();
        package2.printShippingLabel();
        package3.printShippingLabel();
        package4.printShippingLabel();
        package5.printShippingLabel();
        package6.printShippingLabel();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol5/MainP.java" startline="1" endline="23" pcid="2237">
public class Main {
    public static void main(String[] args) {
        Recipient recipient1 = new Recipient("John Doe", "123 Main Street, Luxembourg City", Country.LUXEMBOURG);
        Recipient recipient2 = new Recipient("Jean Dupont", "456 Rue de Paris, Paris", Country.FRANCE);
        Recipient recipient3 = new Recipient("Jan Van Damme", "789 Grote Markt, Brussels", Country.BELGIUM);
        Recipient recipient4 = new Recipient("Hans Müller", "101 Berliner Allee, Berlin", Country.GERMANY);

        Package package1 = new Package(recipient1, "Documents", ShippingMethod.EXPRESS);
        Package package2 = new Package(recipient2, "Electronics", ShippingMethod.PRIORITY);
        Package package3 = new Package(recipient3, "Books", ShippingMethod.CLASSIC);
        Package package4 = new Package(recipient4, "Clothes", ShippingMethod.NORUSH);
        Package package5 = new Package(recipient1, "Gift", ShippingMethod.NORUSH);
        Package package6 = new Package(recipient2, "Art", ShippingMethod.EXPRESS);

        package1.printShippingLabel();
        package2.printShippingLabel();
        package3.printShippingLabel();
        package4.printShippingLabel();
        package5.printShippingLabel();
        package6.printShippingLabel();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol4/MainP.java" startline="1" endline="23" pcid="2228">
public class Main {
    public static void main(String[] args) {
        Recipient recipient1 = new Recipient("John Doe", "123 Main Street, Luxembourg City", Country.LUXEMBOURG);
        Recipient recipient2 = new Recipient("Jean Dupont", "456 Rue de Paris, Paris", Country.FRANCE);
        Recipient recipient3 = new Recipient("Jan Van Damme", "789 Grote Markt, Brussels", Country.BELGIUM);
        Recipient recipient4 = new Recipient("Hans Müller", "101 Berliner Allee, Berlin", Country.GERMANY);

        Package package1 = new Package(recipient1, "Documents", ShippingMethod.EXPRESS);
        Package package2 = new Package(recipient2, "Electronics", ShippingMethod.PRIORITY);
        Package package3 = new Package(recipient3, "Books", ShippingMethod.CLASSIC);
        Package package4 = new Package(recipient4, "Clothes", ShippingMethod.NORUSH);
        Package package5 = new Package(recipient1, "Gift", ShippingMethod.NORUSH);
        Package package6 = new Package(recipient2, "Art", ShippingMethod.EXPRESS);

        package1.printShippingLabel();
        package2.printShippingLabel();
        package3.printShippingLabel();
        package4.printShippingLabel();
        package5.printShippingLabel();
        package6.printShippingLabel();
    }
}

</source>
</class>

<class classid="164" nclones="2" nlines="32" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol3/PackageP.java" startline="1" endline="39" pcid="2224">
public class Package {
    private Recipient recipient;
    private String itemShipped;
    private ShippingMethod shippingMethod;

    public Package(Recipient recipient, String itemShipped, ShippingMethod shippingMethod) {
        this.recipient = recipient;
        this.itemShipped = itemShipped;
        this.shippingMethod = shippingMethod;
    }

    public Recipient getRecipient() {
        return recipient;
    }

    public String getItemShipped() {
        return itemShipped;
    }

    public ShippingMethod getShippingMethod() {
        return shippingMethod;
    }

    public double calculateTotalCost() {
        return recipient.getCountry().getBasePrice() + shippingMethod.getFee();
    }

    public void printShippingLabel() {
        System.out.println("--- Shipping Label ---");
        System.out.println("Recipient Name: " + recipient.getName());
        System.out.println("Address: " + recipient.getAddress());
        System.out.println("Country: " + recipient.getCountry().getName());
        System.out.println("Item Shipped: " + itemShipped);
        System.out.println("Shipping Method: " + shippingMethod.getName() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Shipping Cost: " + calculateTotalCost() + " EUR");
        System.out.println("----------------------");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol4/PackageP.java" startline="1" endline="39" pcid="2229">
public class Package {
    private Recipient recipient;
    private String itemShipped;
    private ShippingMethod shippingMethod;

    public Package(Recipient recipient, String itemShipped, ShippingMethod shippingMethod) {
        this.recipient = recipient;
        this.itemShipped = itemShipped;
        this.shippingMethod = shippingMethod;
    }

    public Recipient getRecipient() {
        return recipient;
    }

    public String getItemShipped() {
        return itemShipped;
    }

    public ShippingMethod getShippingMethod() {
        return shippingMethod;
    }

    public double calculateTotalCost() {
        return recipient.getCountry().getBasePrice() + shippingMethod.getFee();
    }

    public void printShippingLabel() {
        System.out.println("--- Shipping Label ---");
        System.out.println("Recipient Name: " + recipient.getName());
        System.out.println("Address: " + recipient.getAddress());
        System.out.println("Country: " + recipient.getCountry().getName());
        System.out.println("Item Shipped: " + itemShipped);
        System.out.println("Shipping Method: " + shippingMethod.getName() + " (Fee: " + shippingMethod.getFee() + " EUR, Handling Time: " + shippingMethod.getHandlingTime() + " days)");
        System.out.println("Total Shipping Cost: " + calculateTotalCost() + " EUR");
        System.out.println("----------------------");
    }
}

</source>
</class>

<class classid="165" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol3/RecipientP.java" startline="1" endline="24" pcid="2225">
public class Recipient {
    private String name;
    private String address;
    private Country country;

    public Recipient(String name, String address, Country country) {
        this.name = name;
        this.address = address;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public Country getCountry() {
        return country;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol4/RecipientP.java" startline="1" endline="24" pcid="2230">
public class Recipient {
    private String name;
    private String address;
    private Country country;

    public Recipient(String name, String address, Country country) {
        this.name = name;
        this.address = address;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    public Country getCountry() {
        return country;
    }
}

</source>
</class>

<class classid="166" nclones="2" nlines="23" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol3/ShippingMethodP.java" startline="1" endline="29" pcid="2226">
public enum ShippingMethod {
    EXPRESS("EXPRESS", 1, 100),
    PRIORITY("PRIORITY", 3, 50),
    CLASSIC("CLASSIC", 5, 10),
    NORUSH("NORUSH", 8, 0);

    private final String name;
    private final int handlingTime;
    private final int fee;

    ShippingMethod(String name, int handlingTime, int fee) {
        this.name = name;
        this.handlingTime = handlingTime;
        this.fee = fee;
    }

    public String getName() {
        return name;
    }

    public int getHandlingTime() {
        return handlingTime;
    }

    public int getFee() {
        return fee;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 1/gemini/sol4/ShippingMethodP.java" startline="1" endline="29" pcid="2231">
public enum ShippingMethod {
    EXPRESS("EXPRESS", 1, 100),
    PRIORITY("PRIORITY", 3, 50),
    CLASSIC("CLASSIC", 5, 10),
    NORUSH("NORUSH", 8, 0);

    private final String name;
    private final int handlingTime;
    private final int fee;

    ShippingMethod(String name, int handlingTime, int fee) {
        this.name = name;
        this.handlingTime = handlingTime;
        this.fee = fee;
    }

    public String getName() {
        return name;
    }

    public int getHandlingTime() {
        return handlingTime;
    }

    public int getFee() {
        return fee;
    }
}

</source>
</class>

<class classid="167" nclones="2" nlines="26" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/chatgpt/sol1/OrderItemP.java" startline="1" endline="34" pcid="2240">
import java.util.Objects;

public class OrderItem {
    private String productName;
    private double unitPrice;
    private int quantity;

    public OrderItem(String productName, double unitPrice, int quantity) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.quantity = quantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrderItem orderItem = (OrderItem) o;
        return Double.compare(orderItem.unitPrice, unitPrice) == 0 &&
                quantity == orderItem.quantity &&
                productName.equals(orderItem.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, quantity);
    }

    @Override
    public String toString() {
        return quantity + "x " + productName + " @ " + unitPrice + " EUR each";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/chatgpt/sol3/OrderItemP.java" startline="1" endline="34" pcid="2246">
import java.util.Objects;

public class OrderItem {
    private String productName;
    private double unitPrice;
    private int quantity;

    public OrderItem(String productName, double unitPrice, int quantity) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.quantity = quantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrderItem orderItem = (OrderItem) o;
        return Double.compare(orderItem.unitPrice, unitPrice) == 0 &&
                quantity == orderItem.quantity &&
                productName.equals(orderItem.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, quantity);
    }

    @Override
    public String toString() {
        return quantity + "x " + productName + " @ " + unitPrice + " EUR each";
    }
}

</source>
</class>

<class classid="168" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol2/MainP.java" startline="1" endline="21" pcid="2256">
public class Main {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("Orange", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList orderList = new OrderList("TheOne");
        orderList.addItem(o1);
        orderList.addItem(o2);
        orderList.addItem(o3);
        orderList.addItem(o4);
        orderList.addItem(o5);
        orderList.addItem(o6);

        orderList.printOrderList();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol3/MainP.java" startline="1" endline="21" pcid="2259">
public class Main {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("Orange", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList orderList = new OrderList("TheOne");
        orderList.addItem(o1);
        orderList.addItem(o2);
        orderList.addItem(o3);
        orderList.addItem(o4);
        orderList.addItem(o5);
        orderList.addItem(o6);

        orderList.printOrderList();
    }
}

</source>
</class>

<class classid="169" nclones="2" nlines="22" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol2/OrderListP.java" startline="1" endline="27" pcid="2257">
import java.util.HashSet;
import java.util.Set;

public class OrderList {
    private String clientName;
    private Set<Order> orders;

    public OrderList(String clientName) {
        this.clientName = clientName;
        this.orders = new HashSet<>();
    }

    public void addItem(Order order) {
        orders.add(order);
    }

    public void printOrderList() {
        double totalCost = orders.stream().mapToDouble(Order::getTotalPrice).sum();
        System.out.println("Order List for " + clientName + ". You ordered " + orders.size() + " different products. Total cost is: " + totalCost + " EURO");
        int index = 1;
        for (Order order : orders) {
            System.out.println(index + ". Order: " + order);
            index++;
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol3/OrderListP.java" startline="1" endline="27" pcid="2260">
import java.util.HashSet;
import java.util.Set;

public class OrderList {
    private String clientName;
    private Set<Order> orders;

    public OrderList(String clientName) {
        this.clientName = clientName;
        this.orders = new HashSet<>();
    }

    public void addItem(Order order) {
        orders.add(order);
    }

    public void printOrderList() {
        double totalCost = orders.stream().mapToDouble(Order::getTotalPrice).sum();
        System.out.println("Order List for " + clientName + ". You ordered " + orders.size() + " different products. Total cost is: " + totalCost + " EURO");
        int index = 1;
        for (Order order : orders) {
            System.out.println(index + ". Order: " + order);
            index++;
        }
    }
}

</source>
</class>

<class classid="170" nclones="2" nlines="38" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol2/OrderP.java" startline="1" endline="50" pcid="2258">
import java.util.Objects;

public class Order {
    private String productName;
    private double unitPrice;
    private int amount;

    public Order(String productName, double unitPrice, int amount) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.amount = amount;
    }

    public String getProductName() {
        return productName;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public int getAmount() {
        return amount;
    }

    public double getTotalPrice() {
        return unitPrice * amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Double.compare(order.unitPrice, unitPrice) == 0 &&
                amount == order.amount &&
                Objects.equals(productName, order.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, amount);
    }

    @Override
    public String toString() {
        return amount + " " + productName + " x " + unitPrice + " EURO = " + getTotalPrice() + " EURO";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol3/OrderP.java" startline="1" endline="50" pcid="2261">
import java.util.Objects;

public class Order {
    private String productName;
    private double unitPrice;
    private int amount;

    public Order(String productName, double unitPrice, int amount) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.amount = amount;
    }

    public String getProductName() {
        return productName;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public int getAmount() {
        return amount;
    }

    public double getTotalPrice() {
        return unitPrice * amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Double.compare(order.unitPrice, unitPrice) == 0 &&
                amount == order.amount &&
                Objects.equals(productName, order.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, amount);
    }

    @Override
    public String toString() {
        return amount + " " + productName + " x " + unitPrice + " EURO = " + getTotalPrice() + " EURO";
    }
}

</source>
</class>

<class classid="171" nclones="2" nlines="18" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/copilot/sol5/MainP.java" startline="1" endline="20" pcid="2263">
public class Main {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("Orange", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList w2 = new OrderList("TheOne");
        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);
        w2.printOrder();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/deepseek/sol2/MainP.java" startline="1" endline="21" pcid="2269">
public class Main {
    public static void main(String[] args) {
        Order o1 = new Order("Coke", 0.80, 100);
        Order o2 = new Order("KitKat", 0.70, 250);
        Order o3 = new Order("Orange", 0.72, 350);
        Order o4 = new Order("Snickers", 1.60, 150);
        Order o5 = new Order("Snickers", 1.60, 150);
        Order o6 = new Order("Coke", 0.80, 100);

        OrderList w2 = new OrderList("TheOne");
        w2.addItem(o1);
        w2.addItem(o2);
        w2.addItem(o3);
        w2.addItem(o4);
        w2.addItem(o5);
        w2.addItem(o6);

        w2.printOrder();
    }
}

</source>
</class>

<class classid="172" nclones="2" nlines="26" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/deepseek/sol1/OrderItemP.java" startline="1" endline="38" pcid="2266">
import java.util.Objects;

public class OrderItem {
    private String productName;
    private double unitPrice;
    private int quantity;

    public OrderItem(String productName, double unitPrice, int quantity) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.quantity = quantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrderItem orderItem = (OrderItem) o;
        return Double.compare(orderItem.unitPrice, unitPrice) == 0 &&
               quantity == orderItem.quantity &&
               Objects.equals(productName, orderItem.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, quantity);
    }

    @Override
    public String toString() {
        return "OrderItem{" +
               "productName='" + productName + '\'' +
               ", unitPrice=" + unitPrice +
               ", quantity=" + quantity +
               '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/deepseek/sol3/OrderItemP.java" startline="1" endline="38" pcid="2272">
import java.util.Objects;

public class OrderItem {
    private String productName;
    private double unitPrice;
    private int quantity;

    public OrderItem(String productName, double unitPrice, int quantity) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.quantity = quantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrderItem orderItem = (OrderItem) o;
        return Double.compare(orderItem.unitPrice, unitPrice) == 0 &&
               quantity == orderItem.quantity &&
               Objects.equals(productName, orderItem.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, quantity);
    }

    @Override
    public String toString() {
        return "OrderItem{" +
               "productName='" + productName + '\'' +
               ", unitPrice=" + unitPrice +
               ", quantity=" + quantity +
               '}';
    }
}

</source>
</class>

<class classid="173" nclones="2" nlines="38" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/gemini/sol4/OrderP.java" startline="1" endline="50" pcid="2292">
import java.util.Objects;

public class Order {
    private String productName;
    private double unitPrice;
    private int amount;

    public Order(String productName, double unitPrice, int amount) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.amount = amount;
    }

    public String getProductName() {
        return productName;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public int getAmount() {
        return amount;
    }

    public double getTotalPrice() {
        return unitPrice * amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Double.compare(order.unitPrice, unitPrice) == 0 &&
                amount == order.amount &&
                Objects.equals(productName, order.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, amount);
    }

    @Override
    public String toString() {
        return "Order: " + amount + " " + productName + " x " + unitPrice + " EURO = " + getTotalPrice() + " EURO";
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 2/gemini/sol5/OrderP.java" startline="1" endline="50" pcid="2295">
import java.util.Objects;

public class Order {
    private String productName;
    private double unitPrice;
    private int amount;

    public Order(String productName, double unitPrice, int amount) {
        this.productName = productName;
        this.unitPrice = unitPrice;
        this.amount = amount;
    }

    public String getProductName() {
        return productName;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    public int getAmount() {
        return amount;
    }

    public double getTotalPrice() {
        return unitPrice * amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Double.compare(order.unitPrice, unitPrice) == 0 &&
                amount == order.amount &&
                Objects.equals(productName, order.productName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productName, unitPrice, amount);
    }

    @Override
    public String toString() {
        return "Order: " + amount + " " + productName + " x " + unitPrice + " EURO = " + getTotalPrice() + " EURO";
    }
}

</source>
</class>

<class classid="174" nclones="4" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 3/copilot/sol2/MainP.java" startline="1" endline="23" pcid="2301">
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        int numElements = 100000;
        HashSet<Person> set = new HashSet<>();

        long startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.add(new Person("Name" + i, i));
        }
        long endTime = System.nanoTime();
        System.out.println("Time to add elements: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.contains(new Person("Name" + i, i));
        }
        endTime = System.nanoTime();
        System.out.println("Time to retrieve elements: " + (endTime - startTime) + " ns");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 3/copilot/sol5/MainP.java" startline="1" endline="23" pcid="2307">
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        int numElements = 100000;
        HashSet<Person> set = new HashSet<>();

        long startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.add(new Person("Name" + i, i));
        }
        long endTime = System.nanoTime();
        System.out.println("Time to add elements: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.contains(new Person("Name" + i, i));
        }
        endTime = System.nanoTime();
        System.out.println("Time to retrieve elements: " + (endTime - startTime) + " ns");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 3/copilot/sol4/MainP.java" startline="1" endline="23" pcid="2305">
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        int numElements = 100000;
        HashSet<Person> set = new HashSet<>();

        long startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.add(new Person("Name" + i, i));
        }
        long endTime = System.nanoTime();
        System.out.println("Time to add elements: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.contains(new Person("Name" + i, i));
        }
        endTime = System.nanoTime();
        System.out.println("Time to retrieve elements: " + (endTime - startTime) + " ns");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 3/copilot/sol3/MainP.java" startline="1" endline="23" pcid="2303">
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        int numElements = 100000;
        HashSet<Person> set = new HashSet<>();

        long startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.add(new Person("Name" + i, i));
        }
        long endTime = System.nanoTime();
        System.out.println("Time to add elements: " + (endTime - startTime) + " ns");

        startTime = System.nanoTime();
        for (int i = 0; i < numElements; i++) {
            set.contains(new Person("Name" + i, i));
        }
        endTime = System.nanoTime();
        System.out.println("Time to retrieve elements: " + (endTime - startTime) + " ns");
    }
}

</source>
</class>

<class classid="175" nclones="2" nlines="40" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/copilot/sol1/LoyaltyCardP.java" startline="1" endline="53" pcid="2337">
import java.util.Objects;

public class LoyaltyCard {
    private String id;
    private int points;

    public LoyaltyCard(String id) {
        this.id = id;
        this.points = 0;
    }

    public String getId() {
        return id;
    }

    public int getPoints() {
        return points;
    }

    public void addPoints(double amount) {
        this.points += (int) (amount * 0.1);
    }

    public boolean redeemPoints(int amount) {
        if (points >= amount) {
            points -= amount;
            return true;
        }
        return false;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LoyaltyCard that = (LoyaltyCard) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "LoyaltyCard{" +
                "id='" + id + '\'' +
                ", points=" + points +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/copilot/sol2/LoyaltyCardP.java" startline="1" endline="53" pcid="2341">
import java.util.Objects;

public class LoyaltyCard {
    private String id;
    private int points;

    public LoyaltyCard(String id) {
        this.id = id;
        this.points = 0;
    }

    public String getId() {
        return id;
    }

    public int getPoints() {
        return points;
    }

    public void addPoints(double amount) {
        this.points += (int) (amount * 0.1);
    }

    public boolean redeemPoints(int amount) {
        if (points >= amount) {
            points -= amount;
            return true;
        }
        return false;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LoyaltyCard that = (LoyaltyCard) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "LoyaltyCard{" +
                "id='" + id + '\'' +
                ", points=" + points +
                '}';
    }
}

</source>
</class>

<class classid="176" nclones="2" nlines="32" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/copilot/sol1/SupermarketP.java" startline="1" endline="41" pcid="2339">
import java.time.LocalDate;
import java.util.*;

public class Supermarket {
    private Map<LocalDate, List<LoyaltyCard>> redeemedCards;

    public Supermarket() {
        this.redeemedCards = new HashMap<>();
    }

    public void addPurchase(LoyaltyCard card, double amount) {
        card.addPoints(amount);
    }

    public boolean redeem(LoyaltyCard card, int amount) {
        LocalDate today = LocalDate.now();
        List<LoyaltyCard> redeemedToday = redeemedCards.getOrDefault(today, new ArrayList<>());

        if (redeemedToday.contains(card)) {
            return false;
        }

        if (card.redeemPoints(amount)) {
            redeemedToday.add(card);
            redeemedCards.put(today, redeemedToday);
            return true;
        }

        return false;
    }

    public void printRedeemedCards() {
        for (Map.Entry<LocalDate, List<LoyaltyCard>> entry : redeemedCards.entrySet()) {
            System.out.println("Date: " + entry.getKey());
            for (LoyaltyCard card : entry.getValue()) {
                System.out.println(card);
            }
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/copilot/sol2/SupermarketP.java" startline="1" endline="41" pcid="2343">
import java.time.LocalDate;
import java.util.*;

public class Supermarket {
    private Map<LocalDate, List<LoyaltyCard>> redeemedCards;

    public Supermarket() {
        this.redeemedCards = new HashMap<>();
    }

    public void addPurchase(LoyaltyCard card, double amount) {
        card.addPoints(amount);
    }

    public boolean redeem(LoyaltyCard card, int amount) {
        LocalDate today = LocalDate.now();
        List<LoyaltyCard> redeemedToday = redeemedCards.getOrDefault(today, new ArrayList<>());

        if (redeemedToday.contains(card)) {
            return false;
        }

        if (card.redeemPoints(amount)) {
            redeemedToday.add(card);
            redeemedCards.put(today, redeemedToday);
            return true;
        }

        return false;
    }

    public void printRedeemedCards() {
        for (Map.Entry<LocalDate, List<LoyaltyCard>> entry : redeemedCards.entrySet()) {
            System.out.println("Date: " + entry.getKey());
            for (LoyaltyCard card : entry.getValue()) {
                System.out.println(card);
            }
        }
    }
}

</source>
</class>

<class classid="177" nclones="2" nlines="40" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol1/LoyaltyCardP.java" startline="1" endline="53" pcid="2351">
import java.util.Objects;

public class LoyaltyCard {
    private String id;
    private int points;

    public LoyaltyCard(String id) {
        this.id = id;
        this.points = 0;
    }

    public String getId() {
        return id;
    }

    public int getPoints() {
        return points;
    }

    public void addPoints(double purchaseAmount) {
        points += (int) (purchaseAmount * 0.1);
    }

    public boolean redeemPoints(int amount) {
        if (points >= amount) {
            points -= amount;
            return true;
        }
        return false;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LoyaltyCard that = (LoyaltyCard) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "LoyaltyCard{" +
               "id='" + id + '\'' +
               ", points=" + points +
               '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol3/LoyaltyCardP.java" startline="1" endline="53" pcid="2357">
import java.util.Objects;

public class LoyaltyCard {
    private String id;
    private int points;

    public LoyaltyCard(String id) {
        this.id = id;
        this.points = 0;
    }

    public String getId() {
        return id;
    }

    public int getPoints() {
        return points;
    }

    public void addPoints(double purchaseAmount) {
        points += (int) (purchaseAmount * 0.1);
    }

    public boolean redeemPoints(int amount) {
        if (points >= amount) {
            points -= amount;
            return true;
        }
        return false;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LoyaltyCard that = (LoyaltyCard) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "LoyaltyCard{" +
               "id='" + id + '\'' +
               ", points=" + points +
               '}';
    }
}

</source>
</class>

<class classid="178" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol1/SupermarketAppP.java" startline="1" endline="28" pcid="2352">
public class SupermarketApp {
    public static void main(String[] args) {
        Supermarket supermarket = new Supermarket();

        LoyaltyCard card1 = new LoyaltyCard("CARD123");
        LoyaltyCard card2 = new LoyaltyCard("CARD456");

        card1.addPoints(100);
        card2.addPoints(200);

        if (supermarket.canRedeem(card1, 5)) {
            supermarket.addRedemption(card1);
            System.out.println("Card1 redemption successful!");
        } else {
            System.out.println("Card1 redemption failed.");
        }

        if (supermarket.canRedeem(card2, 25)) {
            supermarket.addRedemption(card2);
            System.out.println("Card2 redemption successful!");
        } else {
            System.out.println("Card2 redemption failed.");
        }

        supermarket.printRedemptionHistory();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol3/SupermarketAppP.java" startline="1" endline="28" pcid="2359">
public class SupermarketApp {
    public static void main(String[] args) {
        Supermarket supermarket = new Supermarket();

        LoyaltyCard card1 = new LoyaltyCard("CARD123");
        LoyaltyCard card2 = new LoyaltyCard("CARD456");

        card1.addPoints(100);
        card2.addPoints(200);

        if (supermarket.canRedeem(card1, 5)) {
            supermarket.addRedemption(card1);
            System.out.println("Card1 redemption successful!");
        } else {
            System.out.println("Card1 redemption failed.");
        }

        if (supermarket.canRedeem(card2, 25)) {
            supermarket.addRedemption(card2);
            System.out.println("Card2 redemption successful!");
        } else {
            System.out.println("Card2 redemption failed.");
        }

        supermarket.printRedemptionHistory();
    }
}

</source>
</class>

<class classid="179" nclones="2" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol1/SupermarketP.java" startline="1" endline="36" pcid="2353">
import java.time.LocalDate;
import java.util.*;

public class Supermarket {
    private Map<LocalDate, List<LoyaltyCard>> redemptionHistory;

    public Supermarket() {
        this.redemptionHistory = new HashMap<>();
    }

    public void addRedemption(LoyaltyCard card) {
        LocalDate today = LocalDate.now();
        redemptionHistory.computeIfAbsent(today, k -> new ArrayList<>()).add(card);
    }

    public boolean canRedeem(LoyaltyCard card, int amount) {
        LocalDate today = LocalDate.now();
        List<LoyaltyCard> redeemedToday = redemptionHistory.getOrDefault(today, Collections.emptyList());

        if (redeemedToday.contains(card)) {
            return false;
        }

        return card.redeemPoints(amount);
    }

    public void printRedemptionHistory() {
        for (Map.Entry<LocalDate, List<LoyaltyCard>> entry : redemptionHistory.entrySet()) {
            System.out.println("Date: " + entry.getKey());
            for (LoyaltyCard card : entry.getValue()) {
                System.out.println("  " + card);
            }
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab8/Ex. 4/deepseek/sol2/SupermarketP.java" startline="1" endline="36" pcid="2356">
import java.time.LocalDate;
import java.util.*;

public class Supermarket {
    private Map<LocalDate, List<LoyaltyCard>> redemptionHistory;

    public Supermarket() {
        this.redemptionHistory = new HashMap<>();
    }

    public void addRedemption(LoyaltyCard card) {
        LocalDate today = LocalDate.now();
        redemptionHistory.computeIfAbsent(today, k -> new ArrayList<>()).add(card);
    }

    public boolean canRedeem(LoyaltyCard card, int amount) {
        LocalDate today = LocalDate.now();
        List<LoyaltyCard> redeemedToday = redemptionHistory.getOrDefault(today, Collections.emptyList());

        if (redeemedToday.contains(card)) {
            return false;
        }

        return card.redeemPoints(amount);
    }

    public void printRedemptionHistory() {
        for (Map.Entry<LocalDate, List<LoyaltyCard>> entry : redemptionHistory.entrySet()) {
            System.out.println("Date: " + entry.getKey());
            for (LoyaltyCard card : entry.getValue()) {
                System.out.println("  " + card);
            }
        }
    }
}

</source>
</class>

<class classid="180" nclones="5" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol1/MainP.java" startline="1" endline="26" pcid="2415">
public class Main {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(10);

        Item trashItem = new TrashItem("Old Boot", 5, Rarity.WHITE);
        Item gearItem = new GearItem("Helmet", 100, Rarity.BLUE, 5, 4, 2);
        Item consumableItem = new ConsumableItem("Potion", 50, Rarity.GREEN, 3);

        inventory.add(trashItem);
        inventory.add(gearItem);
        inventory.add(consumableItem);

        System.out.println(inventory);

        inventory.use(2);
        inventory.use(2);
        inventory.use(2);
        inventory.use(2);

        inventory.sell(0);
        inventory.drop(1);

        System.out.println(inventory);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol4/MainP.java" startline="1" endline="26" pcid="2439">
public class Main {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(10);

        Item trashItem = new TrashItem("Old Boot", 5, Rarity.WHITE);
        Item gearItem = new GearItem("Helmet", 100, Rarity.BLUE, 5, 4, 2);
        Item consumableItem = new ConsumableItem("Potion", 50, Rarity.GREEN, 3);

        inventory.add(trashItem);
        inventory.add(gearItem);
        inventory.add(consumableItem);

        System.out.println(inventory);

        inventory.use(2);
        inventory.use(2);
        inventory.use(2);
        inventory.use(2);

        inventory.sell(0);
        inventory.drop(1);

        System.out.println(inventory);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol5/MainP.java" startline="1" endline="26" pcid="2447">
public class Main {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(10);

        Item trashItem = new TrashItem("Old Boot", 5, Rarity.WHITE);
        Item gearItem = new GearItem("Helmet", 100, Rarity.BLUE, 5, 4, 2);
        Item consumableItem = new ConsumableItem("Potion", 50, Rarity.GREEN, 3);

        inventory.add(trashItem);
        inventory.add(gearItem);
        inventory.add(consumableItem);

        System.out.println(inventory);

        inventory.use(2);
        inventory.use(2);
        inventory.use(2);
        inventory.use(2);

        inventory.sell(0);
        inventory.drop(1);

        System.out.println(inventory);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol3/MainP.java" startline="1" endline="26" pcid="2431">
public class Main {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(10);

        Item trashItem = new TrashItem("Old Boot", 5, Rarity.WHITE);
        Item gearItem = new GearItem("Helmet", 100, Rarity.BLUE, 5, 4, 2);
        Item consumableItem = new ConsumableItem("Potion", 50, Rarity.GREEN, 3);

        inventory.add(trashItem);
        inventory.add(gearItem);
        inventory.add(consumableItem);

        System.out.println(inventory);

        inventory.use(2);
        inventory.use(2);
        inventory.use(2);
        inventory.use(2);

        inventory.sell(0);
        inventory.drop(1);

        System.out.println(inventory);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol2/MainP.java" startline="1" endline="26" pcid="2423">
public class Main {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(10);

        Item trashItem = new TrashItem("Old Boot", 5, Rarity.WHITE);
        Item gearItem = new GearItem("Helmet", 100, Rarity.BLUE, 5, 4, 2);
        Item consumableItem = new ConsumableItem("Potion", 50, Rarity.GREEN, 3);

        inventory.add(trashItem);
        inventory.add(gearItem);
        inventory.add(consumableItem);

        System.out.println(inventory);

        inventory.use(2);
        inventory.use(2);
        inventory.use(2);
        inventory.use(2);

        inventory.sell(0);
        inventory.drop(1);

        System.out.println(inventory);
    }
}

</source>
</class>

<class classid="181" nclones="2" nlines="37" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol2/AbstractItemP.java" startline="1" endline="49" pcid="2418">
public abstract class AbstractItem implements Item {
    private String name;
    private int value;
    private Rarity rarity;

    public AbstractItem(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public int getValue() {
        return value;
    }

    @Override
    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractItem that = (AbstractItem) o;
        return name.equals(that.name) && rarity == that.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Item{" +
                "name='" + name + '\'' +
                ", value=" + value +
                ", rarity=" + rarity +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol3/AbstractItemP.java" startline="1" endline="49" pcid="2426">
public abstract class AbstractItem implements Item {
    private String name;
    private int value;
    private Rarity rarity;

    public AbstractItem(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public int getValue() {
        return value;
    }

    @Override
    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractItem that = (AbstractItem) o;
        return name.equals(that.name) && rarity == that.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Item{" +
                "name='" + name + '\'' +
                ", value=" + value +
                ", rarity=" + rarity +
                '}';
    }
}

</source>
</class>

<class classid="182" nclones="4" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol2/GearItemP.java" startline="1" endline="39" pcid="2420">
public class GearItem extends AbstractItem {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = criticalHit;
        this.determination = determination;
        this.directHit = directHit;
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public void use() {
        System.out.println("Gear item " + getName() + " used.");
    }

    @Override
    public String toString() {
        return super.toString() + " GearItem{" +
                "criticalHit=" + criticalHit +
                ", determination=" + determination +
                ", directHit=" + directHit +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol4/GearItemP.java" startline="1" endline="39" pcid="2436">
public class GearItem extends AbstractItem {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = criticalHit;
        this.determination = determination;
        this.directHit = directHit;
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public void use() {
        System.out.println("Gear item " + getName() + " used.");
    }

    @Override
    public String toString() {
        return super.toString() + " GearItem{" +
                "criticalHit=" + criticalHit +
                ", determination=" + determination +
                ", directHit=" + directHit +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol5/GearItemP.java" startline="1" endline="39" pcid="2444">
public class GearItem extends AbstractItem {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = criticalHit;
        this.determination = determination;
        this.directHit = directHit;
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public void use() {
        System.out.println("Gear item " + getName() + " used.");
    }

    @Override
    public String toString() {
        return super.toString() + " GearItem{" +
                "criticalHit=" + criticalHit +
                ", determination=" + determination +
                ", directHit=" + directHit +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol3/GearItemP.java" startline="1" endline="39" pcid="2428">
public class GearItem extends AbstractItem {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = criticalHit;
        this.determination = determination;
        this.directHit = directHit;
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public void use() {
        System.out.println("Gear item " + getName() + " used.");
    }

    @Override
    public String toString() {
        return super.toString() + " GearItem{" +
                "criticalHit=" + criticalHit +
                ", determination=" + determination +
                ", directHit=" + directHit +
                '}';
    }
}

</source>
</class>

<class classid="183" nclones="4" nlines="78" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol2/InventoryP.java" startline="1" endline="85" pcid="2421">
import java.util.ArrayList;
import java.util.List;

public class Inventory {
    private List<Item> items;
    private int capacity;

    public Inventory(int capacity) {
        this.capacity = capacity;
        this.items = new ArrayList<>();
    }

    public boolean add(Item item) {
        if (items.size() < capacity) {
            items.add(item);
            System.out.println("Added " + item.getName() + " to inventory.");
            return true;
        } else {
            System.out.println("Inventory is full. Cannot add " + item.getName() + ".");
            return false;
        }
    }

    public int drop(Item item) {
        int count = 0;
        while (items.remove(item)) {
            count++;
        }
        System.out.println("Removed " + count + " instances of " + item.getName() + " from inventory.");
        return count;
    }

    public boolean drop(int index) {
        if (index >= 0 && index < items.size()) {
            Item removedItem = items.remove(index);
            System.out.println("Removed " + removedItem.getName() + " from inventory.");
            return true;
        } else {
            System.out.println("Invalid index. Cannot remove item.");
            return false;
        }
    }

    public void use(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            item.use();
            if (item instanceof ConsumableItem) {
                ConsumableItem consumableItem = (ConsumableItem) item;
                if (consumableItem.getCharges() == 0) {
                    items.remove(index);
                    System.out.println("Removed " + consumableItem.getName() + " from inventory as it has no charges left.");
                }
            }
        } else {
            System.out.println("Invalid index. Cannot use item.");
        }
    }

    public boolean sell(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            if (item instanceof TrashItem || item instanceof ConsumableItem) {
                items.remove(index);
                System.out.println("Sold " + item.getName() + ".");
                return true;
            } else {
                System.out.println(item.getName() + " cannot be sold.");
                return false;
            }
        } else {
            System.out.println("Invalid index. Cannot sell item.");
            return false;
        }
    }

    @Override
    public String toString() {
        return "Inventory{" +
                "items=" + items +
                ", capacity=" + capacity +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol4/InventoryP.java" startline="1" endline="85" pcid="2437">
import java.util.ArrayList;
import java.util.List;

public class Inventory {
    private List<Item> items;
    private int capacity;

    public Inventory(int capacity) {
        this.capacity = capacity;
        this.items = new ArrayList<>();
    }

    public boolean add(Item item) {
        if (items.size() < capacity) {
            items.add(item);
            System.out.println("Added " + item.getName() + " to inventory.");
            return true;
        } else {
            System.out.println("Inventory is full. Cannot add " + item.getName() + ".");
            return false;
        }
    }

    public int drop(Item item) {
        int count = 0;
        while (items.remove(item)) {
            count++;
        }
        System.out.println("Removed " + count + " instances of " + item.getName() + " from inventory.");
        return count;
    }

    public boolean drop(int index) {
        if (index >= 0 && index < items.size()) {
            Item removedItem = items.remove(index);
            System.out.println("Removed " + removedItem.getName() + " from inventory.");
            return true;
        } else {
            System.out.println("Invalid index. Cannot remove item.");
            return false;
        }
    }

    public void use(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            item.use();
            if (item instanceof ConsumableItem) {
                ConsumableItem consumableItem = (ConsumableItem) item;
                if (consumableItem.getCharges() == 0) {
                    items.remove(index);
                    System.out.println("Removed " + consumableItem.getName() + " from inventory as it has no charges left.");
                }
            }
        } else {
            System.out.println("Invalid index. Cannot use item.");
        }
    }

    public boolean sell(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            if (item instanceof TrashItem || item instanceof ConsumableItem) {
                items.remove(index);
                System.out.println("Sold " + item.getName() + ".");
                return true;
            } else {
                System.out.println(item.getName() + " cannot be sold.");
                return false;
            }
        } else {
            System.out.println("Invalid index. Cannot sell item.");
            return false;
        }
    }

    @Override
    public String toString() {
        return "Inventory{" +
                "items=" + items +
                ", capacity=" + capacity +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol5/InventoryP.java" startline="1" endline="85" pcid="2445">
import java.util.ArrayList;
import java.util.List;

public class Inventory {
    private List<Item> items;
    private int capacity;

    public Inventory(int capacity) {
        this.capacity = capacity;
        this.items = new ArrayList<>();
    }

    public boolean add(Item item) {
        if (items.size() < capacity) {
            items.add(item);
            System.out.println("Added " + item.getName() + " to inventory.");
            return true;
        } else {
            System.out.println("Inventory is full. Cannot add " + item.getName() + ".");
            return false;
        }
    }

    public int drop(Item item) {
        int count = 0;
        while (items.remove(item)) {
            count++;
        }
        System.out.println("Removed " + count + " instances of " + item.getName() + " from inventory.");
        return count;
    }

    public boolean drop(int index) {
        if (index >= 0 && index < items.size()) {
            Item removedItem = items.remove(index);
            System.out.println("Removed " + removedItem.getName() + " from inventory.");
            return true;
        } else {
            System.out.println("Invalid index. Cannot remove item.");
            return false;
        }
    }

    public void use(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            item.use();
            if (item instanceof ConsumableItem) {
                ConsumableItem consumableItem = (ConsumableItem) item;
                if (consumableItem.getCharges() == 0) {
                    items.remove(index);
                    System.out.println("Removed " + consumableItem.getName() + " from inventory as it has no charges left.");
                }
            }
        } else {
            System.out.println("Invalid index. Cannot use item.");
        }
    }

    public boolean sell(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            if (item instanceof TrashItem || item instanceof ConsumableItem) {
                items.remove(index);
                System.out.println("Sold " + item.getName() + ".");
                return true;
            } else {
                System.out.println(item.getName() + " cannot be sold.");
                return false;
            }
        } else {
            System.out.println("Invalid index. Cannot sell item.");
            return false;
        }
    }

    @Override
    public String toString() {
        return "Inventory{" +
                "items=" + items +
                ", capacity=" + capacity +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol3/InventoryP.java" startline="1" endline="85" pcid="2429">
import java.util.ArrayList;
import java.util.List;

public class Inventory {
    private List<Item> items;
    private int capacity;

    public Inventory(int capacity) {
        this.capacity = capacity;
        this.items = new ArrayList<>();
    }

    public boolean add(Item item) {
        if (items.size() < capacity) {
            items.add(item);
            System.out.println("Added " + item.getName() + " to inventory.");
            return true;
        } else {
            System.out.println("Inventory is full. Cannot add " + item.getName() + ".");
            return false;
        }
    }

    public int drop(Item item) {
        int count = 0;
        while (items.remove(item)) {
            count++;
        }
        System.out.println("Removed " + count + " instances of " + item.getName() + " from inventory.");
        return count;
    }

    public boolean drop(int index) {
        if (index >= 0 && index < items.size()) {
            Item removedItem = items.remove(index);
            System.out.println("Removed " + removedItem.getName() + " from inventory.");
            return true;
        } else {
            System.out.println("Invalid index. Cannot remove item.");
            return false;
        }
    }

    public void use(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            item.use();
            if (item instanceof ConsumableItem) {
                ConsumableItem consumableItem = (ConsumableItem) item;
                if (consumableItem.getCharges() == 0) {
                    items.remove(index);
                    System.out.println("Removed " + consumableItem.getName() + " from inventory as it has no charges left.");
                }
            }
        } else {
            System.out.println("Invalid index. Cannot use item.");
        }
    }

    public boolean sell(int index) {
        if (index >= 0 && index < items.size()) {
            Item item = items.get(index);
            if (item instanceof TrashItem || item instanceof ConsumableItem) {
                items.remove(index);
                System.out.println("Sold " + item.getName() + ".");
                return true;
            } else {
                System.out.println(item.getName() + " cannot be sold.");
                return false;
            }
        } else {
            System.out.println("Invalid index. Cannot sell item.");
            return false;
        }
    }

    @Override
    public String toString() {
        return "Inventory{" +
                "items=" + items +
                ", capacity=" + capacity +
                '}';
    }
}

</source>
</class>

<class classid="184" nclones="3" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol3/ConsumableItemP.java" startline="1" endline="30" pcid="2427">
public class ConsumableItem extends AbstractItem {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = charges;
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Remaining charges: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return super.toString() + " ConsumableItem{" +
                "charges=" + charges +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol4/ConsumableItemP.java" startline="1" endline="30" pcid="2435">
public class ConsumableItem extends AbstractItem {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = charges;
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Remaining charges: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return super.toString() + " ConsumableItem{" +
                "charges=" + charges +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol5/ConsumableItemP.java" startline="1" endline="30" pcid="2443">
public class ConsumableItem extends AbstractItem {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = charges;
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Remaining charges: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return super.toString() + " ConsumableItem{" +
                "charges=" + charges +
                '}';
    }
}

</source>
</class>

<class classid="185" nclones="2" nlines="38" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol4/AbstractItemP.java" startline="1" endline="51" pcid="2434">
import java.util.Objects;

public abstract class AbstractItem implements Item {
    private String name;
    private int value;
    private Rarity rarity;

    public AbstractItem(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public int getValue() {
        return value;
    }

    @Override
    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractItem that = (AbstractItem) o;
        return name.equals(that.name) && rarity == that.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Item{" +
                "name='" + name + '\'' +
                ", value=" + value +
                ", rarity=" + rarity +
                '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/copilot/sol5/AbstractItemP.java" startline="1" endline="51" pcid="2442">
import java.util.Objects;

public abstract class AbstractItem implements Item {
    private String name;
    private int value;
    private Rarity rarity;

    public AbstractItem(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public int getValue() {
        return value;
    }

    @Override
    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractItem that = (AbstractItem) o;
        return name.equals(that.name) && rarity == that.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Item{" +
                "name='" + name + '\'' +
                ", value=" + value +
                ", rarity=" + rarity +
                '}';
    }
}

</source>
</class>

<class classid="186" nclones="3" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol2/ConsumableItemP.java" startline="1" endline="28" pcid="2495">
public class ConsumableItem extends Item implements Sellable {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = Math.max(0, charges);
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Charges remaining: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return "[Consumable] " + super.toString() + ", Charges: " + charges;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol3/ConsumableItemP.java" startline="1" endline="28" pcid="2505">
public class ConsumableItem extends Item implements Sellable {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = Math.max(0, charges);
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Charges remaining: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return "[Consumable] " + super.toString() + ", Charges: " + charges;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol4/ConsumableItemP.java" startline="1" endline="28" pcid="2515">
public class ConsumableItem extends Item implements Sellable {
    private int charges;

    public ConsumableItem(String name, int value, Rarity rarity, int charges) {
        super(name, value, rarity);
        this.charges = Math.max(0, charges);
    }

    public int getCharges() {
        return charges;
    }

    @Override
    public void use() {
        if (charges > 0) {
            charges--;
            System.out.println("Used " + getName() + ". Charges remaining: " + charges);
        } else {
            System.out.println(getName() + " has no charges left.");
        }
    }

    @Override
    public String toString() {
        return "[Consumable] " + super.toString() + ", Charges: " + charges;
    }
}

</source>
</class>

<class classid="187" nclones="2" nlines="47" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol2/FinalFantasyInventoryP.java" startline="1" endline="62" pcid="2496">
public class FinalFantasyInventory {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(5);

        GearItem helmet = new GearItem("Iron Helmet", 50, Rarity.GREEN, 5, 4, 2);
        ConsumableItem potion = new ConsumableItem("Potion", 10, Rarity.WHITE, 3);
        TrashItem rock = new TrashItem("Pebble", 1, Rarity.WHITE);
        ConsumableItem ether = new ConsumableItem("Ether", 25, Rarity.GREEN, 2);
        GearItem sword = new GearItem("Bronze Sword", 100, Rarity.BLUE, 10, 0, 5);
        TrashItem feather = new TrashItem("Chocobo Feather", 2, Rarity.PINK);
        ConsumableItem antidote = new ConsumableItem("Antidote", 15, Rarity.WHITE, 5);

        inventory.add(helmet);
        inventory.add(potion);
        inventory.add(rock);
        inventory.add(ether);
        inventory.add(sword);
        inventory.add(feather);

        System.out.println("\n--- Initial Inventory ---");
        System.out.println(inventory);

        inventory.use(1);
        inventory.use(1);
        inventory.use(1);
        inventory.use(1);

        System.out.println("\n--- Inventory after using potion ---");
        System.out.println(inventory);

        inventory.drop(rock);
        inventory.drop(new TrashItem("Chocobo Feather", 2, Rarity.PINK));

        System.out.println("\n--- Inventory after dropping items ---");
        System.out.println(inventory);

        inventory.sell(0);
        inventory.sell(1);
        inventory.sell(0);

        System.out.println("\n--- Inventory after selling items ---");
        System.out.println(inventory);

        inventory.sort("name", "ascending");
        System.out.println("\n--- Inventory sorted by name (ascending) ---");
        System.out.println(inventory);

        inventory.add(rock);
        inventory.add(feather);

        inventory.sort("value", "descending");
        System.out.println("\n--- Inventory sorted by value (descending) ---");
        System.out.println(inventory);

        inventory.sort("rarity", "ascending");
        inventory.sort("name", "random");

        System.out.println("\n--- Final Inventory ---");
        System.out.println(inventory);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol3/FinalFantasyInventoryP.java" startline="1" endline="62" pcid="2506">
public class FinalFantasyInventory {
    public static void main(String[] args) {
        Inventory inventory = new Inventory(5);

        GearItem helmet = new GearItem("Iron Helmet", 50, Rarity.GREEN, 5, 4, 2);
        ConsumableItem potion = new ConsumableItem("Potion", 10, Rarity.WHITE, 3);
        TrashItem rock = new TrashItem("Pebble", 1, Rarity.WHITE);
        ConsumableItem ether = new ConsumableItem("Ether", 25, Rarity.GREEN, 2);
        GearItem sword = new GearItem("Bronze Sword", 100, Rarity.BLUE, 10, 0, 5);
        TrashItem feather = new TrashItem("Chocobo Feather", 2, Rarity.PINK);
        ConsumableItem antidote = new ConsumableItem("Antidote", 15, Rarity.WHITE, 5);

        inventory.add(helmet);
        inventory.add(potion);
        inventory.add(rock);
        inventory.add(ether);
        inventory.add(sword);
        inventory.add(feather);

        System.out.println("\n--- Initial Inventory ---");
        System.out.println(inventory);

        inventory.use(1);
        inventory.use(1);
        inventory.use(1);
        inventory.use(1);

        System.out.println("\n--- Inventory after using potion ---");
        System.out.println(inventory);

        inventory.drop(rock);
        inventory.drop(new TrashItem("Chocobo Feather", 2, Rarity.PINK));

        System.out.println("\n--- Inventory after dropping items ---");
        System.out.println(inventory);

        inventory.sell(0);
        inventory.sell(1);
        inventory.sell(0);

        System.out.println("\n--- Inventory after selling items ---");
        System.out.println(inventory);

        inventory.sort("name", "ascending");
        System.out.println("\n--- Inventory sorted by name (ascending) ---");
        System.out.println(inventory);

        inventory.add(rock);
        inventory.add(feather);

        inventory.sort("value", "descending");
        System.out.println("\n--- Inventory sorted by value (descending) ---");
        System.out.println(inventory);

        inventory.sort("rarity", "ascending");
        inventory.sort("name", "random");

        System.out.println("\n--- Final Inventory ---");
        System.out.println(inventory);
    }
}

</source>
</class>

<class classid="188" nclones="3" nlines="34" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol2/GearItemP.java" startline="1" endline="41" pcid="2497">
public class GearItem extends Item {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = Math.max(0, criticalHit);
        this.determination = Math.max(0, determination);
        this.directHit = Math.max(0, directHit);
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public String toString() {
        return "[Gear] " + super.toString() + ", Crit: " + criticalHit + ", Det: " + determination + ", Direct: " + directHit;
    }

    @Override
    public int compareTo(Item other) {
        if (other instanceof GearItem) {
            GearItem otherGear = (GearItem) other;
            int thisStats = this.criticalHit + this.determination + this.directHit;
            int otherStats = otherGear.getCriticalHit() + otherGear.getDetermination() + otherGear.getDirectHit();
            return Integer.compare(thisStats, otherStats);
        }
        return super.compareTo(other);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol3/GearItemP.java" startline="1" endline="41" pcid="2507">
public class GearItem extends Item {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = Math.max(0, criticalHit);
        this.determination = Math.max(0, determination);
        this.directHit = Math.max(0, directHit);
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public String toString() {
        return "[Gear] " + super.toString() + ", Crit: " + criticalHit + ", Det: " + determination + ", Direct: " + directHit;
    }

    @Override
    public int compareTo(Item other) {
        if (other instanceof GearItem) {
            GearItem otherGear = (GearItem) other;
            int thisStats = this.criticalHit + this.determination + this.directHit;
            int otherStats = otherGear.getCriticalHit() + otherGear.getDetermination() + otherGear.getDirectHit();
            return Integer.compare(thisStats, otherStats);
        }
        return super.compareTo(other);
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol4/GearItemP.java" startline="1" endline="41" pcid="2519">
public class GearItem extends Item {
    private int criticalHit;
    private int determination;
    private int directHit;

    public GearItem(String name, int value, Rarity rarity, int criticalHit, int determination, int directHit) {
        super(name, value, rarity);
        this.criticalHit = Math.max(0, criticalHit);
        this.determination = Math.max(0, determination);
        this.directHit = Math.max(0, directHit);
    }

    public int getCriticalHit() {
        return criticalHit;
    }

    public int getDetermination() {
        return determination;
    }

    public int getDirectHit() {
        return directHit;
    }

    @Override
    public String toString() {
        return "[Gear] " + super.toString() + ", Crit: " + criticalHit + ", Det: " + determination + ", Direct: " + directHit;
    }

    @Override
    public int compareTo(Item other) {
        if (other instanceof GearItem) {
            GearItem otherGear = (GearItem) other;
            int thisStats = this.criticalHit + this.determination + this.directHit;
            int otherStats = otherGear.getCriticalHit() + otherGear.getDetermination() + otherGear.getDirectHit();
            return Integer.compare(thisStats, otherStats);
        }
        return super.compareTo(other);
    }
}

</source>
</class>

<class classid="189" nclones="3" nlines="42" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol2/ItemP.java" startline="1" endline="53" pcid="2500">
import java.util.Objects;

public abstract class Item implements Comparable<Item> {
    private String name;
    private int value;
    private Rarity rarity;

    public Item(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    public String getName() {
        return name;
    }

    public int getValue() {
        return value;
    }

    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Item other = (Item) obj;
        return Objects.equals(name, other.name) && rarity == other.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Value: " + value + ", Rarity: " + rarity;
    }

    @Override
    public int compareTo(Item other) {
        return Integer.compare(this.value, other.value);
    }

    public void use() {
        System.out.println("This item cannot be used directly.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol3/ItemP.java" startline="1" endline="53" pcid="2509">
import java.util.Objects;

public abstract class Item implements Comparable<Item> {
    private String name;
    private int value;
    private Rarity rarity;

    public Item(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    public String getName() {
        return name;
    }

    public int getValue() {
        return value;
    }

    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Item other = (Item) obj;
        return Objects.equals(name, other.name) && rarity == other.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Value: " + value + ", Rarity: " + rarity;
    }

    @Override
    public int compareTo(Item other) {
        return Integer.compare(this.value, other.value);
    }

    public void use() {
        System.out.println("This item cannot be used directly.");
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol4/ItemP.java" startline="1" endline="53" pcid="2522">
import java.util.Objects;

public abstract class Item implements Comparable<Item> {
    private String name;
    private int value;
    private Rarity rarity;

    public Item(String name, int value, Rarity rarity) {
        this.name = name;
        this.value = value;
        this.rarity = rarity;
    }

    public String getName() {
        return name;
    }

    public int getValue() {
        return value;
    }

    public Rarity getRarity() {
        return rarity;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Item other = (Item) obj;
        return Objects.equals(name, other.name) && rarity == other.rarity;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, rarity);
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Value: " + value + ", Rarity: " + rarity;
    }

    @Override
    public int compareTo(Item other) {
        return Integer.compare(this.value, other.value);
    }

    public void use() {
        System.out.println("This item cannot be used directly.");
    }
}

</source>
</class>

<class classid="190" nclones="2" nlines="14" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol3/ComparatorFactoryP.java" startline="1" endline="16" pcid="2504">
import java.util.Comparator;

public class ComparatorFactory {
    public static Comparator<Item> getComparator(String sortBy) {
        switch (sortBy.toLowerCase()) {
            case "name":
                return Comparator.comparing(Item::getName);
            case "value":
                return Comparator.comparingInt(Item::getValue);
            default:
                System.out.println("Invalid sort criteria: " + sortBy + ".");
                return null;
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 1/gemini/sol4/ComparatorFactoryP.java" startline="1" endline="16" pcid="2514">
import java.util.Comparator;

public class ComparatorFactory {
    public static Comparator<Item> getComparator(String sortBy) {
        switch (sortBy.toLowerCase()) {
            case "name":
                return Comparator.comparing(Item::getName);
            case "value":
                return Comparator.comparingInt(Item::getValue);
            default:
                System.out.println("Invalid sort criteria: " + sortBy + ".");
                return null;
        }
    }
}

</source>
</class>

<class classid="191" nclones="3" nlines="31" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol1/CharacterP.java" startline="1" endline="37" pcid="2573">
public class Character {
    private String name;
    private int maxHealth;
    private int currentHealth;

    public Character(String name, int maxHealth) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.currentHealth = maxHealth;
    }

    public String getName() {
        return name;
    }

    public int getMaxHealth() {
        return maxHealth;
    }

    public int getCurrentHealth() {
        return currentHealth;
    }

    public void modifyHealth(int amount) {
        this.currentHealth += amount;
        if (this.currentHealth > this.maxHealth) {
            this.currentHealth = this.maxHealth;
        } else if (this.currentHealth < 0) {
            this.currentHealth = 0;
        }
    }

    public boolean isAlive() {
        return this.currentHealth > 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol3/CharacterP.java" startline="1" endline="37" pcid="2587">
public class Character {
    private String name;
    private int maxHealth;
    private int currentHealth;

    public Character(String name, int maxHealth) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.currentHealth = maxHealth;
    }

    public String getName() {
        return name;
    }

    public int getMaxHealth() {
        return maxHealth;
    }

    public int getCurrentHealth() {
        return currentHealth;
    }

    public void modifyHealth(int amount) {
        this.currentHealth += amount;
        if (this.currentHealth > this.maxHealth) {
            this.currentHealth = this.maxHealth;
        } else if (this.currentHealth < 0) {
            this.currentHealth = 0;
        }
    }

    public boolean isAlive() {
        return this.currentHealth > 0;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol2/CharacterP.java" startline="1" endline="37" pcid="2580">
public class Character {
    private String name;
    private int maxHealth;
    private int currentHealth;

    public Character(String name, int maxHealth) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.currentHealth = maxHealth;
    }

    public String getName() {
        return name;
    }

    public int getMaxHealth() {
        return maxHealth;
    }

    public int getCurrentHealth() {
        return currentHealth;
    }

    public void modifyHealth(int amount) {
        this.currentHealth += amount;
        if (this.currentHealth > this.maxHealth) {
            this.currentHealth = this.maxHealth;
        } else if (this.currentHealth < 0) {
            this.currentHealth = 0;
        }
    }

    public boolean isAlive() {
        return this.currentHealth > 0;
    }
}

</source>
</class>

<class classid="192" nclones="2" nlines="24" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol1/LoggerP.java" startline="1" endline="30" pcid="2575">
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Logger {
    private static Logger instance;
    private List<String> logs;

    private Logger() {
        logs = new ArrayList<>();
    }

    public static Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }

    public void log(Date date, String message) {
        logs.add(date.toString() + ": " + message);
    }

    public void printLogs() {
        for (String log : logs) {
            System.out.println(log);
        }
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol2/LoggerP.java" startline="1" endline="30" pcid="2582">
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Logger {
    private static Logger instance;
    private List<String> logs;

    private Logger() {
        logs = new ArrayList<>();
    }

    public static Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }

    public void log(Date date, String message) {
        logs.add(date.toString() + ": " + message);
    }

    public void printLogs() {
        for (String log : logs) {
            System.out.println(log);
        }
    }
}

</source>
</class>

<class classid="193" nclones="2" nlines="15" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol1/MainP.java" startline="1" endline="21" pcid="2576">
public class Main {
    public static void main(String[] args) {
        Character character1 = new Character("Hero", 100);
        Character character2 = new Character("Villain", 80);

        Action jump = new Jump(character1);
        jump.execute();

        Action ability = new Ability(character1, "Fireball");
        ability.execute();

        Action targetableAbility = new TargetableAbility(character1, "Heal", character1, 20);
        targetableAbility.execute();

        Action attack = new TargetableAbility(character2, "Dark Strike", character1, -50);
        attack.execute();

        Logger.getInstance().printLogs();
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 2/copilot/sol2/MainP.java" startline="1" endline="21" pcid="2583">
public class Main {
    public static void main(String[] args) {
        Character character1 = new Character("Hero", 100);
        Character character2 = new Character("Villain", 80);

        Action jump = new Jump(character1);
        jump.execute();

        Action ability = new Ability(character1, "Fireball");
        ability.execute();

        Action targetableAbility = new TargetableAbility(character1, "Heal", character1, 20);
        targetableAbility.execute();

        Action attack = new TargetableAbility(character2, "Dark Strike", character1, -50);
        attack.execute();

        Logger.getInstance().printLogs();
    }
}

</source>
</class>

<class classid="194" nclones="10" nlines="28" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/chatgpt/sol1/MageP.java" startline="1" endline="39" pcid="2669">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/gemini/sol4/MageP.java" startline="1" endline="39" pcid="2723">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/chatgpt/sol4/MageP.java" startline="1" endline="39" pcid="2676">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/gemini/sol5/MageP.java" startline="1" endline="39" pcid="2726">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/copilot/sol4/MageP.java" startline="1" endline="39" pcid="2692">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/deepseek/sol5/MageP.java" startline="1" endline="39" pcid="2709">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/deepseek/sol4/MageP.java" startline="1" endline="39" pcid="2706">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/copilot/sol5/MageP.java" startline="1" endline="39" pcid="2695">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/copilot/sol2/MageP.java" startline="1" endline="39" pcid="2685">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/chatgpt/sol5/MageP.java" startline="1" endline="39" pcid="2679">
public class Mage {
    private String name;

    Mage(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Mage other = (Mage) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

}

</source>
</class>

<class classid="195" nclones="2" nlines="10" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/copilot/sol1/RedMageP.java" startline="1" endline="13" pcid="2683">
public class RedMage extends Mage {
    private int magicPower;

    public RedMage(String name, int magicPower) {
        super(name);
        this.magicPower = magicPower;
    }

    public int getMagicPower() {
        return magicPower;
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/copilot/sol3/RedMageP.java" startline="1" endline="13" pcid="2690">
public class RedMage extends Mage {
    private int magicPower;

    public RedMage(String name, int magicPower) {
        super(name);
        this.magicPower = magicPower;
    }

    public int getMagicPower() {
        return magicPower;
    }
}

</source>
</class>

<class classid="196" nclones="2" nlines="19" similarity="100">
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/gemini/sol1/RedMageP.java" startline="1" endline="24" pcid="2713">
public class RedMage extends Mage {
    private String swordType;
    private int meleePower;

    public RedMage(String name, int mana, String swordType, int meleePower) {
        super(name, mana);
        this.swordType = swordType;
        this.meleePower = meleePower;
    }

    public String getSwordType() {
        return swordType;
    }

    public int getMeleePower() {
        return meleePower;
    }

    @Override
    public String toString() {
        return "RedMage{name='" + getName() + "', mana=" + getMana() + ", swordType='" + swordType + "', meleePower=" + meleePower + '}';
    }
}

</source>
<source file="../AIvsSTD_ai_preproc/lab9/Ex. 3/gemini/sol2/RedMageP.java" startline="1" endline="25" pcid="2717">
public class RedMage extends Mage {
    private String swordType;
    private int meleePower;

    public RedMage(String name, int mana, String swordType, int meleePower) {
        super(name, mana);
        this.swordType = swordType;
        this.meleePower = meleePower;
    }

    public String getSwordType() {
        return swordType;
    }

    public int getMeleePower() {
        return meleePower;
    }

    @Override
    public String toString() {
        return "RedMage{name='" + getName() + "', mana=" + getMana() + ", swordType='" + swordType + "', meleePower=" + meleePower + '}';
    }

}

</source>
</class>

</clones>
